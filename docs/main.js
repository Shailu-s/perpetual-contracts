/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={424:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var a=n(81),i=n.n(a),s=n(645),r=n.n(s)()(i());r.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600;700&display=swap);"]),r.push([e.id,"\nhtml,\nbody {\n  font-family: 'Source Code Pro', monospace;\n}\n",""]);const o=r},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,i,s){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(a)for(var o=0;o<this.length;o++){var d=this[o][0];null!=d&&(r[d]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);a&&r[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},81:e=>{"use strict";e.exports=function(e){return e[1]}},838:(e,t,n)=>{var a=n(424);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),(0,n(346).Z)("20211576",a,!1,{})},346:(e,t,n)=>{"use strict";function a(e,t){for(var n=[],a={},i=0;i<t.length;i++){var s=t[i],r=s[0],o={id:e+":"+i,css:s[1],media:s[2],sourceMap:s[3]};a[r]?a[r].parts.push(o):n.push(a[r]={id:r,parts:[o]})}return n}n.d(t,{Z:()=>m});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},r=i&&(document.head||document.getElementsByTagName("head")[0]),o=null,d=0,l=!1,u=function(){},p=null,y="data-vue-ssr-id",c="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(e,t,n,i){l=n,p=i||{};var r=a(e,t);return b(r),function(t){for(var n=[],i=0;i<r.length;i++){var o=r[i];(d=s[o.id]).refs--,n.push(d)}for(t?b(r=a(e,t)):r=[],i=0;i<n.length;i++){var d;if(0===(d=n[i]).refs){for(var l=0;l<d.parts.length;l++)d.parts[l]();delete s[d.id]}}}}function b(e){for(var t=0;t<e.length;t++){var n=e[t],a=s[n.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](n.parts[i]);for(;i<n.parts.length;i++)a.parts.push(T(n.parts[i]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{var r=[];for(i=0;i<n.parts.length;i++)r.push(T(n.parts[i]));s[n.id]={id:n.id,refs:1,parts:r}}}}function f(){var e=document.createElement("style");return e.type="text/css",r.appendChild(e),e}function T(e){var t,n,a=document.querySelector("style["+y+'~="'+e.id+'"]');if(a){if(l)return u;a.parentNode.removeChild(a)}if(c){var i=d++;a=o||(o=f()),t=g.bind(null,a,i,!1),n=g.bind(null,a,i,!0)}else a=f(),t=R.bind(null,a),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){if(a){if(a.css===e.css&&a.media===e.media&&a.sourceMap===e.sourceMap)return;t(e=a)}else n()}}var h,v=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function g(e,t,n,a){var i=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=v(t,i);else{var s=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function R(e,t){var n=t.css,a=t.media,i=t.sourceMap;if(a&&e.setAttribute("media",a),p.ssrId&&e.setAttribute(y,t.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var s=t[a]={id:a,exports:{}};return e[a](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=Object.freeze({}),t=Array.isArray;function a(e){return null==e}function i(e){return null!=e}function s(e){return!0===e}function r(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function o(e){return"function"==typeof e}function d(e){return null!==e&&"object"==typeof e}var l=Object.prototype.toString;function u(e){return"[object Object]"===l.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function y(e){return i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function c(e){return null==e?"":Array.isArray(e)||u(e)&&e.toString===l?JSON.stringify(e,null,2):String(e)}function m(e){var t=parseFloat(e);return isNaN(t)?e:t}function b(e,t){for(var n=Object.create(null),a=e.split(","),i=0;i<a.length;i++)n[a[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var f=b("slot,component",!0),T=b("key,ref,slot,slot-scope,is");function h(e,t){var n=e.length;if(n){if(t===e[n-1])return void(e.length=n-1);var a=e.indexOf(t);if(a>-1)return e.splice(a,1)}}var v=Object.prototype.hasOwnProperty;function g(e,t){return v.call(e,t)}function R(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var w=/-(\w)/g,k=R((function(e){return e.replace(w,(function(e,t){return t?t.toUpperCase():""}))})),M=R((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),x=/\B([A-Z])/g,_=R((function(e){return e.replace(x,"-$1").toLowerCase()})),A=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var a=arguments.length;return a?a>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function I(e,t){t=t||0;for(var n=e.length-t,a=new Array(n);n--;)a[n]=e[n+t];return a}function P(e,t){for(var n in t)e[n]=t[n];return e}function C(e){for(var t={},n=0;n<e.length;n++)e[n]&&P(t,e[n]);return t}function O(e,t,n){}var E=function(e,t,n){return!1},S=function(e){return e};function L(e,t){if(e===t)return!0;var n=d(e),a=d(t);if(!n||!a)return!n&&!a&&String(e)===String(t);try{var i=Array.isArray(e),s=Array.isArray(t);if(i&&s)return e.length===t.length&&e.every((function(e,n){return L(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||s)return!1;var r=Object.keys(e),o=Object.keys(t);return r.length===o.length&&r.every((function(n){return L(e[n],t[n])}))}catch(e){return!1}}function F(e,t){for(var n=0;n<e.length;n++)if(L(e[n],t))return n;return-1}function V(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var N="data-server-rendered",q=["component","directive","filter"],D=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],z={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:E,isReservedAttr:E,isUnknownElement:E,getTagNamespace:O,parsePlatformTagName:S,mustUseProp:E,async:!0,_lifecycleHooks:D},B=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function $(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function G(e,t,n,a){Object.defineProperty(e,t,{value:n,enumerable:!!a,writable:!0,configurable:!0})}var U=new RegExp("[^".concat(B.source,".$_\\d]")),j="__proto__"in{},W="undefined"!=typeof window,H=W&&window.navigator.userAgent.toLowerCase(),Q=H&&/msie|trident/.test(H),X=H&&H.indexOf("msie 9.0")>0,K=H&&H.indexOf("edge/")>0;H&&H.indexOf("android");var J=H&&/iphone|ipad|ipod|ios/.test(H);H&&/chrome\/\d+/.test(H),H&&/phantomjs/.test(H);var Y,Z=H&&H.match(/firefox\/(\d+)/),ee={}.watch,te=!1;if(W)try{var ne={};Object.defineProperty(ne,"passive",{get:function(){te=!0}}),window.addEventListener("test-passive",null,ne)}catch(e){}var ae=function(){return void 0===Y&&(Y=!W&&void 0!==n.g&&n.g.process&&"server"===n.g.process.env.VUE_ENV),Y},ie=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var re,oe="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);re="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var de=null;function le(e){void 0===e&&(e=null),e||de&&de._scope.off(),de=e,e&&e._scope.on()}var ue=function(){function e(e,t,n,a,i,s,r,o){this.tag=e,this.data=t,this.children=n,this.text=a,this.elm=i,this.ns=void 0,this.context=s,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=o,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),pe=function(e){void 0===e&&(e="");var t=new ue;return t.text=e,t.isComment=!0,t};function ye(e){return new ue(void 0,void 0,void 0,String(e))}function ce(e){var t=new ue(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var me=0,be=[],fe=function(){for(var e=0;e<be.length;e++){var t=be[e];t.subs=t.subs.filter((function(e){return e})),t._pending=!1}be.length=0},Te=function(){function e(){this._pending=!1,this.id=me++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,be.push(this))},e.prototype.depend=function(t){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){for(var t=this.subs.filter((function(e){return e})),n=0,a=t.length;n<a;n++)t[n].update()},e}();Te.target=null;var he=[];function ve(e){he.push(e),Te.target=e}function ge(){he.pop(),Te.target=he[he.length-1]}var Re=Array.prototype,we=Object.create(Re);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Re[e];G(we,e,(function(){for(var n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];var i,s=t.apply(this,n),r=this.__ob__;switch(e){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&r.observeArray(i),r.dep.notify(),s}))}));var ke=Object.getOwnPropertyNames(we),Me={},xe=!0;function _e(e){xe=e}var Ae={notify:O,depend:O,addSub:O,removeSub:O},Ie=function(){function e(e,n,a){if(void 0===n&&(n=!1),void 0===a&&(a=!1),this.value=e,this.shallow=n,this.mock=a,this.dep=a?Ae:new Te,this.vmCount=0,G(e,"__ob__",this),t(e)){if(!a)if(j)e.__proto__=we;else for(var i=0,s=ke.length;i<s;i++)G(e,o=ke[i],we[o]);n||this.observeArray(e)}else{var r=Object.keys(e);for(i=0;i<r.length;i++){var o;Ce(e,o=r[i],Me,void 0,n,a)}}}return e.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Pe(e[t],!1,this.mock)},e}();function Pe(e,n,a){return e&&g(e,"__ob__")&&e.__ob__ instanceof Ie?e.__ob__:!xe||!a&&ae()||!t(e)&&!u(e)||!Object.isExtensible(e)||e.__v_skip||Ve(e)||e instanceof ue?void 0:new Ie(e,n,a)}function Ce(e,n,a,i,s,r){var o=new Te,d=Object.getOwnPropertyDescriptor(e,n);if(!d||!1!==d.configurable){var l=d&&d.get,u=d&&d.set;l&&!u||a!==Me&&2!==arguments.length||(a=e[n]);var p=!s&&Pe(a,!1,r);return Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=l?l.call(e):a;return Te.target&&(o.depend(),p&&(p.dep.depend(),t(n)&&Se(n))),Ve(n)&&!s?n.value:n},set:function(t){var n,i,d=l?l.call(e):a;if((n=d)===(i=t)?0===n&&1/n!=1/i:n==n||i==i){if(u)u.call(e,t);else{if(l)return;if(!s&&Ve(d)&&!Ve(t))return void(d.value=t);a=t}p=!s&&Pe(t,!1,r),o.notify()}}}),o}}function Oe(e,n,a){if(!Fe(e)){var i=e.__ob__;return t(e)&&p(n)?(e.length=Math.max(e.length,n),e.splice(n,1,a),i&&!i.shallow&&i.mock&&Pe(a,!1,!0),a):n in e&&!(n in Object.prototype)?(e[n]=a,a):e._isVue||i&&i.vmCount?a:i?(Ce(i.value,n,a,void 0,i.shallow,i.mock),i.dep.notify(),a):(e[n]=a,a)}}function Ee(e,n){if(t(e)&&p(n))e.splice(n,1);else{var a=e.__ob__;e._isVue||a&&a.vmCount||Fe(e)||g(e,n)&&(delete e[n],a&&a.dep.notify())}}function Se(e){for(var n=void 0,a=0,i=e.length;a<i;a++)(n=e[a])&&n.__ob__&&n.__ob__.dep.depend(),t(n)&&Se(n)}function Le(e){return function(e,t){Fe(e)||Pe(e,t,ae())}(e,!0),G(e,"__v_isShallow",!0),e}function Fe(e){return!(!e||!e.__v_isReadonly)}function Ve(e){return!(!e||!0!==e.__v_isRef)}function Ne(e,t,n){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var e=t[n];if(Ve(e))return e.value;var a=e&&e.__ob__;return a&&a.dep.depend(),e},set:function(e){var a=t[n];Ve(a)&&!Ve(e)?a.value=e:t[n]=e}})}var qe=R((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),a="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:n,capture:a,passive:t}}));function De(e,n){function a(){var e=a.fns;if(!t(e))return Xt(e,null,arguments,n,"v-on handler");for(var i=e.slice(),s=0;s<i.length;s++)Xt(i[s],null,arguments,n,"v-on handler")}return a.fns=e,a}function ze(e,t,n,i,r,o){var d,l,u,p;for(d in e)l=e[d],u=t[d],p=qe(d),a(l)||(a(u)?(a(l.fns)&&(l=e[d]=De(l,o)),s(p.once)&&(l=e[d]=r(p.name,l,p.capture)),n(p.name,l,p.capture,p.passive,p.params)):l!==u&&(u.fns=l,e[d]=u));for(d in t)a(e[d])&&i((p=qe(d)).name,t[d],p.capture)}function Be(e,t,n){var r;e instanceof ue&&(e=e.data.hook||(e.data.hook={}));var o=e[t];function d(){n.apply(this,arguments),h(r.fns,d)}a(o)?r=De([d]):i(o.fns)&&s(o.merged)?(r=o).fns.push(d):r=De([o,d]),r.merged=!0,e[t]=r}function $e(e,t,n,a,s){if(i(t)){if(g(t,n))return e[n]=t[n],s||delete t[n],!0;if(g(t,a))return e[n]=t[a],s||delete t[a],!0}return!1}function Ge(e){return r(e)?[ye(e)]:t(e)?je(e):void 0}function Ue(e){return i(e)&&i(e.text)&&!1===e.isComment}function je(e,n){var o,d,l,u,p=[];for(o=0;o<e.length;o++)a(d=e[o])||"boolean"==typeof d||(u=p[l=p.length-1],t(d)?d.length>0&&(Ue((d=je(d,"".concat(n||"","_").concat(o)))[0])&&Ue(u)&&(p[l]=ye(u.text+d[0].text),d.shift()),p.push.apply(p,d)):r(d)?Ue(u)?p[l]=ye(u.text+d):""!==d&&p.push(ye(d)):Ue(d)&&Ue(u)?p[l]=ye(u.text+d.text):(s(e._isVList)&&i(d.tag)&&a(d.key)&&i(n)&&(d.key="__vlist".concat(n,"_").concat(o,"__")),p.push(d)));return p}var We=1,He=2;function Qe(e,n,a,l,u,p){return(t(a)||r(a))&&(u=l,l=a,a=void 0),s(p)&&(u=He),function(e,n,a,s,r){if(i(a)&&i(a.__ob__))return pe();if(i(a)&&i(a.is)&&(n=a.is),!n)return pe();var l,u;if(t(s)&&o(s[0])&&((a=a||{}).scopedSlots={default:s[0]},s.length=0),r===He?s=Ge(s):r===We&&(s=function(e){for(var n=0;n<e.length;n++)if(t(e[n]))return Array.prototype.concat.apply([],e);return e}(s)),"string"==typeof n){var p=void 0;u=e.$vnode&&e.$vnode.ns||z.getTagNamespace(n),l=z.isReservedTag(n)?new ue(z.parsePlatformTagName(n),a,s,void 0,void 0,e):a&&a.pre||!i(p=$n(e.$options,"components",n))?new ue(n,a,s,void 0,void 0,e):En(p,a,e,s,n)}else l=En(n,a,e,s);return t(l)?l:i(l)?(i(u)&&Xe(l,u),i(a)&&function(e){d(e.style)&&pn(e.style),d(e.class)&&pn(e.class)}(a),l):pe()}(e,n,a,l,u)}function Xe(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),i(e.children))for(var r=0,o=e.children.length;r<o;r++){var d=e.children[r];i(d.tag)&&(a(d.ns)||s(n)&&"svg"!==d.tag)&&Xe(d,t,n)}}function Ke(e,n){var a,s,r,o,l=null;if(t(e)||"string"==typeof e)for(l=new Array(e.length),a=0,s=e.length;a<s;a++)l[a]=n(e[a],a);else if("number"==typeof e)for(l=new Array(e),a=0;a<e;a++)l[a]=n(a+1,a);else if(d(e))if(oe&&e[Symbol.iterator]){l=[];for(var u=e[Symbol.iterator](),p=u.next();!p.done;)l.push(n(p.value,l.length)),p=u.next()}else for(r=Object.keys(e),l=new Array(r.length),a=0,s=r.length;a<s;a++)o=r[a],l[a]=n(e[o],o,a);return i(l)||(l=[]),l._isVList=!0,l}function Je(e,t,n,a){var i,s=this.$scopedSlots[e];s?(n=n||{},a&&(n=P(P({},a),n)),i=s(n)||(o(t)?t():t)):i=this.$slots[e]||(o(t)?t():t);var r=n&&n.slot;return r?this.$createElement("template",{slot:r},i):i}function Ye(e){return $n(this.$options,"filters",e)||S}function Ze(e,n){return t(e)?-1===e.indexOf(n):e!==n}function et(e,t,n,a,i){var s=z.keyCodes[t]||n;return i&&a&&!z.keyCodes[t]?Ze(i,a):s?Ze(s,e):a?_(a)!==t:void 0===e}function tt(e,n,a,i,s){if(a&&d(a)){t(a)&&(a=C(a));var r=void 0,o=function(t){if("class"===t||"style"===t||T(t))r=e;else{var o=e.attrs&&e.attrs.type;r=i||z.mustUseProp(n,o,t)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var d=k(t),l=_(t);d in r||l in r||(r[t]=a[t],s&&((e.on||(e.on={}))["update:".concat(t)]=function(e){a[t]=e}))};for(var l in a)o(l)}return e}function nt(e,t){var n=this._staticTrees||(this._staticTrees=[]),a=n[e];return a&&!t||it(a=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),a}function at(e,t,n){return it(e,"__once__".concat(t).concat(n?"_".concat(n):""),!0),e}function it(e,n,a){if(t(e))for(var i=0;i<e.length;i++)e[i]&&"string"!=typeof e[i]&&st(e[i],"".concat(n,"_").concat(i),a);else st(e,n,a)}function st(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function rt(e,t){if(t&&u(t)){var n=e.on=e.on?P({},e.on):{};for(var a in t){var i=n[a],s=t[a];n[a]=i?[].concat(i,s):s}}return e}function ot(e,n,a,i){n=n||{$stable:!a};for(var s=0;s<e.length;s++){var r=e[s];t(r)?ot(r,n,a):r&&(r.proxy&&(r.fn.proxy=!0),n[r.key]=r.fn)}return i&&(n.$key=i),n}function dt(e,t){for(var n=0;n<t.length;n+=2){var a=t[n];"string"==typeof a&&a&&(e[t[n]]=t[n+1])}return e}function lt(e,t){return"string"==typeof e?t+e:e}function ut(e){e._o=at,e._n=m,e._s=c,e._l=Ke,e._t=Je,e._q=L,e._i=F,e._m=nt,e._f=Ye,e._k=et,e._b=tt,e._v=ye,e._e=pe,e._u=ot,e._g=rt,e._d=dt,e._p=lt}function pt(e,t){if(!e||!e.length)return{};for(var n={},a=0,i=e.length;a<i;a++){var s=e[a],r=s.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,s.context!==t&&s.fnContext!==t||!r||null==r.slot)(n.default||(n.default=[])).push(s);else{var o=r.slot,d=n[o]||(n[o]=[]);"template"===s.tag?d.push.apply(d,s.children||[]):d.push(s)}}for(var l in n)n[l].every(yt)&&delete n[l];return n}function yt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function ct(e){return e.isComment&&e.asyncFactory}function mt(t,n,a,i){var s,r=Object.keys(a).length>0,o=n?!!n.$stable:!r,d=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(o&&i&&i!==e&&d===i.$key&&!r&&!i.$hasNormal)return i;for(var l in s={},n)n[l]&&"$"!==l[0]&&(s[l]=bt(t,a,l,n[l]))}else s={};for(var u in a)u in s||(s[u]=ft(a,u));return n&&Object.isExtensible(n)&&(n._normalized=s),G(s,"$stable",o),G(s,"$key",d),G(s,"$hasNormal",r),s}function bt(e,n,a,i){var s=function(){var n=de;le(e);var a=arguments.length?i.apply(null,arguments):i({}),s=(a=a&&"object"==typeof a&&!t(a)?[a]:Ge(a))&&a[0];return le(n),a&&(!s||1===a.length&&s.isComment&&!ct(s))?void 0:a};return i.proxy&&Object.defineProperty(n,a,{get:s,enumerable:!0,configurable:!0}),s}function ft(e,t){return function(){return e[t]}}function Tt(e,t,n,a,i){var s=!1;for(var r in t)r in e?t[r]!==n[r]&&(s=!0):(s=!0,ht(e,r,a,i));for(var r in e)r in t||(s=!0,delete e[r]);return s}function ht(e,t,n,a){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){return n[a][t]}})}function vt(e,t){for(var n in t)e[n]=t[n];for(var n in e)n in t||delete e[n]}var gt,Rt=null;function wt(e,t){return(e.__esModule||oe&&"Module"===e[Symbol.toStringTag])&&(e=e.default),d(e)?t.extend(e):e}function kt(e){if(t(e))for(var n=0;n<e.length;n++){var a=e[n];if(i(a)&&(i(a.componentOptions)||ct(a)))return a}}function Mt(e,t){gt.$on(e,t)}function xt(e,t){gt.$off(e,t)}function _t(e,t){var n=gt;return function a(){null!==t.apply(null,arguments)&&n.$off(e,a)}}function At(e,t,n){gt=e,ze(t,n||{},Mt,xt,_t,e),gt=void 0}var It=null;function Pt(e){var t=It;return It=e,function(){It=t}}function Ct(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Ot(e,t){if(t){if(e._directInactive=!1,Ct(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Ot(e.$children[n]);St(e,"activated")}}function Et(e,t){if(!(t&&(e._directInactive=!0,Ct(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)Et(e.$children[n]);St(e,"deactivated")}}function St(e,t,n,a){void 0===a&&(a=!0),ve();var i=de;a&&le(e);var s=e.$options[t],r="".concat(t," hook");if(s)for(var o=0,d=s.length;o<d;o++)Xt(s[o],e,n||null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),a&&le(i),ge()}var Lt=[],Ft=[],Vt={},Nt=!1,qt=!1,Dt=0,zt=0,Bt=Date.now;if(W&&!Q){var $t=window.performance;$t&&"function"==typeof $t.now&&Bt()>document.createEvent("Event").timeStamp&&(Bt=function(){return $t.now()})}var Gt=function(e,t){if(e.post){if(!t.post)return 1}else if(t.post)return-1;return e.id-t.id};function Ut(){var e,t;for(zt=Bt(),qt=!0,Lt.sort(Gt),Dt=0;Dt<Lt.length;Dt++)(e=Lt[Dt]).before&&e.before(),t=e.id,Vt[t]=null,e.run();var n=Ft.slice(),a=Lt.slice();Dt=Lt.length=Ft.length=0,Vt={},Nt=qt=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Ot(e[t],!0)}(n),function(e){for(var t=e.length;t--;){var n=e[t],a=n.vm;a&&a._watcher===n&&a._isMounted&&!a._isDestroyed&&St(a,"updated")}}(a),fe(),ie&&z.devtools&&ie.emit("flush")}var jt,Wt="watcher";"".concat(Wt," callback"),"".concat(Wt," getter"),"".concat(Wt," cleanup");var Ht=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=jt,!e&&jt&&(this.index=(jt.scopes||(jt.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var t=jt;try{return jt=this,e()}finally{jt=t}}},e.prototype.on=function(){jt=this},e.prototype.off=function(){jt=this.parent},e.prototype.stop=function(e){if(this.active){var t=void 0,n=void 0;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].teardown();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){var a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.parent=void 0,this.active=!1}},e}();function Qt(e,t,n){ve();try{if(t)for(var a=t;a=a.$parent;){var i=a.$options.errorCaptured;if(i)for(var s=0;s<i.length;s++)try{if(!1===i[s].call(a,e,t,n))return}catch(e){Kt(e,a,"errorCaptured hook")}}Kt(e,t,n)}finally{ge()}}function Xt(e,t,n,a,i){var s;try{(s=n?e.apply(t,n):e.call(t))&&!s._isVue&&y(s)&&!s._handled&&(s.catch((function(e){return Qt(e,a,i+" (Promise/async)")})),s._handled=!0)}catch(e){Qt(e,a,i)}return s}function Kt(e,t,n){if(z.errorHandler)try{return z.errorHandler.call(null,e,t,n)}catch(t){t!==e&&Jt(t)}Jt(e)}function Jt(e,t,n){if(!W||"undefined"==typeof console)throw e;console.error(e)}var Yt,Zt=!1,en=[],tn=!1;function nn(){tn=!1;var e=en.slice(0);en.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&se(Promise)){var an=Promise.resolve();Yt=function(){an.then(nn),J&&setTimeout(O)},Zt=!0}else if(Q||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Yt="undefined"!=typeof setImmediate&&se(setImmediate)?function(){setImmediate(nn)}:function(){setTimeout(nn,0)};else{var sn=1,rn=new MutationObserver(nn),on=document.createTextNode(String(sn));rn.observe(on,{characterData:!0}),Yt=function(){sn=(sn+1)%2,on.data=String(sn)},Zt=!0}function dn(e,t){var n;if(en.push((function(){if(e)try{e.call(t)}catch(e){Qt(e,t,"nextTick")}else n&&n(t)})),tn||(tn=!0,Yt()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}function ln(e){return function(t,n){if(void 0===n&&(n=de),n)return function(e,t,n){var a=e.$options;a[t]=qn(a[t],n)}(n,e,t)}}ln("beforeMount"),ln("mounted"),ln("beforeUpdate"),ln("updated"),ln("beforeDestroy"),ln("destroyed"),ln("activated"),ln("deactivated"),ln("serverPrefetch"),ln("renderTracked"),ln("renderTriggered"),ln("errorCaptured");var un=new re;function pn(e){return yn(e,un),un.clear(),e}function yn(e,n){var a,i,s=t(e);if(!(!s&&!d(e)||e.__v_skip||Object.isFrozen(e)||e instanceof ue)){if(e.__ob__){var r=e.__ob__.dep.id;if(n.has(r))return;n.add(r)}if(s)for(a=e.length;a--;)yn(e[a],n);else if(Ve(e))yn(e.value,n);else for(a=(i=Object.keys(e)).length;a--;)yn(e[i[a]],n)}}var cn=0,mn=function(){function e(e,t,n,a,i){var s;void 0===(s=jt&&!jt._vm?jt:e?e._scope:void 0)&&(s=jt),s&&s.active&&s.effects.push(this),(this.vm=e)&&i&&(e._watcher=this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++cn,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new re,this.newDepIds=new re,this.expression="",o(t)?this.getter=t:(this.getter=function(e){if(!U.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=O)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;ve(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Qt(e,t,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&pn(e),ge(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Vt[t]&&(e!==Te.target||!e.noRecurse)){if(Vt[t]=!0,qt){for(var n=Lt.length-1;n>Dt&&Lt[n].id>e.id;)n--;Lt.splice(n+1,0,e)}else Lt.push(e);Nt||(Nt=!0,dn(Ut))}}(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||d(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'.concat(this.expression,'"');Xt(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&h(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}(),bn={enumerable:!0,configurable:!0,get:O,set:O};function fn(e,t,n){bn.get=function(){return this[t][n]},bn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,bn)}function Tn(n){var a=n.$options;if(a.props&&function(e,t){var n=e.$options.propsData||{},a=e._props=Le({}),i=e.$options._propKeys=[];!e.$parent||_e(!1);var s=function(s){i.push(s);var r=Gn(s,t,n,e);Ce(a,s,r),s in e||fn(e,"_props",s)};for(var r in t)s(r);_e(!0)}(n,a.props),function(t){var n=t.$options,a=n.setup;if(a){var i=t._setupContext=function(t){return{get attrs(){if(!t._attrsProxy){var n=t._attrsProxy={};G(n,"_v_attr_proxy",!0),Tt(n,t.$attrs,e,t,"$attrs")}return t._attrsProxy},get listeners(){return t._listenersProxy||Tt(t._listenersProxy={},t.$listeners,e,t,"$listeners"),t._listenersProxy},get slots(){return function(e){return e._slotsProxy||vt(e._slotsProxy={},e.$scopedSlots),e._slotsProxy}(t)},emit:A(t.$emit,t),expose:function(e){e&&Object.keys(e).forEach((function(n){return Ne(t,e,n)}))}}}(t);le(t),ve();var s=Xt(a,null,[t._props||Le({}),i],t,"setup");if(ge(),le(),o(s))n.render=s;else if(d(s))if(t._setupState=s,s.__sfc){var r=t._setupProxy={};for(var l in s)"__sfc"!==l&&Ne(r,s,l)}else for(var l in s)$(l)||Ne(t,s,l)}}(n),a.methods&&function(e,t){for(var n in e.$options.props,t)e[n]="function"!=typeof t[n]?O:A(t[n],e)}(n,a.methods),a.data)!function(e){var t=e.$options.data;u(t=e._data=o(t)?function(e,t){ve();try{return e.call(t,t)}catch(e){return Qt(e,t,"data()"),{}}finally{ge()}}(t,e):t||{})||(t={});for(var n=Object.keys(t),a=e.$options.props,i=(e.$options.methods,n.length);i--;){var s=n[i];a&&g(a,s)||$(s)||fn(e,"_data",s)}var r=Pe(t);r&&r.vmCount++}(n);else{var i=Pe(n._data={});i&&i.vmCount++}a.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),a=ae();for(var i in t){var s=t[i],r=o(s)?s:s.get;a||(n[i]=new mn(e,r||O,O,hn)),i in e||vn(e,i,s)}}(n,a.computed),a.watch&&a.watch!==ee&&function(e,n){for(var a in n){var i=n[a];if(t(i))for(var s=0;s<i.length;s++)wn(e,a,i[s]);else wn(e,a,i)}}(n,a.watch)}var hn={lazy:!0};function vn(e,t,n){var a=!ae();o(n)?(bn.get=a?gn(t):Rn(n),bn.set=O):(bn.get=n.get?a&&!1!==n.cache?gn(t):Rn(n.get):O,bn.set=n.set||O),Object.defineProperty(e,t,bn)}function gn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),Te.target&&t.depend(),t.value}}function Rn(e){return function(){return e.call(this,this)}}function wn(e,t,n,a){return u(n)&&(a=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,a)}function kn(e,t){if(e){for(var n=Object.create(null),a=oe?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++){var s=a[i];if("__ob__"!==s){var r=e[s].from;if(r in t._provided)n[s]=t._provided[r];else if("default"in e[s]){var d=e[s].default;n[s]=o(d)?d.call(t):d}}}return n}}var Mn=0;function xn(e){var t=e.options;if(e.super){var n=xn(e.super);if(n!==e.superOptions){e.superOptions=n;var a=function(e){var t,n=e.options,a=e.sealedOptions;for(var i in n)n[i]!==a[i]&&(t||(t={}),t[i]=n[i]);return t}(e);a&&P(e.extendOptions,a),(t=e.options=Bn(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function _n(n,a,i,r,o){var d,l=this,u=o.options;g(r,"_uid")?(d=Object.create(r))._original=r:(d=r,r=r._original);var p=s(u._compiled),y=!p;this.data=n,this.props=a,this.children=i,this.parent=r,this.listeners=n.on||e,this.injections=kn(u.inject,r),this.slots=function(){return l.$slots||mt(r,n.scopedSlots,l.$slots=pt(i,r)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return mt(r,n.scopedSlots,this.slots())}}),p&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=mt(r,n.scopedSlots,this.$slots)),u._scopeId?this._c=function(e,n,a,i){var s=Qe(d,e,n,a,i,y);return s&&!t(s)&&(s.fnScopeId=u._scopeId,s.fnContext=r),s}:this._c=function(e,t,n,a){return Qe(d,e,t,n,a,y)}}function An(e,t,n,a,i){var s=ce(e);return s.fnContext=n,s.fnOptions=a,t.slot&&((s.data||(s.data={})).slot=t.slot),s}function In(e,t){for(var n in t)e[k(n)]=t[n]}function Pn(e){return e.name||e.__name||e._componentTag}ut(_n.prototype);var Cn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;Cn.prepatch(n,n)}else(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},a=e.data.inlineTemplate;return i(a)&&(n.render=a.render,n.staticRenderFns=a.staticRenderFns),new e.componentOptions.Ctor(n)}(e,It)).$mount(t?e.elm:void 0,t)},prepatch:function(t,n){var a=n.componentOptions;!function(t,n,a,i,s){var r=i.data.scopedSlots,o=t.$scopedSlots,d=!!(r&&!r.$stable||o!==e&&!o.$stable||r&&t.$scopedSlots.$key!==r.$key||!r&&t.$scopedSlots.$key),l=!!(s||t.$options._renderChildren||d),u=t.$vnode;t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i),t.$options._renderChildren=s;var p=i.data.attrs||e;t._attrsProxy&&Tt(t._attrsProxy,p,u.data&&u.data.attrs||e,t,"$attrs")&&(l=!0),t.$attrs=p,a=a||e;var y=t.$options._parentListeners;if(t._listenersProxy&&Tt(t._listenersProxy,a,y||e,t,"$listeners"),t.$listeners=t.$options._parentListeners=a,At(t,a,y),n&&t.$options.props){_e(!1);for(var c=t._props,m=t.$options._propKeys||[],b=0;b<m.length;b++){var f=m[b],T=t.$options.props;c[f]=Gn(f,T,n,t)}_e(!0),t.$options.propsData=n}l&&(t.$slots=pt(s,i.context),t.$forceUpdate())}(n.componentInstance=t.componentInstance,a.propsData,a.listeners,n,a.children)},insert:function(e){var t,n=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,St(a,"mounted")),e.data.keepAlive&&(n._isMounted?((t=a)._inactive=!1,Ft.push(t)):Ot(a,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?Et(t,!0):t.$destroy())}},On=Object.keys(Cn);function En(n,r,o,l,u){if(!a(n)){var p=o.$options._base;if(d(n)&&(n=p.extend(n)),"function"==typeof n){var c;if(a(n.cid)&&(n=function(e,t){if(s(e.error)&&i(e.errorComp))return e.errorComp;if(i(e.resolved))return e.resolved;var n=Rt;if(n&&i(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n),s(e.loading)&&i(e.loadingComp))return e.loadingComp;if(n&&!i(e.owners)){var r=e.owners=[n],o=!0,l=null,u=null;n.$on("hook:destroyed",(function(){return h(r,n)}));var p=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==u&&(clearTimeout(u),u=null))},c=V((function(n){e.resolved=wt(n,t),o?r.length=0:p(!0)})),m=V((function(t){i(e.errorComp)&&(e.error=!0,p(!0))})),b=e(c,m);return d(b)&&(y(b)?a(e.resolved)&&b.then(c,m):y(b.component)&&(b.component.then(c,m),i(b.error)&&(e.errorComp=wt(b.error,t)),i(b.loading)&&(e.loadingComp=wt(b.loading,t),0===b.delay?e.loading=!0:l=setTimeout((function(){l=null,a(e.resolved)&&a(e.error)&&(e.loading=!0,p(!1))}),b.delay||200)),i(b.timeout)&&(u=setTimeout((function(){u=null,a(e.resolved)&&m(null)}),b.timeout)))),o=!1,e.loading?e.loadingComp:e.resolved}}(c=n,p),void 0===n))return function(e,t,n,a,i){var s=pe();return s.asyncFactory=e,s.asyncMeta={data:t,context:n,children:a,tag:i},s}(c,r,o,l,u);r=r||{},xn(n),i(r.model)&&function(e,n){var a=e.model&&e.model.prop||"value",s=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[a]=n.model.value;var r=n.on||(n.on={}),o=r[s],d=n.model.callback;i(o)?(t(o)?-1===o.indexOf(d):o!==d)&&(r[s]=[d].concat(o)):r[s]=d}(n.options,r);var m=function(e,t,n){var s=t.options.props;if(!a(s)){var r={},o=e.attrs,d=e.props;if(i(o)||i(d))for(var l in s){var u=_(l);$e(r,d,l,u,!0)||$e(r,o,l,u,!1)}return r}}(r,n);if(s(n.options.functional))return function(n,a,s,r,o){var d=n.options,l={},u=d.props;if(i(u))for(var p in u)l[p]=Gn(p,u,a||e);else i(s.attrs)&&In(l,s.attrs),i(s.props)&&In(l,s.props);var y=new _n(s,l,o,r,n),c=d.render.call(null,y._c,y);if(c instanceof ue)return An(c,s,y.parent,d);if(t(c)){for(var m=Ge(c)||[],b=new Array(m.length),f=0;f<m.length;f++)b[f]=An(m[f],s,y.parent,d);return b}}(n,m,r,o,l);var b=r.on;if(r.on=r.nativeOn,s(n.options.abstract)){var f=r.slot;r={},f&&(r.slot=f)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<On.length;n++){var a=On[n],i=t[a],s=Cn[a];i===s||i&&i._merged||(t[a]=i?Sn(s,i):s)}}(r);var T=Pn(n.options)||u;return new ue("vue-component-".concat(n.cid).concat(T?"-".concat(T):""),r,void 0,void 0,void 0,o,{Ctor:n,propsData:m,listeners:b,tag:u,children:l},c)}}}function Sn(e,t){var n=function(n,a){e(n,a),t(n,a)};return n._merged=!0,n}var Ln=O,Fn=z.optionMergeStrategies;function Vn(e,t,n){if(void 0===n&&(n=!0),!t)return e;for(var a,i,s,r=oe?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++)"__ob__"!==(a=r[o])&&(i=e[a],s=t[a],n&&g(e,a)?i!==s&&u(i)&&u(s)&&Vn(i,s):Oe(e,a,s));return e}function Nn(e,t,n){return n?function(){var a=o(t)?t.call(n,n):t,i=o(e)?e.call(n,n):e;return a?Vn(a,i):i}:t?e?function(){return Vn(o(t)?t.call(this,this):t,o(e)?e.call(this,this):e)}:t:e}function qn(e,n){var a=n?e?e.concat(n):t(n)?n:[n]:e;return a?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(a):a}function Dn(e,t,n,a){var i=Object.create(e||null);return t?P(i,t):i}Fn.data=function(e,t,n){return n?Nn(e,t,n):t&&"function"!=typeof t?e:Nn(e,t)},D.forEach((function(e){Fn[e]=qn})),q.forEach((function(e){Fn[e+"s"]=Dn})),Fn.watch=function(e,n,a,i){if(e===ee&&(e=void 0),n===ee&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var s={};for(var r in P(s,e),n){var o=s[r],d=n[r];o&&!t(o)&&(o=[o]),s[r]=o?o.concat(d):t(d)?d:[d]}return s},Fn.props=Fn.methods=Fn.inject=Fn.computed=function(e,t,n,a){if(!e)return t;var i=Object.create(null);return P(i,e),t&&P(i,t),i},Fn.provide=function(e,t){return e?function(){var n=Object.create(null);return Vn(n,o(e)?e.call(this):e),t&&Vn(n,o(t)?t.call(this):t,!1),n}:t};var zn=function(e,t){return void 0===t?e:t};function Bn(e,n,a){if(o(n)&&(n=n.options),function(e,n){var a=e.props;if(a){var i,s,r={};if(t(a))for(i=a.length;i--;)"string"==typeof(s=a[i])&&(r[k(s)]={type:null});else if(u(a))for(var o in a)s=a[o],r[k(o)]=u(s)?s:{type:s};e.props=r}}(n),function(e,n){var a=e.inject;if(a){var i=e.inject={};if(t(a))for(var s=0;s<a.length;s++)i[a[s]]={from:a[s]};else if(u(a))for(var r in a){var o=a[r];i[r]=u(o)?P({from:r},o):{from:o}}}}(n),function(e){var t=e.directives;if(t)for(var n in t){var a=t[n];o(a)&&(t[n]={bind:a,update:a})}}(n),!n._base&&(n.extends&&(e=Bn(e,n.extends,a)),n.mixins))for(var i=0,s=n.mixins.length;i<s;i++)e=Bn(e,n.mixins[i],a);var r,d={};for(r in e)l(r);for(r in n)g(e,r)||l(r);function l(t){var i=Fn[t]||zn;d[t]=i(e[t],n[t],a,t)}return d}function $n(e,t,n,a){if("string"==typeof n){var i=e[t];if(g(i,n))return i[n];var s=k(n);if(g(i,s))return i[s];var r=M(s);return g(i,r)?i[r]:i[n]||i[s]||i[r]}}function Gn(e,t,n,a){var i=t[e],s=!g(n,e),r=n[e],d=Hn(Boolean,i.type);if(d>-1)if(s&&!g(i,"default"))r=!1;else if(""===r||r===_(e)){var l=Hn(String,i.type);(l<0||d<l)&&(r=!0)}if(void 0===r){r=function(e,t,n){if(g(t,"default")){var a=t.default;return e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:o(a)&&"Function"!==jn(t.type)?a.call(e):a}}(a,i,e);var u=xe;_e(!0),Pe(r),_e(u)}return r}var Un=/^\s*function (\w+)/;function jn(e){var t=e&&e.toString().match(Un);return t?t[1]:""}function Wn(e,t){return jn(e)===jn(t)}function Hn(e,n){if(!t(n))return Wn(n,e)?0:-1;for(var a=0,i=n.length;a<i;a++)if(Wn(n[a],e))return a;return-1}function Qn(e){this._init(e)}function Xn(e){return e&&(Pn(e.Ctor.options)||e.tag)}function Kn(e,n){return t(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:(a=e,!("[object RegExp]"!==l.call(a))&&e.test(n));var a}function Jn(e,t){var n=e.cache,a=e.keys,i=e._vnode;for(var s in n){var r=n[s];if(r){var o=r.name;o&&!t(o)&&Yn(n,s,a,i)}}}function Yn(e,t,n,a){var i=e[t];!i||a&&i.tag===a.tag||i.componentInstance.$destroy(),e[t]=null,h(n,t)}!function(t){t.prototype._init=function(t){var n=this;n._uid=Mn++,n._isVue=!0,n.__v_skip=!0,n._scope=new Ht(!0),n._scope._vm=!0,t&&t._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),a=t._parentVnode;n.parent=t.parent,n._parentVnode=a;var i=a.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(n,t):n.$options=Bn(xn(n.constructor),t||{},n),n._renderProxy=n,n._self=n,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._provided=n?n._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&At(e,t)}(n),function(t){t._vnode=null,t._staticTrees=null;var n=t.$options,a=t.$vnode=n._parentVnode,i=a&&a.context;t.$slots=pt(n._renderChildren,i),t.$scopedSlots=a?mt(t.$parent,a.data.scopedSlots,t.$slots):e,t._c=function(e,n,a,i){return Qe(t,e,n,a,i,!1)},t.$createElement=function(e,n,a,i){return Qe(t,e,n,a,i,!0)};var s=a&&a.data;Ce(t,"$attrs",s&&s.attrs||e,null,!0),Ce(t,"$listeners",n._parentListeners||e,null,!0)}(n),St(n,"beforeCreate",void 0,!1),function(e){var t=kn(e.$options.inject,e);t&&(_e(!1),Object.keys(t).forEach((function(n){Ce(e,n,t[n])})),_e(!0))}(n),Tn(n),function(e){var t=e.$options.provide;if(t){var n=o(t)?t.call(e):t;if(!d(n))return;for(var a=function(e){var t=e._provided,n=e.$parent&&e.$parent._provided;return n===t?e._provided=Object.create(n):t}(e),i=oe?Reflect.ownKeys(n):Object.keys(n),s=0;s<i.length;s++){var r=i[s];Object.defineProperty(a,r,Object.getOwnPropertyDescriptor(n,r))}}}(n),St(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(Qn),function(e){Object.defineProperty(e.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(e.prototype,"$props",{get:function(){return this._props}}),e.prototype.$set=Oe,e.prototype.$delete=Ee,e.prototype.$watch=function(e,t,n){var a=this;if(u(t))return wn(a,e,t,n);(n=n||{}).user=!0;var i=new mn(a,e,t,n);if(n.immediate){var s='callback for immediate watcher "'.concat(i.expression,'"');ve(),Xt(t,a,[i.value],a,s),ge()}return function(){i.teardown()}}}(Qn),function(e){var n=/^hook:/;e.prototype.$on=function(e,a){var i=this;if(t(e))for(var s=0,r=e.length;s<r;s++)i.$on(e[s],a);else(i._events[e]||(i._events[e]=[])).push(a),n.test(e)&&(i._hasHookEvent=!0);return i},e.prototype.$once=function(e,t){var n=this;function a(){n.$off(e,a),t.apply(n,arguments)}return a.fn=t,n.$on(e,a),n},e.prototype.$off=function(e,n){var a=this;if(!arguments.length)return a._events=Object.create(null),a;if(t(e)){for(var i=0,s=e.length;i<s;i++)a.$off(e[i],n);return a}var r,o=a._events[e];if(!o)return a;if(!n)return a._events[e]=null,a;for(var d=o.length;d--;)if((r=o[d])===n||r.fn===n){o.splice(d,1);break}return a},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?I(n):n;for(var a=I(arguments,1),i='event handler for "'.concat(e,'"'),s=0,r=n.length;s<r;s++)Xt(n[s],t,a,t,i)}return t}}(Qn),function(e){e.prototype._update=function(e,t){var n=this,a=n.$el,i=n._vnode,s=Pt(n);n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1),s(),a&&(a.__vue__=null),n.$el&&(n.$el.__vue__=n);for(var r=n;r&&r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode;)r.$parent.$el=r.$el,r=r.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){St(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||h(t.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),St(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Qn),function(e){ut(e.prototype),e.prototype.$nextTick=function(e){return dn(e,this)},e.prototype._render=function(){var e,n=this,a=n.$options,i=a.render,s=a._parentVnode;s&&n._isMounted&&(n.$scopedSlots=mt(n.$parent,s.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&vt(n._slotsProxy,n.$scopedSlots)),n.$vnode=s;try{le(n),Rt=n,e=i.call(n._renderProxy,n.$createElement)}catch(t){Qt(t,n,"render"),e=n._vnode}finally{Rt=null,le()}return t(e)&&1===e.length&&(e=e[0]),e instanceof ue||(e=pe()),e.parent=s,e}}(Qn);var Zn=[String,RegExp,Array],ea={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Zn,exclude:Zn,max:[String,Number]},methods:{cacheVNode:function(){var e=this,t=e.cache,n=e.keys,a=e.vnodeToCache,i=e.keyToCache;if(a){var s=a.tag,r=a.componentInstance,o=a.componentOptions;t[i]={name:Xn(o),tag:s,componentInstance:r},n.push(i),this.max&&n.length>parseInt(this.max)&&Yn(t,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Yn(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){Jn(e,(function(e){return Kn(t,e)}))})),this.$watch("exclude",(function(t){Jn(e,(function(e){return!Kn(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=kt(e),n=t&&t.componentOptions;if(n){var a=Xn(n),i=this.include,s=this.exclude;if(i&&(!a||!Kn(i,a))||s&&a&&Kn(s,a))return t;var r=this.cache,o=this.keys,d=null==t.key?n.Ctor.cid+(n.tag?"::".concat(n.tag):""):t.key;r[d]?(t.componentInstance=r[d].componentInstance,h(o,d),o.push(d)):(this.vnodeToCache=t,this.keyToCache=d),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return z}};Object.defineProperty(e,"config",t),e.util={warn:Ln,extend:P,mergeOptions:Bn,defineReactive:Ce},e.set=Oe,e.delete=Ee,e.nextTick=dn,e.observable=function(e){return Pe(e),e},e.options=Object.create(null),q.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,P(e.options.components,ea),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=I(arguments,1);return n.unshift(this),o(e.install)?e.install.apply(e,n):o(e)&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Bn(this.options,e),this}}(e),function(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,a=n.cid,i=e._Ctor||(e._Ctor={});if(i[a])return i[a];var s=Pn(e)||Pn(n.options),r=function(e){this._init(e)};return(r.prototype=Object.create(n.prototype)).constructor=r,r.cid=t++,r.options=Bn(n.options,e),r.super=n,r.options.props&&function(e){var t=e.options.props;for(var n in t)fn(e.prototype,"_props",n)}(r),r.options.computed&&function(e){var t=e.options.computed;for(var n in t)vn(e.prototype,n,t[n])}(r),r.extend=n.extend,r.mixin=n.mixin,r.use=n.use,q.forEach((function(e){r[e]=n[e]})),s&&(r.options.components[s]=r),r.superOptions=n.options,r.extendOptions=e,r.sealedOptions=P({},r.options),i[a]=r,r}}(e),function(e){q.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&u(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&o(n)&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(Qn),Object.defineProperty(Qn.prototype,"$isServer",{get:ae}),Object.defineProperty(Qn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Qn,"FunctionalRenderContext",{value:_n}),Qn.version="2.7.14";var ta=b("style,class"),na=b("input,textarea,option,select,progress"),aa=function(e,t,n){return"value"===n&&na(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},ia=b("contenteditable,draggable,spellcheck"),sa=b("events,caret,typing,plaintext-only"),ra=function(e,t){return pa(t)||"false"===t?"false":"contenteditable"===e&&sa(t)?t:"true"},oa=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),da="http://www.w3.org/1999/xlink",la=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},ua=function(e){return la(e)?e.slice(6,e.length):""},pa=function(e){return null==e||!1===e};function ya(e,t){return{staticClass:ca(e.staticClass,t.staticClass),class:i(e.class)?[e.class,t.class]:t.class}}function ca(e,t){return e?t?e+" "+t:e:t||""}function ma(e){return Array.isArray(e)?function(e){for(var t,n="",a=0,s=e.length;a<s;a++)i(t=ma(e[a]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):d(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var ba={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},fa=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Ta=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),ha=function(e){return fa(e)||Ta(e)};function va(e){return Ta(e)?"svg":"math"===e?"math":void 0}var ga=Object.create(null),Ra=b("text,number,password,search,email,tel,url");function wa(e){return"string"==typeof e?document.querySelector(e)||document.createElement("div"):e}var ka=Object.freeze({__proto__:null,createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(ba[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Ma={create:function(e,t){xa(t)},update:function(e,t){e.data.ref!==t.data.ref&&(xa(e,!0),xa(t))},destroy:function(e){xa(e,!0)}};function xa(e,n){var a=e.data.ref;if(i(a)){var s=e.context,r=e.componentInstance||e.elm,d=n?null:r,l=n?void 0:r;if(o(a))Xt(a,s,[d],s,"template ref function");else{var u=e.data.refInFor,p="string"==typeof a||"number"==typeof a,y=Ve(a),c=s.$refs;if(p||y)if(u){var m=p?c[a]:a.value;n?t(m)&&h(m,r):t(m)?m.includes(r)||m.push(r):p?(c[a]=[r],_a(s,a,c[a])):a.value=[r]}else if(p){if(n&&c[a]!==r)return;c[a]=l,_a(s,a,d)}else if(y){if(n&&a.value!==r)return;a.value=d}}}}function _a(e,t,n){var a=e._setupState;a&&g(a,t)&&(Ve(a[t])?a[t].value=n:a[t]=n)}var Aa=new ue("",{},[]),Ia=["create","activate","update","remove","destroy"];function Pa(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&i(e.data)===i(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,a=i(n=e.data)&&i(n=n.attrs)&&n.type,s=i(n=t.data)&&i(n=n.attrs)&&n.type;return a===s||Ra(a)&&Ra(s)}(e,t)||s(e.isAsyncPlaceholder)&&a(t.asyncFactory.error))}function Ca(e,t,n){var a,s,r={};for(a=t;a<=n;++a)i(s=e[a].key)&&(r[s]=a);return r}var Oa={create:Ea,update:Ea,destroy:function(e){Ea(e,Aa)}};function Ea(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,a,i,s=e===Aa,r=t===Aa,o=La(e.data.directives,e.context),d=La(t.data.directives,t.context),l=[],u=[];for(n in d)a=o[n],i=d[n],a?(i.oldValue=a.value,i.oldArg=a.arg,Va(i,"update",t,e),i.def&&i.def.componentUpdated&&u.push(i)):(Va(i,"bind",t,e),i.def&&i.def.inserted&&l.push(i));if(l.length){var p=function(){for(var n=0;n<l.length;n++)Va(l[n],"inserted",t,e)};s?Be(t,"insert",p):p()}if(u.length&&Be(t,"postpatch",(function(){for(var n=0;n<u.length;n++)Va(u[n],"componentUpdated",t,e)})),!s)for(n in o)d[n]||Va(o[n],"unbind",e,e,r)}(e,t)}var Sa=Object.create(null);function La(e,t){var n,a,i=Object.create(null);if(!e)return i;for(n=0;n<e.length;n++){if((a=e[n]).modifiers||(a.modifiers=Sa),i[Fa(a)]=a,t._setupState&&t._setupState.__sfc){var s=a.def||$n(t,"_setupState","v-"+a.name);a.def="function"==typeof s?{bind:s,update:s}:s}a.def=a.def||$n(t.$options,"directives",a.name)}return i}function Fa(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function Va(e,t,n,a,i){var s=e.def&&e.def[t];if(s)try{s(n.elm,e,n,a,i)}catch(a){Qt(a,n.context,"directive ".concat(e.name," ").concat(t," hook"))}}var Na=[Ma,Oa];function qa(e,t){var n=t.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||a(e.data.attrs)&&a(t.data.attrs))){var r,o,d=t.elm,l=e.data.attrs||{},u=t.data.attrs||{};for(r in(i(u.__ob__)||s(u._v_attr_proxy))&&(u=t.data.attrs=P({},u)),u)o=u[r],l[r]!==o&&Da(d,r,o,t.data.pre);for(r in(Q||K)&&u.value!==l.value&&Da(d,"value",u.value),l)a(u[r])&&(la(r)?d.removeAttributeNS(da,ua(r)):ia(r)||d.removeAttribute(r))}}function Da(e,t,n,a){a||e.tagName.indexOf("-")>-1?za(e,t,n):oa(t)?pa(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):ia(t)?e.setAttribute(t,ra(t,n)):la(t)?pa(n)?e.removeAttributeNS(da,ua(t)):e.setAttributeNS(da,t,n):za(e,t,n)}function za(e,t,n){if(pa(n))e.removeAttribute(t);else{if(Q&&!X&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var a=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(t,n)}}var Ba={create:qa,update:qa};function $a(e,t){var n=t.elm,s=t.data,r=e.data;if(!(a(s.staticClass)&&a(s.class)&&(a(r)||a(r.staticClass)&&a(r.class)))){var o=function(e){for(var t=e.data,n=e,a=e;i(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(t=ya(a.data,t));for(;i(n=n.parent);)n&&n.data&&(t=ya(t,n.data));return s=t.staticClass,r=t.class,i(s)||i(r)?ca(s,ma(r)):"";var s,r}(t),d=n._transitionClasses;i(d)&&(o=ca(o,ma(d))),o!==n._prevClass&&(n.setAttribute("class",o),n._prevClass=o)}}var Ga,Ua,ja,Wa,Ha,Qa,Xa={create:$a,update:$a},Ka=/[\w).+\-_$\]]/;function Ja(e){var t,n,a,i,s,r=!1,o=!1,d=!1,l=!1,u=0,p=0,y=0,c=0;for(a=0;a<e.length;a++)if(n=t,t=e.charCodeAt(a),r)39===t&&92!==n&&(r=!1);else if(o)34===t&&92!==n&&(o=!1);else if(d)96===t&&92!==n&&(d=!1);else if(l)47===t&&92!==n&&(l=!1);else if(124!==t||124===e.charCodeAt(a+1)||124===e.charCodeAt(a-1)||u||p||y){switch(t){case 34:o=!0;break;case 39:r=!0;break;case 96:d=!0;break;case 40:y++;break;case 41:y--;break;case 91:p++;break;case 93:p--;break;case 123:u++;break;case 125:u--}if(47===t){for(var m=a-1,b=void 0;m>=0&&" "===(b=e.charAt(m));m--);b&&Ka.test(b)||(l=!0)}}else void 0===i?(c=a+1,i=e.slice(0,a).trim()):f();function f(){(s||(s=[])).push(e.slice(c,a).trim()),c=a+1}if(void 0===i?i=e.slice(0,a).trim():0!==c&&f(),s)for(a=0;a<s.length;a++)i=Ya(i,s[a]);return i}function Ya(e,t){var n=t.indexOf("(");if(n<0)return'_f("'.concat(t,'")(').concat(e,")");var a=t.slice(0,n),i=t.slice(n+1);return'_f("'.concat(a,'")(').concat(e).concat(")"!==i?","+i:i)}function Za(e,t){console.error("[Vue compiler]: ".concat(e))}function ei(e,t){return e?e.map((function(e){return e[t]})).filter((function(e){return e})):[]}function ti(e,t,n,a,i){(e.props||(e.props=[])).push(ui({name:t,value:n,dynamic:i},a)),e.plain=!1}function ni(e,t,n,a,i){(i?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(ui({name:t,value:n,dynamic:i},a)),e.plain=!1}function ai(e,t,n,a){e.attrsMap[t]=n,e.attrsList.push(ui({name:t,value:n},a))}function ii(e,t,n,a,i,s,r,o){(e.directives||(e.directives=[])).push(ui({name:t,rawName:n,value:a,arg:i,isDynamicArg:s,modifiers:r},o)),e.plain=!1}function si(e,t,n){return n?"_p(".concat(t,',"').concat(e,'")'):e+t}function ri(t,n,a,i,s,r,o,d){var l;(i=i||e).right?d?n="(".concat(n,")==='click'?'contextmenu':(").concat(n,")"):"click"===n&&(n="contextmenu",delete i.right):i.middle&&(d?n="(".concat(n,")==='click'?'mouseup':(").concat(n,")"):"click"===n&&(n="mouseup")),i.capture&&(delete i.capture,n=si("!",n,d)),i.once&&(delete i.once,n=si("~",n,d)),i.passive&&(delete i.passive,n=si("&",n,d)),i.native?(delete i.native,l=t.nativeEvents||(t.nativeEvents={})):l=t.events||(t.events={});var u=ui({value:a.trim(),dynamic:d},o);i!==e&&(u.modifiers=i);var p=l[n];Array.isArray(p)?s?p.unshift(u):p.push(u):l[n]=p?s?[u,p]:[p,u]:u,t.plain=!1}function oi(e,t,n){var a=di(e,":"+t)||di(e,"v-bind:"+t);if(null!=a)return Ja(a);if(!1!==n){var i=di(e,t);if(null!=i)return JSON.stringify(i)}}function di(e,t,n){var a;if(null!=(a=e.attrsMap[t]))for(var i=e.attrsList,s=0,r=i.length;s<r;s++)if(i[s].name===t){i.splice(s,1);break}return n&&delete e.attrsMap[t],a}function li(e,t){for(var n=e.attrsList,a=0,i=n.length;a<i;a++){var s=n[a];if(t.test(s.name))return n.splice(a,1),s}}function ui(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function pi(e,t,n){var a=n||{},i=a.number,s="$$v",r=s;a.trim&&(r="(typeof ".concat(s," === 'string'")+"? ".concat(s,".trim()")+": ".concat(s,")")),i&&(r="_n(".concat(r,")"));var o=yi(t,r);e.model={value:"(".concat(t,")"),expression:JSON.stringify(t),callback:"function (".concat(s,") {").concat(o,"}")}}function yi(e,t){var n=function(e){if(e=e.trim(),Ga=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<Ga-1)return(Wa=e.lastIndexOf("."))>-1?{exp:e.slice(0,Wa),key:'"'+e.slice(Wa+1)+'"'}:{exp:e,key:null};for(Ua=e,Wa=Ha=Qa=0;!mi();)bi(ja=ci())?Ti(ja):91===ja&&fi(ja);return{exp:e.slice(0,Ha),key:e.slice(Ha+1,Qa)}}(e);return null===n.key?"".concat(e,"=").concat(t):"$set(".concat(n.exp,", ").concat(n.key,", ").concat(t,")")}function ci(){return Ua.charCodeAt(++Wa)}function mi(){return Wa>=Ga}function bi(e){return 34===e||39===e}function fi(e){var t=1;for(Ha=Wa;!mi();)if(bi(e=ci()))Ti(e);else if(91===e&&t++,93===e&&t--,0===t){Qa=Wa;break}}function Ti(e){for(var t=e;!mi()&&(e=ci())!==t;);}var hi,vi="__r",gi="__c";function Ri(e,t,n){var a=hi;return function i(){null!==t.apply(null,arguments)&&Mi(e,i,n,a)}}var wi=Zt&&!(Z&&Number(Z[1])<=53);function ki(e,t,n,a){if(wi){var i=zt,s=t;t=s._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return s.apply(this,arguments)}}hi.addEventListener(e,t,te?{capture:n,passive:a}:n)}function Mi(e,t,n,a){(a||hi).removeEventListener(e,t._wrapper||t,n)}function xi(e,t){if(!a(e.data.on)||!a(t.data.on)){var n=t.data.on||{},s=e.data.on||{};hi=t.elm||e.elm,function(e){if(i(e[vi])){var t=Q?"change":"input";e[t]=[].concat(e[vi],e[t]||[]),delete e[vi]}i(e[gi])&&(e.change=[].concat(e[gi],e.change||[]),delete e[gi])}(n),ze(n,s,ki,Mi,Ri,t.context),hi=void 0}}var _i,Ai={create:xi,update:xi,destroy:function(e){return xi(e,Aa)}};function Ii(e,t){if(!a(e.data.domProps)||!a(t.data.domProps)){var n,r,o=t.elm,d=e.data.domProps||{},l=t.data.domProps||{};for(n in(i(l.__ob__)||s(l._v_attr_proxy))&&(l=t.data.domProps=P({},l)),d)n in l||(o[n]="");for(n in l){if(r=l[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===d[n])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===n&&"PROGRESS"!==o.tagName){o._value=r;var u=a(r)?"":String(r);Pi(o,u)&&(o.value=u)}else if("innerHTML"===n&&Ta(o.tagName)&&a(o.innerHTML)){(_i=_i||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var p=_i.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;p.firstChild;)o.appendChild(p.firstChild)}else if(r!==d[n])try{o[n]=r}catch(e){}}}}function Pi(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,a=e._vModifiers;if(i(a)){if(a.number)return m(n)!==m(t);if(a.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var Ci={create:Ii,update:Ii},Oi=R((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var a=e.split(n);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}));function Ei(e){var t=Si(e.style);return e.staticStyle?P(e.staticStyle,t):t}function Si(e){return Array.isArray(e)?C(e):"string"==typeof e?Oi(e):e}var Li,Fi=/^--/,Vi=/\s*!important$/,Ni=function(e,t,n){if(Fi.test(t))e.style.setProperty(t,n);else if(Vi.test(n))e.style.setProperty(_(t),n.replace(Vi,""),"important");else{var a=Di(t);if(Array.isArray(n))for(var i=0,s=n.length;i<s;i++)e.style[a]=n[i];else e.style[a]=n}},qi=["Webkit","Moz","ms"],Di=R((function(e){if(Li=Li||document.createElement("div").style,"filter"!==(e=k(e))&&e in Li)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<qi.length;n++){var a=qi[n]+t;if(a in Li)return a}}));function zi(e,t){var n=t.data,s=e.data;if(!(a(n.staticStyle)&&a(n.style)&&a(s.staticStyle)&&a(s.style))){var r,o,d=t.elm,l=s.staticStyle,u=s.normalizedStyle||s.style||{},p=l||u,y=Si(t.data.style)||{};t.data.normalizedStyle=i(y.__ob__)?P({},y):y;var c=function(e,t){for(var n,a={},i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=Ei(i.data))&&P(a,n);(n=Ei(e.data))&&P(a,n);for(var s=e;s=s.parent;)s.data&&(n=Ei(s.data))&&P(a,n);return a}(t);for(o in p)a(c[o])&&Ni(d,o,"");for(o in c)(r=c[o])!==p[o]&&Ni(d,o,null==r?"":r)}}var Bi={create:zi,update:zi},$i=/\s+/;function Gi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split($i).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" ".concat(e.getAttribute("class")||""," ");n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Ui(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split($i).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" ".concat(e.getAttribute("class")||""," "),a=" "+t+" ";n.indexOf(a)>=0;)n=n.replace(a," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function ji(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&P(t,Wi(e.name||"v")),P(t,e),t}return"string"==typeof e?Wi(e):void 0}}var Wi=R((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),Hi=W&&!X,Qi="transition",Xi="animation",Ki="transition",Ji="transitionend",Yi="animation",Zi="animationend";Hi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ki="WebkitTransition",Ji="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Yi="WebkitAnimation",Zi="webkitAnimationEnd"));var es=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function ts(e){es((function(){es(e)}))}function ns(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),Gi(e,t))}function as(e,t){e._transitionClasses&&h(e._transitionClasses,t),Ui(e,t)}function is(e,t,n){var a=rs(e,t),i=a.type,s=a.timeout,r=a.propCount;if(!i)return n();var o=i===Qi?Ji:Zi,d=0,l=function(){e.removeEventListener(o,u),n()},u=function(t){t.target===e&&++d>=r&&l()};setTimeout((function(){d<r&&l()}),s+1),e.addEventListener(o,u)}var ss=/\b(transform|all)(,|$)/;function rs(e,t){var n,a=window.getComputedStyle(e),i=(a[Ki+"Delay"]||"").split(", "),s=(a[Ki+"Duration"]||"").split(", "),r=os(i,s),o=(a[Yi+"Delay"]||"").split(", "),d=(a[Yi+"Duration"]||"").split(", "),l=os(o,d),u=0,p=0;return t===Qi?r>0&&(n=Qi,u=r,p=s.length):t===Xi?l>0&&(n=Xi,u=l,p=d.length):p=(n=(u=Math.max(r,l))>0?r>l?Qi:Xi:null)?n===Qi?s.length:d.length:0,{type:n,timeout:u,propCount:p,hasTransform:n===Qi&&ss.test(a[Ki+"Property"])}}function os(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return ds(t)+ds(e[n])})))}function ds(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function ls(e,t){var n=e.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var s=ji(e.data.transition);if(!a(s)&&!i(n._enterCb)&&1===n.nodeType){for(var r=s.css,l=s.type,u=s.enterClass,p=s.enterToClass,y=s.enterActiveClass,c=s.appearClass,b=s.appearToClass,f=s.appearActiveClass,T=s.beforeEnter,h=s.enter,v=s.afterEnter,g=s.enterCancelled,R=s.beforeAppear,w=s.appear,k=s.afterAppear,M=s.appearCancelled,x=s.duration,_=It,A=It.$vnode;A&&A.parent;)_=A.context,A=A.parent;var I=!_._isMounted||!e.isRootInsert;if(!I||w||""===w){var P=I&&c?c:u,C=I&&f?f:y,O=I&&b?b:p,E=I&&R||T,S=I&&o(w)?w:h,L=I&&k||v,F=I&&M||g,N=m(d(x)?x.enter:x),q=!1!==r&&!X,D=ys(S),z=n._enterCb=V((function(){q&&(as(n,O),as(n,C)),z.cancelled?(q&&as(n,P),F&&F(n)):L&&L(n),n._enterCb=null}));e.data.show||Be(e,"insert",(function(){var t=n.parentNode,a=t&&t._pending&&t._pending[e.key];a&&a.tag===e.tag&&a.elm._leaveCb&&a.elm._leaveCb(),S&&S(n,z)})),E&&E(n),q&&(ns(n,P),ns(n,C),ts((function(){as(n,P),z.cancelled||(ns(n,O),D||(ps(N)?setTimeout(z,N):is(n,l,z)))}))),e.data.show&&(t&&t(),S&&S(n,z)),q||D||z()}}}function us(e,t){var n=e.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var s=ji(e.data.transition);if(a(s)||1!==n.nodeType)return t();if(!i(n._leaveCb)){var r=s.css,o=s.type,l=s.leaveClass,u=s.leaveToClass,p=s.leaveActiveClass,y=s.beforeLeave,c=s.leave,b=s.afterLeave,f=s.leaveCancelled,T=s.delayLeave,h=s.duration,v=!1!==r&&!X,g=ys(c),R=m(d(h)?h.leave:h),w=n._leaveCb=V((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),v&&(as(n,u),as(n,p)),w.cancelled?(v&&as(n,l),f&&f(n)):(t(),b&&b(n)),n._leaveCb=null}));T?T(k):k()}function k(){w.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),y&&y(n),v&&(ns(n,l),ns(n,p),ts((function(){as(n,l),w.cancelled||(ns(n,u),g||(ps(R)?setTimeout(w,R):is(n,o,w)))}))),c&&c(n,w),v||g||w())}}function ps(e){return"number"==typeof e&&!isNaN(e)}function ys(e){if(a(e))return!1;var t=e.fns;return i(t)?ys(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function cs(e,t){!0!==t.data.show&&ls(t)}var ms=function(e){var n,o,d={},l=e.modules,u=e.nodeOps;for(n=0;n<Ia.length;++n)for(d[Ia[n]]=[],o=0;o<l.length;++o)i(l[o][Ia[n]])&&d[Ia[n]].push(l[o][Ia[n]]);function p(e){var t=u.parentNode(e);i(t)&&u.removeChild(t,e)}function y(e,t,n,a,r,o,l){if(i(e.elm)&&i(o)&&(e=o[l]=ce(e)),e.isRootInsert=!r,!function(e,t,n,a){var r=e.data;if(i(r)){var o=i(e.componentInstance)&&r.keepAlive;if(i(r=r.hook)&&i(r=r.init)&&r(e,!1),i(e.componentInstance))return c(e,t),m(n,e.elm,a),s(o)&&function(e,t,n,a){for(var s,r=e;r.componentInstance;)if(i(s=(r=r.componentInstance._vnode).data)&&i(s=s.transition)){for(s=0;s<d.activate.length;++s)d.activate[s](Aa,r);t.push(r);break}m(n,e.elm,a)}(e,t,n,a),!0}}(e,t,n,a)){var p=e.data,y=e.children,b=e.tag;i(b)?(e.elm=e.ns?u.createElementNS(e.ns,b):u.createElement(b,e),v(e),f(e,y,t),i(p)&&h(e,t),m(n,e.elm,a)):s(e.isComment)?(e.elm=u.createComment(e.text),m(n,e.elm,a)):(e.elm=u.createTextNode(e.text),m(n,e.elm,a))}}function c(e,t){i(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,T(e)?(h(e,t),v(e)):(xa(e),t.push(e))}function m(e,t,n){i(e)&&(i(n)?u.parentNode(n)===e&&u.insertBefore(e,t,n):u.appendChild(e,t))}function f(e,n,a){if(t(n))for(var i=0;i<n.length;++i)y(n[i],a,e.elm,null,!0,n,i);else r(e.text)&&u.appendChild(e.elm,u.createTextNode(String(e.text)))}function T(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return i(e.tag)}function h(e,t){for(var a=0;a<d.create.length;++a)d.create[a](Aa,e);i(n=e.data.hook)&&(i(n.create)&&n.create(Aa,e),i(n.insert)&&t.push(e))}function v(e){var t;if(i(t=e.fnScopeId))u.setStyleScope(e.elm,t);else for(var n=e;n;)i(t=n.context)&&i(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t),n=n.parent;i(t=It)&&t!==e.context&&t!==e.fnContext&&i(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t)}function g(e,t,n,a,i,s){for(;a<=i;++a)y(n[a],s,e,t,!1,n,a)}function R(e){var t,n,a=e.data;if(i(a))for(i(t=a.hook)&&i(t=t.destroy)&&t(e),t=0;t<d.destroy.length;++t)d.destroy[t](e);if(i(t=e.children))for(n=0;n<e.children.length;++n)R(e.children[n])}function w(e,t,n){for(;t<=n;++t){var a=e[t];i(a)&&(i(a.tag)?(k(a),R(a)):p(a.elm))}}function k(e,t){if(i(t)||i(e.data)){var n,a=d.remove.length+1;for(i(t)?t.listeners+=a:t=function(e,t){function n(){0==--n.listeners&&p(e)}return n.listeners=t,n}(e.elm,a),i(n=e.componentInstance)&&i(n=n._vnode)&&i(n.data)&&k(n,t),n=0;n<d.remove.length;++n)d.remove[n](e,t);i(n=e.data.hook)&&i(n=n.remove)?n(e,t):t()}else p(e.elm)}function M(e,t,n,a){for(var s=n;s<a;s++){var r=t[s];if(i(r)&&Pa(e,r))return s}}function x(e,t,n,r,o,l){if(e!==t){i(t.elm)&&i(r)&&(t=r[o]=ce(t));var p=t.elm=e.elm;if(s(e.isAsyncPlaceholder))i(t.asyncFactory.resolved)?I(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(s(t.isStatic)&&s(e.isStatic)&&t.key===e.key&&(s(t.isCloned)||s(t.isOnce)))t.componentInstance=e.componentInstance;else{var c,m=t.data;i(m)&&i(c=m.hook)&&i(c=c.prepatch)&&c(e,t);var b=e.children,f=t.children;if(i(m)&&T(t)){for(c=0;c<d.update.length;++c)d.update[c](e,t);i(c=m.hook)&&i(c=c.update)&&c(e,t)}a(t.text)?i(b)&&i(f)?b!==f&&function(e,t,n,s,r){for(var o,d,l,p=0,c=0,m=t.length-1,b=t[0],f=t[m],T=n.length-1,h=n[0],v=n[T],R=!r;p<=m&&c<=T;)a(b)?b=t[++p]:a(f)?f=t[--m]:Pa(b,h)?(x(b,h,s,n,c),b=t[++p],h=n[++c]):Pa(f,v)?(x(f,v,s,n,T),f=t[--m],v=n[--T]):Pa(b,v)?(x(b,v,s,n,T),R&&u.insertBefore(e,b.elm,u.nextSibling(f.elm)),b=t[++p],v=n[--T]):Pa(f,h)?(x(f,h,s,n,c),R&&u.insertBefore(e,f.elm,b.elm),f=t[--m],h=n[++c]):(a(o)&&(o=Ca(t,p,m)),a(d=i(h.key)?o[h.key]:M(h,t,p,m))?y(h,s,e,b.elm,!1,n,c):Pa(l=t[d],h)?(x(l,h,s,n,c),t[d]=void 0,R&&u.insertBefore(e,l.elm,b.elm)):y(h,s,e,b.elm,!1,n,c),h=n[++c]);p>m?g(e,a(n[T+1])?null:n[T+1].elm,n,c,T,s):c>T&&w(t,p,m)}(p,b,f,n,l):i(f)?(i(e.text)&&u.setTextContent(p,""),g(p,null,f,0,f.length-1,n)):i(b)?w(b,0,b.length-1):i(e.text)&&u.setTextContent(p,""):e.text!==t.text&&u.setTextContent(p,t.text),i(m)&&i(c=m.hook)&&i(c=c.postpatch)&&c(e,t)}}}function _(e,t,n){if(s(n)&&i(e.parent))e.parent.data.pendingInsert=t;else for(var a=0;a<t.length;++a)t[a].data.hook.insert(t[a])}var A=b("attrs,class,staticClass,staticStyle,key");function I(e,t,n,a){var r,o=t.tag,d=t.data,l=t.children;if(a=a||d&&d.pre,t.elm=e,s(t.isComment)&&i(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(i(d)&&(i(r=d.hook)&&i(r=r.init)&&r(t,!0),i(r=t.componentInstance)))return c(t,n),!0;if(i(o)){if(i(l))if(e.hasChildNodes())if(i(r=d)&&i(r=r.domProps)&&i(r=r.innerHTML)){if(r!==e.innerHTML)return!1}else{for(var u=!0,p=e.firstChild,y=0;y<l.length;y++){if(!p||!I(p,l[y],n,a)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else f(t,l,n);if(i(d)){var m=!1;for(var b in d)if(!A(b)){m=!0,h(t,n);break}!m&&d.class&&pn(d.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,r){if(!a(t)){var o,l=!1,p=[];if(a(e))l=!0,y(t,p);else{var c=i(e.nodeType);if(!c&&Pa(e,t))x(e,t,p,null,null,r);else{if(c){if(1===e.nodeType&&e.hasAttribute(N)&&(e.removeAttribute(N),n=!0),s(n)&&I(e,t,p))return _(t,p,!0),e;o=e,e=new ue(u.tagName(o).toLowerCase(),{},[],void 0,o)}var m=e.elm,b=u.parentNode(m);if(y(t,p,m._leaveCb?null:b,u.nextSibling(m)),i(t.parent))for(var f=t.parent,h=T(t);f;){for(var v=0;v<d.destroy.length;++v)d.destroy[v](f);if(f.elm=t.elm,h){for(var g=0;g<d.create.length;++g)d.create[g](Aa,f);var k=f.data.hook.insert;if(k.merged)for(var M=1;M<k.fns.length;M++)k.fns[M]()}else xa(f);f=f.parent}i(b)?w([e],0,0):i(e.tag)&&R(e)}}return _(t,p,l),t.elm}i(e)&&R(e)}}({nodeOps:ka,modules:[Ba,Xa,Ai,Ci,Bi,W?{create:cs,activate:cs,remove:function(e,t){!0!==e.data.show?us(e,t):t()}}:{}].concat(Na)});X&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&ws(e,"input")}));var bs={inserted:function(e,t,n,a){"select"===n.tag?(a.elm&&!a.elm._vOptions?Be(n,"postpatch",(function(){bs.componentUpdated(e,t,n)})):fs(e,t,n.context),e._vOptions=[].map.call(e.options,vs)):("textarea"===n.tag||Ra(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",gs),e.addEventListener("compositionend",Rs),e.addEventListener("change",Rs),X&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){fs(e,t,n.context);var a=e._vOptions,i=e._vOptions=[].map.call(e.options,vs);i.some((function(e,t){return!L(e,a[t])}))&&(e.multiple?t.value.some((function(e){return hs(e,i)})):t.value!==t.oldValue&&hs(t.value,i))&&ws(e,"change")}}};function fs(e,t,n){Ts(e,t),(Q||K)&&setTimeout((function(){Ts(e,t)}),0)}function Ts(e,t,n){var a=t.value,i=e.multiple;if(!i||Array.isArray(a)){for(var s,r,o=0,d=e.options.length;o<d;o++)if(r=e.options[o],i)s=F(a,vs(r))>-1,r.selected!==s&&(r.selected=s);else if(L(vs(r),a))return void(e.selectedIndex!==o&&(e.selectedIndex=o));i||(e.selectedIndex=-1)}}function hs(e,t){return t.every((function(t){return!L(t,e)}))}function vs(e){return"_value"in e?e._value:e.value}function gs(e){e.target.composing=!0}function Rs(e){e.target.composing&&(e.target.composing=!1,ws(e.target,"input"))}function ws(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function ks(e){return!e.componentInstance||e.data&&e.data.transition?e:ks(e.componentInstance._vnode)}var Ms={model:bs,show:{bind:function(e,t,n){var a=t.value,i=(n=ks(n)).data&&n.data.transition,s=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&i?(n.data.show=!0,ls(n,(function(){e.style.display=s}))):e.style.display=a?s:"none"},update:function(e,t,n){var a=t.value;!a!=!t.oldValue&&((n=ks(n)).data&&n.data.transition?(n.data.show=!0,a?ls(n,(function(){e.style.display=e.__vOriginalDisplay})):us(n,(function(){e.style.display="none"}))):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,a,i){i||(e.style.display=e.__vOriginalDisplay)}}},xs={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function _s(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?_s(kt(t.children)):e}function As(e){var t={},n=e.$options;for(var a in n.propsData)t[a]=e[a];var i=n._parentListeners;for(var a in i)t[k(a)]=i[a];return t}function Is(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var Ps=function(e){return e.tag||ct(e)},Cs=function(e){return"show"===e.name},Os={name:"transition",props:xs,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(Ps)).length){var a=this.mode,i=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var s=_s(i);if(!s)return i;if(this._leaving)return Is(e,i);var o="__transition-".concat(this._uid,"-");s.key=null==s.key?s.isComment?o+"comment":o+s.tag:r(s.key)?0===String(s.key).indexOf(o)?s.key:o+s.key:s.key;var d=(s.data||(s.data={})).transition=As(this),l=this._vnode,u=_s(l);if(s.data.directives&&s.data.directives.some(Cs)&&(s.data.show=!0),u&&u.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(s,u)&&!ct(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=P({},d);if("out-in"===a)return this._leaving=!0,Be(p,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),Is(e,i);if("in-out"===a){if(ct(s))return l;var y,c=function(){y()};Be(d,"afterEnter",c),Be(d,"enterCancelled",c),Be(p,"delayLeave",(function(e){y=e}))}}return i}}},Es=P({tag:String,moveClass:String},xs);delete Es.mode;var Ss={props:Es,beforeMount:function(){var e=this,t=this._update;this._update=function(n,a){var i=Pt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,n,a)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),a=this.prevChildren=this.children,i=this.$slots.default||[],s=this.children=[],r=As(this),o=0;o<i.length;o++)(u=i[o]).tag&&null!=u.key&&0!==String(u.key).indexOf("__vlist")&&(s.push(u),n[u.key]=u,(u.data||(u.data={})).transition=r);if(a){var d=[],l=[];for(o=0;o<a.length;o++){var u;(u=a[o]).data.transition=r,u.data.pos=u.elm.getBoundingClientRect(),n[u.key]?d.push(u):l.push(u)}this.kept=e(t,null,d),this.removed=l}return e(t,null,s)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Ls),e.forEach(Fs),e.forEach(Vs),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,a=n.style;ns(n,t),a.transform=a.WebkitTransform=a.transitionDuration="",n.addEventListener(Ji,n._moveCb=function e(a){a&&a.target!==n||a&&!/transform$/.test(a.propertyName)||(n.removeEventListener(Ji,e),n._moveCb=null,as(n,t))})}})))},methods:{hasMove:function(e,t){if(!Hi)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){Ui(n,e)})),Gi(n,t),n.style.display="none",this.$el.appendChild(n);var a=rs(n);return this.$el.removeChild(n),this._hasMove=a.hasTransform}}};function Ls(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Fs(e){e.data.newPos=e.elm.getBoundingClientRect()}function Vs(e){var t=e.data.pos,n=e.data.newPos,a=t.left-n.left,i=t.top-n.top;if(a||i){e.data.moved=!0;var s=e.elm.style;s.transform=s.WebkitTransform="translate(".concat(a,"px,").concat(i,"px)"),s.transitionDuration="0s"}}var Ns={Transition:Os,TransitionGroup:Ss};Qn.config.mustUseProp=aa,Qn.config.isReservedTag=ha,Qn.config.isReservedAttr=ta,Qn.config.getTagNamespace=va,Qn.config.isUnknownElement=function(e){if(!W)return!0;if(ha(e))return!1;if(e=e.toLowerCase(),null!=ga[e])return ga[e];var t=document.createElement(e);return e.indexOf("-")>-1?ga[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:ga[e]=/HTMLUnknownElement/.test(t.toString())},P(Qn.options.directives,Ms),P(Qn.options.components,Ns),Qn.prototype.__patch__=W?ms:O,Qn.prototype.$mount=function(e,t){return function(e,t,n){var a;e.$el=t,e.$options.render||(e.$options.render=pe),St(e,"beforeMount"),a=function(){e._update(e._render(),n)},new mn(e,a,O,{before:function(){e._isMounted&&!e._isDestroyed&&St(e,"beforeUpdate")}},!0),n=!1;var i=e._preWatchers;if(i)for(var s=0;s<i.length;s++)i[s].run();return null==e.$vnode&&(e._isMounted=!0,St(e,"mounted")),e}(this,e=e&&W?wa(e):void 0,t)},W&&setTimeout((function(){z.devtools&&ie&&ie.emit("init",Qn)}),0);var qs,Ds=/\{\{((?:.|\r?\n)+?)\}\}/g,zs=/[-.*+?^${}()|[\]\/\\]/g,Bs=R((function(e){var t=e[0].replace(zs,"\\$&"),n=e[1].replace(zs,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")})),$s={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=di(e,"class");n&&(e.staticClass=JSON.stringify(n.replace(/\s+/g," ").trim()));var a=oi(e,"class",!1);a&&(e.classBinding=a)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:".concat(e.staticClass,",")),e.classBinding&&(t+="class:".concat(e.classBinding,",")),t}},Gs={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=di(e,"style");n&&(e.staticStyle=JSON.stringify(Oi(n)));var a=oi(e,"style",!1);a&&(e.styleBinding=a)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:".concat(e.staticStyle,",")),e.styleBinding&&(t+="style:(".concat(e.styleBinding,"),")),t}},Us=b("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),js=b("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),Ws=b("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Hs=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Qs=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Xs="[a-zA-Z_][\\-\\.0-9_a-zA-Z".concat(B.source,"]*"),Ks="((?:".concat(Xs,"\\:)?").concat(Xs,")"),Js=new RegExp("^<".concat(Ks)),Ys=/^\s*(\/?)>/,Zs=new RegExp("^<\\/".concat(Ks,"[^>]*>")),er=/^<!DOCTYPE [^>]+>/i,tr=/^<!\--/,nr=/^<!\[/,ar=b("script,style,textarea",!0),ir={},sr={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},rr=/&(?:lt|gt|quot|amp|#39);/g,or=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,dr=b("pre,textarea",!0),lr=function(e,t){return e&&dr(e)&&"\n"===t[0]};function ur(e,t){var n=t?or:rr;return e.replace(n,(function(e){return sr[e]}))}var pr,yr,cr,mr,br,fr,Tr,hr,vr=/^@|^v-on:/,gr=/^v-|^@|^:|^#/,Rr=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,wr=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,kr=/^\(|\)$/g,Mr=/^\[.*\]$/,xr=/:(.*)$/,_r=/^:|^\.|^v-bind:/,Ar=/\.[^.\]]+(?=[^\]]*$)/g,Ir=/^v-slot(:|$)|^#/,Pr=/[\r\n]/,Cr=/[ \f\t\r\n]+/g,Or=R((function(e){return(qs=qs||document.createElement("div")).innerHTML=e,qs.textContent})),Er="_empty_";function Sr(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:zr(t),rawAttrsMap:{},parent:n,children:[]}}function Lr(e,t){pr=t.warn||Za,fr=t.isPreTag||E,Tr=t.mustUseProp||E,hr=t.getTagNamespace||E;t.isReservedTag;cr=ei(t.modules,"transformNode"),mr=ei(t.modules,"preTransformNode"),br=ei(t.modules,"postTransformNode"),yr=t.delimiters;var n,a,i=[],s=!1!==t.preserveWhitespace,r=t.whitespace,o=!1,d=!1;function l(e){if(u(e),o||e.processed||(e=Fr(e,t)),i.length||e===n||n.if&&(e.elseif||e.else)&&Nr(n,{exp:e.elseif,block:e}),a&&!e.forbidden)if(e.elseif||e.else)r=e,l=function(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];e.pop()}}(a.children),l&&l.if&&Nr(l,{exp:r.elseif,block:r});else{if(e.slotScope){var s=e.slotTarget||'"default"';(a.scopedSlots||(a.scopedSlots={}))[s]=e}a.children.push(e),e.parent=a}var r,l;e.children=e.children.filter((function(e){return!e.slotScope})),u(e),e.pre&&(o=!1),fr(e.tag)&&(d=!1);for(var p=0;p<br.length;p++)br[p](e,t)}function u(e){if(!d)for(var t=void 0;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var n,a,i=[],s=t.expectHTML,r=t.isUnaryTag||E,o=t.canBeLeftOpenTag||E,d=0,l=function(){if(n=e,a&&ar(a)){var l=0,y=a.toLowerCase(),c=ir[y]||(ir[y]=new RegExp("([\\s\\S]*?)(</"+y+"[^>]*>)","i"));w=e.replace(c,(function(e,n,a){return l=a.length,ar(y)||"noscript"===y||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),lr(y,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""})),d+=e.length-w.length,e=w,p(y,d-l,d)}else{var m=e.indexOf("<");if(0===m){if(tr.test(e)){var b=e.indexOf("--\x3e");if(b>=0)return t.shouldKeepComment&&t.comment&&t.comment(e.substring(4,b),d,d+b+3),u(b+3),"continue"}if(nr.test(e)){var f=e.indexOf("]>");if(f>=0)return u(f+2),"continue"}var T=e.match(er);if(T)return u(T[0].length),"continue";var h=e.match(Zs);if(h){var v=d;return u(h[0].length),p(h[1],v,d),"continue"}var g=function(){var t=e.match(Js);if(t){var n={tagName:t[1],attrs:[],start:d};u(t[0].length);for(var a=void 0,i=void 0;!(a=e.match(Ys))&&(i=e.match(Qs)||e.match(Hs));)i.start=d,u(i[0].length),i.end=d,n.attrs.push(i);if(a)return n.unarySlash=a[1],u(a[0].length),n.end=d,n}}();if(g)return function(e){var n=e.tagName,d=e.unarySlash;s&&("p"===a&&Ws(n)&&p(a),o(n)&&a===n&&p(n));for(var l=r(n)||!!d,u=e.attrs.length,y=new Array(u),c=0;c<u;c++){var m=e.attrs[c],b=m[3]||m[4]||m[5]||"",f="a"===n&&"href"===m[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;y[c]={name:m[1],value:ur(b,f)}}l||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:y,start:e.start,end:e.end}),a=n),t.start&&t.start(n,y,l,e.start,e.end)}(g),lr(g.tagName,e)&&u(1),"continue"}var R=void 0,w=void 0,k=void 0;if(m>=0){for(w=e.slice(m);!(Zs.test(w)||Js.test(w)||tr.test(w)||nr.test(w)||(k=w.indexOf("<",1))<0);)m+=k,w=e.slice(m);R=e.substring(0,m)}m<0&&(R=e),R&&u(R.length),t.chars&&R&&t.chars(R,d-R.length,d)}if(e===n)return t.chars&&t.chars(e),"break"};e&&"break"!==l(););function u(t){d+=t,e=e.substring(t)}function p(e,n,s){var r,o;if(null==n&&(n=d),null==s&&(s=d),e)for(o=e.toLowerCase(),r=i.length-1;r>=0&&i[r].lowerCasedTag!==o;r--);else r=0;if(r>=0){for(var l=i.length-1;l>=r;l--)t.end&&t.end(i[l].tag,n,s);i.length=r,a=r&&i[r-1].tag}else"br"===o?t.start&&t.start(e,[],!0,n,s):"p"===o&&(t.start&&t.start(e,[],!1,n,s),t.end&&t.end(e,n,s))}p()}(e,{warn:pr,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,s,r,u,p){var y=a&&a.ns||hr(e);Q&&"svg"===y&&(s=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n];Br.test(a.name)||(a.name=a.name.replace($r,""),t.push(a))}return t}(s));var c,m=Sr(e,s,a);y&&(m.ns=y),"style"!==(c=m).tag&&("script"!==c.tag||c.attrsMap.type&&"text/javascript"!==c.attrsMap.type)||ae()||(m.forbidden=!0);for(var b=0;b<mr.length;b++)m=mr[b](m,t)||m;o||(function(e){null!=di(e,"v-pre")&&(e.pre=!0)}(m),m.pre&&(o=!0)),fr(m.tag)&&(d=!0),o?function(e){var t=e.attrsList,n=t.length;if(n)for(var a=e.attrs=new Array(n),i=0;i<n;i++)a[i]={name:t[i].name,value:JSON.stringify(t[i].value)},null!=t[i].start&&(a[i].start=t[i].start,a[i].end=t[i].end);else e.pre||(e.plain=!0)}(m):m.processed||(Vr(m),function(e){var t=di(e,"v-if");if(t)e.if=t,Nr(e,{exp:t,block:e});else{null!=di(e,"v-else")&&(e.else=!0);var n=di(e,"v-else-if");n&&(e.elseif=n)}}(m),function(e){null!=di(e,"v-once")&&(e.once=!0)}(m)),n||(n=m),r?l(m):(a=m,i.push(m))},end:function(e,t,n){var s=i[i.length-1];i.length-=1,a=i[i.length-1],l(s)},chars:function(e,t,n){if(a&&(!Q||"textarea"!==a.tag||a.attrsMap.placeholder!==e)){var i,l=a.children;if(e=d||e.trim()?"script"===(i=a).tag||"style"===i.tag?e:Or(e):l.length?r?"condense"===r&&Pr.test(e)?"":" ":s?" ":"":""){d||"condense"!==r||(e=e.replace(Cr," "));var u=void 0,p=void 0;!o&&" "!==e&&(u=function(e,t){var n=t?Bs(t):Ds;if(n.test(e)){for(var a,i,s,r=[],o=[],d=n.lastIndex=0;a=n.exec(e);){(i=a.index)>d&&(o.push(s=e.slice(d,i)),r.push(JSON.stringify(s)));var l=Ja(a[1].trim());r.push("_s(".concat(l,")")),o.push({"@binding":l}),d=i+a[0].length}return d<e.length&&(o.push(s=e.slice(d)),r.push(JSON.stringify(s))),{expression:r.join("+"),tokens:o}}}(e,yr))?p={type:2,expression:u.expression,tokens:u.tokens,text:e}:" "===e&&l.length&&" "===l[l.length-1].text||(p={type:3,text:e}),p&&l.push(p)}}},comment:function(e,t,n){if(a){var i={type:3,text:e,isComment:!0};a.children.push(i)}}}),n}function Fr(e,t){var n;!function(e){var t=oi(e,"key");t&&(e.key=t)}(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=oi(e,"ref");t&&(e.ref=t,e.refInFor=function(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=di(e,"scope"),e.slotScope=t||di(e,"slot-scope")):(t=di(e,"slot-scope"))&&(e.slotScope=t);var n,a=oi(e,"slot");if(a&&(e.slotTarget='""'===a?'"default"':a,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||ni(e,"slot",a,function(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}(e,"slot"))),"template"===e.tag){if(n=li(e,Ir)){var i=qr(n),s=i.name,r=i.dynamic;e.slotTarget=s,e.slotTargetDynamic=r,e.slotScope=n.value||Er}}else if(n=li(e,Ir)){var o=e.scopedSlots||(e.scopedSlots={}),d=qr(n),l=d.name,u=(r=d.dynamic,o[l]=Sr("template",[],e));u.slotTarget=l,u.slotTargetDynamic=r,u.children=e.children.filter((function(e){if(!e.slotScope)return e.parent=u,!0})),u.slotScope=n.value||Er,e.children=[],e.plain=!1}}(e),"slot"===(n=e).tag&&(n.slotName=oi(n,"name")),function(e){var t;(t=oi(e,"is"))&&(e.component=t),null!=di(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var a=0;a<cr.length;a++)e=cr[a](e,t)||e;return function(e){var t,n,a,i,s,r,o,d,l=e.attrsList;for(t=0,n=l.length;t<n;t++)if(a=i=l[t].name,s=l[t].value,gr.test(a))if(e.hasBindings=!0,(r=Dr(a.replace(gr,"")))&&(a=a.replace(Ar,"")),_r.test(a))a=a.replace(_r,""),s=Ja(s),(d=Mr.test(a))&&(a=a.slice(1,-1)),r&&(r.prop&&!d&&"innerHtml"===(a=k(a))&&(a="innerHTML"),r.camel&&!d&&(a=k(a)),r.sync&&(o=yi(s,"$event"),d?ri(e,'"update:"+('.concat(a,")"),o,null,!1,0,l[t],!0):(ri(e,"update:".concat(k(a)),o,null,!1,0,l[t]),_(a)!==k(a)&&ri(e,"update:".concat(_(a)),o,null,!1,0,l[t])))),r&&r.prop||!e.component&&Tr(e.tag,e.attrsMap.type,a)?ti(e,a,s,l[t],d):ni(e,a,s,l[t],d);else if(vr.test(a))a=a.replace(vr,""),(d=Mr.test(a))&&(a=a.slice(1,-1)),ri(e,a,s,r,!1,0,l[t],d);else{var u=(a=a.replace(gr,"")).match(xr),p=u&&u[1];d=!1,p&&(a=a.slice(0,-(p.length+1)),Mr.test(p)&&(p=p.slice(1,-1),d=!0)),ii(e,a,i,s,p,d,r,l[t])}else ni(e,a,JSON.stringify(s),l[t]),!e.component&&"muted"===a&&Tr(e.tag,e.attrsMap.type,a)&&ti(e,a,"true",l[t])}(e),e}function Vr(e){var t;if(t=di(e,"v-for")){var n=function(e){var t=e.match(Rr);if(t){var n={};n.for=t[2].trim();var a=t[1].trim().replace(kr,""),i=a.match(wr);return i?(n.alias=a.replace(wr,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=a,n}}(t);n&&P(e,n)}}function Nr(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function qr(e){var t=e.name.replace(Ir,"");return t||"#"!==e.name[0]&&(t="default"),Mr.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'.concat(t,'"'),dynamic:!1}}function Dr(e){var t=e.match(Ar);if(t){var n={};return t.forEach((function(e){n[e.slice(1)]=!0})),n}}function zr(e){for(var t={},n=0,a=e.length;n<a;n++)t[e[n].name]=e[n].value;return t}var Br=/^xmlns:NS\d+/,$r=/^NS\d+:/;function Gr(e){return Sr(e.tag,e.attrsList.slice(),e.parent)}var Ur,jr,Wr=[$s,Gs,{preTransformNode:function(e,t){if("input"===e.tag){var n=e.attrsMap;if(!n["v-model"])return;var a=void 0;if((n[":type"]||n["v-bind:type"])&&(a=oi(e,"type")),n.type||a||!n["v-bind"]||(a="(".concat(n["v-bind"],").type")),a){var i=di(e,"v-if",!0),s=i?"&&(".concat(i,")"):"",r=null!=di(e,"v-else",!0),o=di(e,"v-else-if",!0),d=Gr(e);Vr(d),ai(d,"type","checkbox"),Fr(d,t),d.processed=!0,d.if="(".concat(a,")==='checkbox'")+s,Nr(d,{exp:d.if,block:d});var l=Gr(e);di(l,"v-for",!0),ai(l,"type","radio"),Fr(l,t),Nr(d,{exp:"(".concat(a,")==='radio'")+s,block:l});var u=Gr(e);return di(u,"v-for",!0),ai(u,":type",a),Fr(u,t),Nr(d,{exp:i,block:u}),r?d.else=!0:o&&(d.elseif=o),d}}}}],Hr={expectHTML:!0,modules:Wr,directives:{model:function(e,t,n){var a=t.value,i=t.modifiers,s=e.tag,r=e.attrsMap.type;if(e.component)return pi(e,a,i),!1;if("select"===s)!function(e,t,n){var a=n&&n.number,i='Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;'+"return ".concat(a?"_n(val)":"val","})"),s="var $$selectedVal = ".concat(i,";");ri(e,"change",s="".concat(s," ").concat(yi(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]")),null,!0)}(e,a,i);else if("input"===s&&"checkbox"===r)!function(e,t,n){var a=n&&n.number,i=oi(e,"value")||"null",s=oi(e,"true-value")||"true",r=oi(e,"false-value")||"false";ti(e,"checked","Array.isArray(".concat(t,")")+"?_i(".concat(t,",").concat(i,")>-1")+("true"===s?":(".concat(t,")"):":_q(".concat(t,",").concat(s,")"))),ri(e,"change","var $$a=".concat(t,",")+"$$el=$event.target,"+"$$c=$$el.checked?(".concat(s,"):(").concat(r,");")+"if(Array.isArray($$a)){"+"var $$v=".concat(a?"_n("+i+")":i,",")+"$$i=_i($$a,$$v);"+"if($$el.checked){$$i<0&&(".concat(yi(t,"$$a.concat([$$v])"),")}")+"else{$$i>-1&&(".concat(yi(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))"),")}")+"}else{".concat(yi(t,"$$c"),"}"),null,!0)}(e,a,i);else if("input"===s&&"radio"===r)!function(e,t,n){var a=n&&n.number,i=oi(e,"value")||"null";i=a?"_n(".concat(i,")"):i,ti(e,"checked","_q(".concat(t,",").concat(i,")")),ri(e,"change",yi(t,i),null,!0)}(e,a,i);else if("input"===s||"textarea"===s)!function(e,t,n){var a=e.attrsMap.type,i=n||{},s=i.lazy,r=i.number,o=i.trim,d=!s&&"range"!==a,l=s?"change":"range"===a?vi:"input",u="$event.target.value";o&&(u="$event.target.value.trim()"),r&&(u="_n(".concat(u,")"));var p=yi(t,u);d&&(p="if($event.target.composing)return;".concat(p)),ti(e,"value","(".concat(t,")")),ri(e,l,p,null,!0),(o||r)&&ri(e,"blur","$forceUpdate()")}(e,a,i);else if(!z.isReservedTag(s))return pi(e,a,i),!1;return!0},text:function(e,t){t.value&&ti(e,"textContent","_s(".concat(t.value,")"),t)},html:function(e,t){t.value&&ti(e,"innerHTML","_s(".concat(t.value,")"),t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:Us,mustUseProp:aa,canBeLeftOpenTag:js,isReservedTag:ha,getTagNamespace:va,staticKeys:function(e){return e.reduce((function(e,t){return e.concat(t.staticKeys||[])}),[]).join(",")}(Wr)},Qr=R((function(e){return b("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}));function Xr(e,t){e&&(Ur=Qr(t.staticKeys||""),jr=t.isReservedTag||E,Kr(e),Jr(e,!1))}function Kr(e){if(e.static=function(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||f(e.tag)||!jr(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(Ur))))}(e),1===e.type){if(!jr(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var a=e.children[t];Kr(a),a.static||(e.static=!1)}if(e.ifConditions)for(t=1,n=e.ifConditions.length;t<n;t++){var i=e.ifConditions[t].block;Kr(i),i.static||(e.static=!1)}}}function Jr(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,a=e.children.length;n<a;n++)Jr(e.children[n],t||!!e.for);if(e.ifConditions)for(n=1,a=e.ifConditions.length;n<a;n++)Jr(e.ifConditions[n].block,t)}}var Yr=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/,Zr=/\([^)]*?\);*$/,eo=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,to={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},no={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},ao=function(e){return"if(".concat(e,")return null;")},io={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:ao("$event.target !== $event.currentTarget"),ctrl:ao("!$event.ctrlKey"),shift:ao("!$event.shiftKey"),alt:ao("!$event.altKey"),meta:ao("!$event.metaKey"),left:ao("'button' in $event && $event.button !== 0"),middle:ao("'button' in $event && $event.button !== 1"),right:ao("'button' in $event && $event.button !== 2")};function so(e,t){var n=t?"nativeOn:":"on:",a="",i="";for(var s in e){var r=ro(e[s]);e[s]&&e[s].dynamic?i+="".concat(s,",").concat(r,","):a+='"'.concat(s,'":').concat(r,",")}return a="{".concat(a.slice(0,-1),"}"),i?n+"_d(".concat(a,",[").concat(i.slice(0,-1),"])"):n+a}function ro(e){if(!e)return"function(){}";if(Array.isArray(e))return"[".concat(e.map((function(e){return ro(e)})).join(","),"]");var t=eo.test(e.value),n=Yr.test(e.value),a=eo.test(e.value.replace(Zr,""));if(e.modifiers){var i="",s="",r=[],o=function(t){if(io[t])s+=io[t],to[t]&&r.push(t);else if("exact"===t){var n=e.modifiers;s+=ao(["ctrl","shift","alt","meta"].filter((function(e){return!n[e]})).map((function(e){return"$event.".concat(e,"Key")})).join("||"))}else r.push(t)};for(var d in e.modifiers)o(d);r.length&&(i+=function(e){return"if(!$event.type.indexOf('key')&&"+"".concat(e.map(oo).join("&&"),")return null;")}(r)),s&&(i+=s);var l=t?"return ".concat(e.value,".apply(null, arguments)"):n?"return (".concat(e.value,").apply(null, arguments)"):a?"return ".concat(e.value):e.value;return"function($event){".concat(i).concat(l,"}")}return t||n?e.value:"function($event){".concat(a?"return ".concat(e.value):e.value,"}")}function oo(e){var t=parseInt(e,10);if(t)return"$event.keyCode!==".concat(t);var n=to[e],a=no[e];return"_k($event.keyCode,"+"".concat(JSON.stringify(e),",")+"".concat(JSON.stringify(n),",")+"$event.key,"+"".concat(JSON.stringify(a))+")"}var lo={on:function(e,t){e.wrapListeners=function(e){return"_g(".concat(e,",").concat(t.value,")")}},bind:function(e,t){e.wrapData=function(n){return"_b(".concat(n,",'").concat(e.tag,"',").concat(t.value,",").concat(t.modifiers&&t.modifiers.prop?"true":"false").concat(t.modifiers&&t.modifiers.sync?",true":"",")")}},cloak:O},uo=function(e){this.options=e,this.warn=e.warn||Za,this.transforms=ei(e.modules,"transformCode"),this.dataGenFns=ei(e.modules,"genData"),this.directives=P(P({},lo),e.directives);var t=e.isReservedTag||E;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function po(e,t){var n=new uo(t),a=e?"script"===e.tag?"null":yo(e,n):'_c("div")';return{render:"with(this){return ".concat(a,"}"),staticRenderFns:n.staticRenderFns}}function yo(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return co(e,t);if(e.once&&!e.onceProcessed)return mo(e,t);if(e.for&&!e.forProcessed)return To(e,t);if(e.if&&!e.ifProcessed)return bo(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',a=Ro(e,t),i="_t(".concat(n).concat(a?",function(){return ".concat(a,"}"):""),s=e.attrs||e.dynamicAttrs?Mo((e.attrs||[]).concat(e.dynamicAttrs||[]).map((function(e){return{name:k(e.name),value:e.value,dynamic:e.dynamic}}))):null,r=e.attrsMap["v-bind"];return!s&&!r||a||(i+=",null"),s&&(i+=",".concat(s)),r&&(i+="".concat(s?"":",null",",").concat(r)),i+")"}(e,t);var n=void 0;if(e.component)n=function(e,t,n){var a=t.inlineTemplate?null:Ro(t,n,!0);return"_c(".concat(e,",").concat(ho(t,n)).concat(a?",".concat(a):"",")")}(e.component,e,t);else{var a=void 0,i=t.maybeComponent(e);(!e.plain||e.pre&&i)&&(a=ho(e,t));var s=void 0,r=t.options.bindings;i&&r&&!1!==r.__isScriptSetup&&(s=function(e,t){var n=k(t),a=M(n),i=function(i){return e[t]===i?t:e[n]===i?n:e[a]===i?a:void 0},s=i("setup-const")||i("setup-reactive-const");if(s)return s;var r=i("setup-let")||i("setup-ref")||i("setup-maybe-ref");return r||void 0}(r,e.tag)),s||(s="'".concat(e.tag,"'"));var o=e.inlineTemplate?null:Ro(e,t,!0);n="_c(".concat(s).concat(a?",".concat(a):"").concat(o?",".concat(o):"",")")}for(var d=0;d<t.transforms.length;d++)n=t.transforms[d](e,n);return n}return Ro(e,t)||"void 0"}function co(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return ".concat(yo(e,t),"}")),t.pre=n,"_m(".concat(t.staticRenderFns.length-1).concat(e.staticInFor?",true":"",")")}function mo(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return bo(e,t);if(e.staticInFor){for(var n="",a=e.parent;a;){if(a.for){n=a.key;break}a=a.parent}return n?"_o(".concat(yo(e,t),",").concat(t.onceId++,",").concat(n,")"):yo(e,t)}return co(e,t)}function bo(e,t,n,a){return e.ifProcessed=!0,fo(e.ifConditions.slice(),t,n,a)}function fo(e,t,n,a){if(!e.length)return a||"_e()";var i=e.shift();return i.exp?"(".concat(i.exp,")?").concat(s(i.block),":").concat(fo(e,t,n,a)):"".concat(s(i.block));function s(e){return n?n(e,t):e.once?mo(e,t):yo(e,t)}}function To(e,t,n,a){var i=e.for,s=e.alias,r=e.iterator1?",".concat(e.iterator1):"",o=e.iterator2?",".concat(e.iterator2):"";return e.forProcessed=!0,"".concat(a||"_l","((").concat(i,"),")+"function(".concat(s).concat(r).concat(o,"){")+"return ".concat((n||yo)(e,t))+"})"}function ho(e,t){var n="{",a=function(e,t){var n=e.directives;if(n){var a,i,s,r,o="directives:[",d=!1;for(a=0,i=n.length;a<i;a++){s=n[a],r=!0;var l=t.directives[s.name];l&&(r=!!l(e,s,t.warn)),r&&(d=!0,o+='{name:"'.concat(s.name,'",rawName:"').concat(s.rawName,'"').concat(s.value?",value:(".concat(s.value,"),expression:").concat(JSON.stringify(s.value)):"").concat(s.arg?",arg:".concat(s.isDynamicArg?s.arg:'"'.concat(s.arg,'"')):"").concat(s.modifiers?",modifiers:".concat(JSON.stringify(s.modifiers)):"","},"))}return d?o.slice(0,-1)+"]":void 0}}(e,t);a&&(n+=a+","),e.key&&(n+="key:".concat(e.key,",")),e.ref&&(n+="ref:".concat(e.ref,",")),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'.concat(e.tag,'",'));for(var i=0;i<t.dataGenFns.length;i++)n+=t.dataGenFns[i](e);if(e.attrs&&(n+="attrs:".concat(Mo(e.attrs),",")),e.props&&(n+="domProps:".concat(Mo(e.props),",")),e.events&&(n+="".concat(so(e.events,!1),",")),e.nativeEvents&&(n+="".concat(so(e.nativeEvents,!0),",")),e.slotTarget&&!e.slotScope&&(n+="slot:".concat(e.slotTarget,",")),e.scopedSlots&&(n+="".concat(function(e,t,n){var a=e.for||Object.keys(t).some((function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||vo(n)})),i=!!e.if;if(!a)for(var s=e.parent;s;){if(s.slotScope&&s.slotScope!==Er||s.for){a=!0;break}s.if&&(i=!0),s=s.parent}var r=Object.keys(t).map((function(e){return go(t[e],n)})).join(",");return"scopedSlots:_u([".concat(r,"]").concat(a?",null,true":"").concat(!a&&i?",null,false,".concat(function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(r)):"",")")}(e,e.scopedSlots,t),",")),e.model&&(n+="model:{value:".concat(e.model.value,",callback:").concat(e.model.callback,",expression:").concat(e.model.expression,"},")),e.inlineTemplate){var s=function(e,t){var n=e.children[0];if(n&&1===n.type){var a=po(n,t.options);return"inlineTemplate:{render:function(){".concat(a.render,"},staticRenderFns:[").concat(a.staticRenderFns.map((function(e){return"function(){".concat(e,"}")})).join(","),"]}")}}(e,t);s&&(n+="".concat(s,","))}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b(".concat(n,',"').concat(e.tag,'",').concat(Mo(e.dynamicAttrs),")")),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function vo(e){return 1===e.type&&("slot"===e.tag||e.children.some(vo))}function go(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return bo(e,t,go,"null");if(e.for&&!e.forProcessed)return To(e,t,go);var a=e.slotScope===Er?"":String(e.slotScope),i="function(".concat(a,"){")+"return ".concat("template"===e.tag?e.if&&n?"(".concat(e.if,")?").concat(Ro(e,t)||"undefined",":undefined"):Ro(e,t)||"undefined":yo(e,t),"}"),s=a?"":",proxy:true";return"{key:".concat(e.slotTarget||'"default"',",fn:").concat(i).concat(s,"}")}function Ro(e,t,n,a,i){var s=e.children;if(s.length){var r=s[0];if(1===s.length&&r.for&&"template"!==r.tag&&"slot"!==r.tag){var o=n?t.maybeComponent(r)?",1":",0":"";return"".concat((a||yo)(r,t)).concat(o)}var d=n?function(e,t){for(var n=0,a=0;a<e.length;a++){var i=e[a];if(1===i.type){if(wo(i)||i.ifConditions&&i.ifConditions.some((function(e){return wo(e.block)}))){n=2;break}(t(i)||i.ifConditions&&i.ifConditions.some((function(e){return t(e.block)})))&&(n=1)}}return n}(s,t.maybeComponent):0,l=i||ko;return"[".concat(s.map((function(e){return l(e,t)})).join(","),"]").concat(d?",".concat(d):"")}}function wo(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function ko(e,t){return 1===e.type?yo(e,t):3===e.type&&e.isComment?function(e){return"_e(".concat(JSON.stringify(e.text),")")}(e):"_v(".concat(2===(n=e).type?n.expression:xo(JSON.stringify(n.text)),")");var n}function Mo(e){for(var t="",n="",a=0;a<e.length;a++){var i=e[a],s=xo(i.value);i.dynamic?n+="".concat(i.name,",").concat(s,","):t+='"'.concat(i.name,'":').concat(s,",")}return t="{".concat(t.slice(0,-1),"}"),n?"_d(".concat(t,",[").concat(n.slice(0,-1),"])"):t}function xo(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function _o(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),O}}function Ao(e){var t=Object.create(null);return function(n,a,i){(a=P({},a)).warn,delete a.warn;var s=a.delimiters?String(a.delimiters)+n:n;if(t[s])return t[s];var r=e(n,a),o={},d=[];return o.render=_o(r.render,d),o.staticRenderFns=r.staticRenderFns.map((function(e){return _o(e,d)})),t[s]=o}}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");var Io,Po,Co=(Io=function(e,t){var n=Lr(e.trim(),t);!1!==t.optimize&&Xr(n,t);var a=po(n,t);return{ast:n,render:a.render,staticRenderFns:a.staticRenderFns}},function(e){function t(t,n){var a=Object.create(e),i=[],s=[];if(n)for(var r in n.modules&&(a.modules=(e.modules||[]).concat(n.modules)),n.directives&&(a.directives=P(Object.create(e.directives||null),n.directives)),n)"modules"!==r&&"directives"!==r&&(a[r]=n[r]);a.warn=function(e,t,n){(n?s:i).push(e)};var o=Io(t.trim(),a);return o.errors=i,o.tips=s,o}return{compile:t,compileToFunctions:Ao(t)}}),Oo=Co(Hr).compileToFunctions;function Eo(e){return(Po=Po||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',Po.innerHTML.indexOf("&#10;")>0}var So=!!W&&Eo(!1),Lo=!!W&&Eo(!0),Fo=R((function(e){var t=wa(e);return t&&t.innerHTML})),Vo=Qn.prototype.$mount;function No(e,t){for(var n in t)e[n]=t[n];return e}Qn.prototype.$mount=function(e,t){if((e=e&&wa(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var a=n.template;if(a)if("string"==typeof a)"#"===a.charAt(0)&&(a=Fo(a));else{if(!a.nodeType)return this;a=a.innerHTML}else e&&(a=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(a){var i=Oo(a,{outputSourceRange:!1,shouldDecodeNewlines:So,shouldDecodeNewlinesForHref:Lo,delimiters:n.delimiters,comments:n.comments},this),s=i.render,r=i.staticRenderFns;n.render=s,n.staticRenderFns=r}}return Vo.call(this,e,t)},Qn.compile=Oo;var qo=/[!'()*]/g,Do=function(e){return"%"+e.charCodeAt(0).toString(16)},zo=/%2C/g,Bo=function(e){return encodeURIComponent(e).replace(qo,Do).replace(zo,",")};function $o(e){try{return decodeURIComponent(e)}catch(e){}return e}var Go=function(e){return null==e||"object"==typeof e?e:String(e)};function Uo(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var n=e.replace(/\+/g," ").split("="),a=$o(n.shift()),i=n.length>0?$o(n.join("=")):null;void 0===t[a]?t[a]=i:Array.isArray(t[a])?t[a].push(i):t[a]=[t[a],i]})),t):t}function jo(e){var t=e?Object.keys(e).map((function(t){var n=e[t];if(void 0===n)return"";if(null===n)return Bo(t);if(Array.isArray(n)){var a=[];return n.forEach((function(e){void 0!==e&&(null===e?a.push(Bo(t)):a.push(Bo(t)+"="+Bo(e)))})),a.join("&")}return Bo(t)+"="+Bo(n)})).filter((function(e){return e.length>0})).join("&"):null;return t?"?"+t:""}var Wo=/\/?$/;function Ho(e,t,n,a){var i=a&&a.options.stringifyQuery,s=t.query||{};try{s=Qo(s)}catch(e){}var r={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:s,params:t.params||{},fullPath:Jo(t,i),matched:e?Ko(e):[]};return n&&(r.redirectedFrom=Jo(n,i)),Object.freeze(r)}function Qo(e){if(Array.isArray(e))return e.map(Qo);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=Qo(e[n]);return t}return e}var Xo=Ho(null,{path:"/"});function Ko(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function Jo(e,t){var n=e.path,a=e.query;void 0===a&&(a={});var i=e.hash;return void 0===i&&(i=""),(n||"/")+(t||jo)(a)+i}function Yo(e,t,n){return t===Xo?e===t:!!t&&(e.path&&t.path?e.path.replace(Wo,"")===t.path.replace(Wo,"")&&(n||e.hash===t.hash&&Zo(e.query,t.query)):!(!e.name||!t.name)&&e.name===t.name&&(n||e.hash===t.hash&&Zo(e.query,t.query)&&Zo(e.params,t.params)))}function Zo(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e).sort(),a=Object.keys(t).sort();return n.length===a.length&&n.every((function(n,i){var s=e[n];if(a[i]!==n)return!1;var r=t[n];return null==s||null==r?s===r:"object"==typeof s&&"object"==typeof r?Zo(s,r):String(s)===String(r)}))}function ed(e){for(var t=0;t<e.matched.length;t++){var n=e.matched[t];for(var a in n.instances){var i=n.instances[a],s=n.enteredCbs[a];if(i&&s){delete n.enteredCbs[a];for(var r=0;r<s.length;r++)i._isBeingDestroyed||s[r](i)}}}}var td={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,a=t.children,i=t.parent,s=t.data;s.routerView=!0;for(var r=i.$createElement,o=n.name,d=i.$route,l=i._routerViewCache||(i._routerViewCache={}),u=0,p=!1;i&&i._routerRoot!==i;){var y=i.$vnode?i.$vnode.data:{};y.routerView&&u++,y.keepAlive&&i._directInactive&&i._inactive&&(p=!0),i=i.$parent}if(s.routerViewDepth=u,p){var c=l[o],m=c&&c.component;return m?(c.configProps&&nd(m,s,c.route,c.configProps),r(m,s,a)):r()}var b=d.matched[u],f=b&&b.components[o];if(!b||!f)return l[o]=null,r();l[o]={component:f},s.registerRouteInstance=function(e,t){var n=b.instances[o];(t&&n!==e||!t&&n===e)&&(b.instances[o]=t)},(s.hook||(s.hook={})).prepatch=function(e,t){b.instances[o]=t.componentInstance},s.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==b.instances[o]&&(b.instances[o]=e.componentInstance),ed(d)};var T=b.props&&b.props[o];return T&&(No(l[o],{route:d,configProps:T}),nd(f,s,d,T)),r(f,s,a)}};function nd(e,t,n,a){var i=t.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0}}(n,a);if(i){i=t.props=No({},i);var s=t.attrs=t.attrs||{};for(var r in i)e.props&&r in e.props||(s[r]=i[r],delete i[r])}}function ad(e,t,n){var a=e.charAt(0);if("/"===a)return e;if("?"===a||"#"===a)return t+e;var i=t.split("/");n&&i[i.length-1]||i.pop();for(var s=e.replace(/^\//,"").split("/"),r=0;r<s.length;r++){var o=s[r];".."===o?i.pop():"."!==o&&i.push(o)}return""!==i[0]&&i.unshift(""),i.join("/")}function id(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var sd=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},rd=function e(t,n,a){return sd(n)||(a=n||a,n=[]),a=a||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var a=0;a<n.length;a++)t.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Td(e,t)}(t,n):sd(t)?function(t,n,a){for(var i=[],s=0;s<t.length;s++)i.push(e(t[s],n,a).source);return Td(new RegExp("(?:"+i.join("|")+")",hd(a)),n)}(t,n,a):function(e,t,n){return vd(pd(e,n),t,n)}(t,n,a)},od=pd,dd=md,ld=vd,ud=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function pd(e,t){for(var n,a=[],i=0,s=0,r="",o=t&&t.delimiter||"/";null!=(n=ud.exec(e));){var d=n[0],l=n[1],u=n.index;if(r+=e.slice(s,u),s=u+d.length,l)r+=l[1];else{var p=e[s],y=n[2],c=n[3],m=n[4],b=n[5],f=n[6],T=n[7];r&&(a.push(r),r="");var h=null!=y&&null!=p&&p!==y,v="+"===f||"*"===f,g="?"===f||"*"===f,R=n[2]||o,w=m||b;a.push({name:c||i++,prefix:y||"",delimiter:R,optional:g,repeat:v,partial:h,asterisk:!!T,pattern:w?fd(w):T?".*":"[^"+bd(R)+"]+?"})}}return s<e.length&&(r+=e.substr(s)),r&&a.push(r),a}function yd(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function cd(e){return encodeURI(e).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function md(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",hd(t)));return function(t,a){for(var i="",s=t||{},r=(a||{}).pretty?yd:encodeURIComponent,o=0;o<e.length;o++){var d=e[o];if("string"!=typeof d){var l,u=s[d.name];if(null==u){if(d.optional){d.partial&&(i+=d.prefix);continue}throw new TypeError('Expected "'+d.name+'" to be defined')}if(sd(u)){if(!d.repeat)throw new TypeError('Expected "'+d.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(d.optional)continue;throw new TypeError('Expected "'+d.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(l=r(u[p]),!n[o].test(l))throw new TypeError('Expected all "'+d.name+'" to match "'+d.pattern+'", but received `'+JSON.stringify(l)+"`");i+=(0===p?d.prefix:d.delimiter)+l}}else{if(l=d.asterisk?cd(u):r(u),!n[o].test(l))throw new TypeError('Expected "'+d.name+'" to match "'+d.pattern+'", but received "'+l+'"');i+=d.prefix+l}}else i+=d}return i}}function bd(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function fd(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Td(e,t){return e.keys=t,e}function hd(e){return e&&e.sensitive?"":"i"}function vd(e,t,n){sd(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,i=!1!==n.end,s="",r=0;r<e.length;r++){var o=e[r];if("string"==typeof o)s+=bd(o);else{var d=bd(o.prefix),l="(?:"+o.pattern+")";t.push(o),o.repeat&&(l+="(?:"+d+l+")*"),s+=l=o.optional?o.partial?d+"("+l+")?":"(?:"+d+"("+l+"))?":d+"("+l+")"}}var u=bd(n.delimiter||"/"),p=s.slice(-u.length)===u;return a||(s=(p?s.slice(0,-u.length):s)+"(?:"+u+"(?=$))?"),s+=i?"$":a&&p?"":"(?="+u+"|$)",Td(new RegExp("^"+s,hd(n)),t)}rd.parse=od,rd.compile=function(e,t){return md(pd(e,t),t)},rd.tokensToFunction=dd,rd.tokensToRegExp=ld;var gd=Object.create(null);function Rd(e,t,n){t=t||{};try{var a=gd[e]||(gd[e]=rd.compile(e));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),a(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function wd(e,t,n,a){var i="string"==typeof e?{path:e}:e;if(i._normalized)return i;if(i.name){var s=(i=No({},e)).params;return s&&"object"==typeof s&&(i.params=No({},s)),i}if(!i.path&&i.params&&t){(i=No({},i))._normalized=!0;var r=No(No({},t.params),i.params);if(t.name)i.name=t.name,i.params=r;else if(t.matched.length){var o=t.matched[t.matched.length-1].path;i.path=Rd(o,r,t.path)}return i}var d=function(e){var t="",n="",a=e.indexOf("#");a>=0&&(t=e.slice(a),e=e.slice(0,a));var i=e.indexOf("?");return i>=0&&(n=e.slice(i+1),e=e.slice(0,i)),{path:e,query:n,hash:t}}(i.path||""),l=t&&t.path||"/",u=d.path?ad(d.path,l,n||i.append):l,p=function(e,t,n){void 0===t&&(t={});var a,i=n||Uo;try{a=i(e||"")}catch(e){a={}}for(var s in t){var r=t[s];a[s]=Array.isArray(r)?r.map(Go):Go(r)}return a}(d.query,i.query,a&&a.options.parseQuery),y=i.hash||d.hash;return y&&"#"!==y.charAt(0)&&(y="#"+y),{_normalized:!0,path:u,query:p,hash:y}}var kd,Md=function(){},xd={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var t=this,n=this.$router,a=this.$route,i=n.resolve(this.to,a,this.append),s=i.location,r=i.route,o=i.href,d={},l=n.options.linkActiveClass,u=n.options.linkExactActiveClass,p=null==l?"router-link-active":l,y=null==u?"router-link-exact-active":u,c=null==this.activeClass?p:this.activeClass,m=null==this.exactActiveClass?y:this.exactActiveClass,b=r.redirectedFrom?Ho(null,wd(r.redirectedFrom),null,n):r;d[m]=Yo(a,b,this.exactPath),d[c]=this.exact||this.exactPath?d[m]:function(e,t){return 0===e.path.replace(Wo,"/").indexOf(t.path.replace(Wo,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var n in t)if(!(n in e))return!1;return!0}(e.query,t.query)}(a,b);var f=d[m]?this.ariaCurrentValue:null,T=function(e){_d(e)&&(t.replace?n.replace(s,Md):n.push(s,Md))},h={click:_d};Array.isArray(this.event)?this.event.forEach((function(e){h[e]=T})):h[this.event]=T;var v={class:d},g=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:o,route:r,navigate:T,isActive:d[c],isExactActive:d[m]});if(g){if(1===g.length)return g[0];if(g.length>1||!g.length)return 0===g.length?e():e("span",{},g)}if("a"===this.tag)v.on=h,v.attrs={href:o,"aria-current":f};else{var R=Ad(this.$slots.default);if(R){R.isStatic=!1;var w=R.data=No({},R.data);for(var k in w.on=w.on||{},w.on){var M=w.on[k];k in h&&(w.on[k]=Array.isArray(M)?M:[M])}for(var x in h)x in w.on?w.on[x].push(h[x]):w.on[x]=T;var _=R.data.attrs=No({},R.data.attrs);_.href=o,_["aria-current"]=f}else v.on=h}return e(this.tag,v,this.$slots.default)}};function _d(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function Ad(e){if(e)for(var t,n=0;n<e.length;n++){if("a"===(t=e[n]).tag)return t;if(t.children&&(t=Ad(t.children)))return t}}var Id="undefined"!=typeof window;function Pd(e,t,n,a,i){var s=t||[],r=n||Object.create(null),o=a||Object.create(null);e.forEach((function(e){Cd(s,r,o,e,i)}));for(var d=0,l=s.length;d<l;d++)"*"===s[d]&&(s.push(s.splice(d,1)[0]),l--,d--);return{pathList:s,pathMap:r,nameMap:o}}function Cd(e,t,n,a,i,s){var r=a.path,o=a.name,d=a.pathToRegexpOptions||{},l=function(e,t,n){return n||(e=e.replace(/\/$/,"")),"/"===e[0]||null==t?e:id(t.path+"/"+e)}(r,i,d.strict);"boolean"==typeof a.caseSensitive&&(d.sensitive=a.caseSensitive);var u={path:l,regex:Od(l,d),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:o,parent:i,matchAs:s,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};if(a.children&&a.children.forEach((function(a){var i=s?id(s+"/"+a.path):void 0;Cd(e,t,n,a,u,i)})),t[u.path]||(e.push(u.path),t[u.path]=u),void 0!==a.alias)for(var p=Array.isArray(a.alias)?a.alias:[a.alias],y=0;y<p.length;++y){var c={path:p[y],children:a.children};Cd(e,t,n,c,i,u.path||"/")}o&&(n[o]||(n[o]=u))}function Od(e,t){return rd(e,[],t)}function Ed(e,t){var n=Pd(e),a=n.pathList,i=n.pathMap,s=n.nameMap;function r(e,n,r){var d=wd(e,n,!1,t),l=d.name;if(l){var u=s[l];if(!u)return o(null,d);var p=u.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof d.params&&(d.params={}),n&&"object"==typeof n.params)for(var y in n.params)!(y in d.params)&&p.indexOf(y)>-1&&(d.params[y]=n.params[y]);return d.path=Rd(u.path,d.params),o(u,d,r)}if(d.path){d.params={};for(var c=0;c<a.length;c++){var m=a[c],b=i[m];if(Sd(b.regex,d.path,d.params))return o(b,d,r)}}return o(null,d)}function o(e,n,a){return e&&e.redirect?function(e,n){var a=e.redirect,i="function"==typeof a?a(Ho(e,n,null,t)):a;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return o(null,n);var d=i,l=d.name,u=d.path,p=n.query,y=n.hash,c=n.params;if(p=d.hasOwnProperty("query")?d.query:p,y=d.hasOwnProperty("hash")?d.hash:y,c=d.hasOwnProperty("params")?d.params:c,l)return s[l],r({_normalized:!0,name:l,query:p,hash:y,params:c},void 0,n);if(u){var m=function(e,t){return ad(e,t.parent?t.parent.path:"/",!0)}(u,e);return r({_normalized:!0,path:Rd(m,c),query:p,hash:y},void 0,n)}return o(null,n)}(e,a||n):e&&e.matchAs?function(e,t,n){var a=r({_normalized:!0,path:Rd(n,t.params)});if(a){var i=a.matched,s=i[i.length-1];return t.params=a.params,o(s,t)}return o(null,t)}(0,n,e.matchAs):Ho(e,n,a,t)}return{match:r,addRoute:function(e,t){var n="object"!=typeof e?s[e]:void 0;Pd([t||e],a,i,s,n),n&&n.alias.length&&Pd(n.alias.map((function(e){return{path:e,children:[t]}})),a,i,s,n)},getRoutes:function(){return a.map((function(e){return i[e]}))},addRoutes:function(e){Pd(e,a,i,s)}}}function Sd(e,t,n){var a=t.match(e);if(!a)return!1;if(!n)return!0;for(var i=1,s=a.length;i<s;++i){var r=e.keys[i-1];r&&(n[r.name||"pathMatch"]="string"==typeof a[i]?$o(a[i]):a[i])}return!0}var Ld=Id&&window.performance&&window.performance.now?window.performance:Date;function Fd(){return Ld.now().toFixed(3)}var Vd=Fd();function Nd(){return Vd}function qd(e){return Vd=e}var Dd=Object.create(null);function zd(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(e,""),n=No({},window.history.state);return n.key=Nd(),window.history.replaceState(n,"",t),window.addEventListener("popstate",Gd),function(){window.removeEventListener("popstate",Gd)}}function Bd(e,t,n,a){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var s=function(){var e=Nd();if(e)return Dd[e]}(),r=i.call(e,t,n,a?s:null);r&&("function"==typeof r.then?r.then((function(e){Qd(e,s)})).catch((function(e){})):Qd(r,s))}))}}function $d(){var e=Nd();e&&(Dd[e]={x:window.pageXOffset,y:window.pageYOffset})}function Gd(e){$d(),e.state&&e.state.key&&qd(e.state.key)}function Ud(e){return Wd(e.x)||Wd(e.y)}function jd(e){return{x:Wd(e.x)?e.x:window.pageXOffset,y:Wd(e.y)?e.y:window.pageYOffset}}function Wd(e){return"number"==typeof e}var Hd=/^#\d/;function Qd(e,t){var n,a="object"==typeof e;if(a&&"string"==typeof e.selector){var i=Hd.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var s=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var n=document.documentElement.getBoundingClientRect(),a=e.getBoundingClientRect();return{x:a.left-n.left-t.x,y:a.top-n.top-t.y}}(i,s={x:Wd((n=s).x)?n.x:0,y:Wd(n.y)?n.y:0})}else Ud(e)&&(t=jd(e))}else a&&Ud(e)&&(t=jd(e));t&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:t.x,top:t.y,behavior:e.behavior}):window.scrollTo(t.x,t.y))}var Xd,Kd=Id&&(-1===(Xd=window.navigator.userAgent).indexOf("Android 2.")&&-1===Xd.indexOf("Android 4.0")||-1===Xd.indexOf("Mobile Safari")||-1!==Xd.indexOf("Chrome")||-1!==Xd.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState;function Jd(e,t){$d();var n=window.history;try{if(t){var a=No({},n.state);a.key=Nd(),n.replaceState(a,"",e)}else n.pushState({key:qd(Fd())},"",e)}catch(n){window.location[t?"replace":"assign"](e)}}function Yd(e){Jd(e,!0)}var Zd={redirected:2,aborted:4,cancelled:8,duplicated:16};function el(e,t){return tl(e,t,Zd.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+t.fullPath+'" with a new navigation.')}function tl(e,t,n,a){var i=new Error(a);return i._isRouter=!0,i.from=e,i.to=t,i.type=n,i}var nl=["params","query","hash"];function al(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function il(e,t){return al(e)&&e._isRouter&&(null==t||e.type===t)}function sl(e,t,n){var a=function(i){i>=e.length?n():e[i]?t(e[i],(function(){a(i+1)})):a(i+1)};a(0)}function rl(e,t){return ol(e.map((function(e){return Object.keys(e.components).map((function(n){return t(e.components[n],e.instances[n],e,n)}))})))}function ol(e){return Array.prototype.concat.apply([],e)}var dl="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function ll(e){var t=!1;return function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];if(!t)return t=!0,e.apply(this,n)}}var ul=function(e,t){this.router=e,this.base=function(e){if(!e)if(Id){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";return"/"!==e.charAt(0)&&(e="/"+e),e.replace(/\/$/,"")}(t),this.current=Xo,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function pl(e,t,n,a){var i=rl(e,(function(e,a,i,s){var r=function(e,t){return"function"!=typeof e&&(e=kd.extend(e)),e.options[t]}(e,t);if(r)return Array.isArray(r)?r.map((function(e){return n(e,a,i,s)})):n(r,a,i,s)}));return ol(a?i.reverse():i)}function yl(e,t){if(t)return function(){return e.apply(t,arguments)}}ul.prototype.listen=function(e){this.cb=e},ul.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},ul.prototype.onError=function(e){this.errorCbs.push(e)},ul.prototype.transitionTo=function(e,t,n){var a,i=this;try{a=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(t){t(e)})),e}var s=this.current;this.confirmTransition(a,(function(){i.updateRoute(a),t&&t(a),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(a,s)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(a)})))}),(function(e){n&&n(e),e&&!i.ready&&(il(e,Zd.redirected)&&s===Xo||(i.ready=!0,i.readyErrorCbs.forEach((function(t){t(e)}))))}))},ul.prototype.confirmTransition=function(e,t,n){var a=this,i=this.current;this.pending=e;var s,r,o=function(e){!il(e)&&al(e)&&(a.errorCbs.length?a.errorCbs.forEach((function(t){t(e)})):console.error(e)),n&&n(e)},d=e.matched.length-1,l=i.matched.length-1;if(Yo(e,i)&&d===l&&e.matched[d]===i.matched[l])return this.ensureURL(),e.hash&&Bd(this.router,i,e,!1),o(((r=tl(s=i,e,Zd.duplicated,'Avoided redundant navigation to current location: "'+s.fullPath+'".')).name="NavigationDuplicated",r));var u,p=function(e,t){var n,a=Math.max(e.length,t.length);for(n=0;n<a&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}(this.current.matched,e.matched),y=p.updated,c=p.deactivated,m=p.activated,b=[].concat(function(e){return pl(e,"beforeRouteLeave",yl,!0)}(c),this.router.beforeHooks,function(e){return pl(e,"beforeRouteUpdate",yl)}(y),m.map((function(e){return e.beforeEnter})),(u=m,function(e,t,n){var a=!1,i=0,s=null;rl(u,(function(e,t,r,o){if("function"==typeof e&&void 0===e.cid){a=!0,i++;var d,l=ll((function(t){var a;((a=t).__esModule||dl&&"Module"===a[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:kd.extend(t),r.components[o]=t,--i<=0&&n()})),u=ll((function(e){var t="Failed to resolve async component "+o+": "+e;s||(s=al(e)?e:new Error(t),n(s))}));try{d=e(l,u)}catch(e){u(e)}if(d)if("function"==typeof d.then)d.then(l,u);else{var p=d.component;p&&"function"==typeof p.then&&p.then(l,u)}}})),a||n()})),f=function(t,n){if(a.pending!==e)return o(el(i,e));try{t(e,i,(function(t){!1===t?(a.ensureURL(!0),o(function(e,t){return tl(e,t,Zd.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+t.fullPath+'" via a navigation guard.')}(i,e))):al(t)?(a.ensureURL(!0),o(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(o(function(e,t){return tl(e,t,Zd.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var t={};return nl.forEach((function(n){n in e&&(t[n]=e[n])})),JSON.stringify(t,null,2)}(t)+'" via a navigation guard.')}(i,e)),"object"==typeof t&&t.replace?a.replace(t):a.push(t)):n(t)}))}catch(e){o(e)}};sl(b,f,(function(){var n=function(e){return pl(e,"beforeRouteEnter",(function(e,t,n,a){return function(e,t,n){return function(a,i,s){return e(a,i,(function(e){"function"==typeof e&&(t.enteredCbs[n]||(t.enteredCbs[n]=[]),t.enteredCbs[n].push(e)),s(e)}))}}(e,n,a)}))}(m);sl(n.concat(a.router.resolveHooks),f,(function(){if(a.pending!==e)return o(el(i,e));a.pending=null,t(e),a.router.app&&a.router.app.$nextTick((function(){ed(e)}))}))}))},ul.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},ul.prototype.setupListeners=function(){},ul.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=Xo,this.pending=null};var cl=function(e){function t(t,n){e.call(this,t,n),this._startLocation=ml(this.base)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router,n=t.options.scrollBehavior,a=Kd&&n;a&&this.listeners.push(zd());var i=function(){var n=e.current,i=ml(e.base);e.current===Xo&&i===e._startLocation||e.transitionTo(i,(function(e){a&&Bd(t,e,n,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){Jd(id(a.base+e.fullPath)),Bd(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){Yd(id(a.base+e.fullPath)),Bd(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.ensureURL=function(e){if(ml(this.base)!==this.current.fullPath){var t=id(this.base+this.current.fullPath);e?Jd(t):Yd(t)}},t.prototype.getCurrentLocation=function(){return ml(this.base)},t}(ul);function ml(e){var t=window.location.pathname,n=t.toLowerCase(),a=e.toLowerCase();return!e||n!==a&&0!==n.indexOf(id(a+"/"))||(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var bl=function(e){function t(t,n,a){e.call(this,t,n),a&&function(e){var t=ml(e);if(!/^\/#/.test(t))return window.location.replace(id(e+"/#"+t)),!0}(this.base)||fl()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router.options.scrollBehavior,n=Kd&&t;n&&this.listeners.push(zd());var a=function(){var t=e.current;fl()&&e.transitionTo(Tl(),(function(a){n&&Bd(e.router,a,t,!0),Kd||gl(a.fullPath)}))},i=Kd?"popstate":"hashchange";window.addEventListener(i,a),this.listeners.push((function(){window.removeEventListener(i,a)}))}},t.prototype.push=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){vl(e.fullPath),Bd(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){gl(e.fullPath),Bd(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;Tl()!==t&&(e?vl(t):gl(t))},t.prototype.getCurrentLocation=function(){return Tl()},t}(ul);function fl(){var e=Tl();return"/"===e.charAt(0)||(gl("/"+e),!1)}function Tl(){var e=window.location.href,t=e.indexOf("#");return t<0?"":e=e.slice(t+1)}function hl(e){var t=window.location.href,n=t.indexOf("#");return(n>=0?t.slice(0,n):t)+"#"+e}function vl(e){Kd?Jd(hl(e)):window.location.hash=e}function gl(e){Kd?Yd(hl(e)):window.location.replace(hl(e))}var Rl=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index+1).concat(e),a.index++,t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index).concat(e),t&&t(e)}),n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var a=this.stack[n];this.confirmTransition(a,(function(){var e=t.current;t.index=n,t.updateRoute(a),t.router.afterHooks.forEach((function(t){t&&t(a,e)}))}),(function(e){il(e,Zd.duplicated)&&(t.index=n)}))}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(ul),wl=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ed(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!Kd&&!1!==e.fallback,this.fallback&&(t="hash"),Id||(t="abstract"),this.mode=t,t){case"history":this.history=new cl(this,e.base);break;case"hash":this.history=new bl(this,e.base,this.fallback);break;case"abstract":this.history=new Rl(this,e.base)}},kl={currentRoute:{configurable:!0}};wl.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},kl.currentRoute.get=function(){return this.history&&this.history.current},wl.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var n=t.apps.indexOf(e);n>-1&&t.apps.splice(n,1),t.app===e&&(t.app=t.apps[0]||null),t.app||t.history.teardown()})),!this.app){this.app=e;var n=this.history;if(n instanceof cl||n instanceof bl){var a=function(e){n.setupListeners(),function(e){var a=n.current,i=t.options.scrollBehavior;Kd&&i&&"fullPath"in e&&Bd(t,e,a,!1)}(e)};n.transitionTo(n.getCurrentLocation(),a,a)}n.listen((function(e){t.apps.forEach((function(t){t._route=e}))}))}},wl.prototype.beforeEach=function(e){return xl(this.beforeHooks,e)},wl.prototype.beforeResolve=function(e){return xl(this.resolveHooks,e)},wl.prototype.afterEach=function(e){return xl(this.afterHooks,e)},wl.prototype.onReady=function(e,t){this.history.onReady(e,t)},wl.prototype.onError=function(e){this.history.onError(e)},wl.prototype.push=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.push(e,t,n)}));this.history.push(e,t,n)},wl.prototype.replace=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.replace(e,t,n)}));this.history.replace(e,t,n)},wl.prototype.go=function(e){this.history.go(e)},wl.prototype.back=function(){this.go(-1)},wl.prototype.forward=function(){this.go(1)},wl.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(e){return Object.keys(e.components).map((function(t){return e.components[t]}))}))):[]},wl.prototype.resolve=function(e,t,n){var a=wd(e,t=t||this.history.current,n,this),i=this.match(a,t),s=i.redirectedFrom||i.fullPath,r=function(e,t,n){var a="hash"===n?"#"+t:t;return e?id(e+"/"+a):a}(this.history.base,s,this.mode);return{location:a,route:i,href:r,normalizedTo:a,resolved:i}},wl.prototype.getRoutes=function(){return this.matcher.getRoutes()},wl.prototype.addRoute=function(e,t){this.matcher.addRoute(e,t),this.history.current!==Xo&&this.history.transitionTo(this.history.getCurrentLocation())},wl.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==Xo&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(wl.prototype,kl);var Ml=wl;function xl(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}wl.install=function e(t){if(!e.installed||kd!==t){e.installed=!0,kd=t;var n=function(e){return void 0!==e},a=function(e,t){var a=e.$options._parentVnode;n(a)&&n(a=a.data)&&n(a=a.registerRouteInstance)&&a(e,t)};t.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,a(this,this)},destroyed:function(){a(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",td),t.component("RouterLink",xd);var i=t.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},wl.version="3.6.5",wl.isNavigationFailure=il,wl.NavigationFailureType=Zd,wl.START_LOCATION=Xo,Id&&window.Vue&&window.Vue.use(wl);var _l=function(){var e=this._self._c;return e("div",{staticClass:"min-h-screen bg-gray-100 px-4 pt-6"},[e("router-view")],1)};function Al(e,t,n,a,i,s,r,o){var d,l="function"==typeof e?e.options:e;if(t&&(l.render=t,l.staticRenderFns=n,l._compiled=!0),a&&(l.functional=!0),s&&(l._scopeId="data-v-"+s),r?(d=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},l._ssrRegister=d):i&&(d=o?function(){i.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:i),d)if(l.functional){l._injectStyles=d;var u=l.render;l.render=function(e,t){return d.call(t),u(e,t)}}else{var p=l.beforeCreate;l.beforeCreate=p?[].concat(p,d):[d]}return{exports:e,options:l}}_l._withStripped=!0,n(838);const Il=Al({},_l,[],!1,null,null,null).exports;var Pl=function(){var e=this,t=e._self._c;return t("div",{staticClass:"w-full space-y-10 md:max-w-screen-sm lg:max-w-screen-md mx-auto"},[t("HeaderBar"),e._v(" "),t("div",{staticClass:"pb-32"},[t("div",{staticClass:"space-y-4"},[t("span",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.source)+"\n      ")]),e._v(" "),t("h1",{staticClass:"text-xl"},[e._v("\n        "+e._s(e.json.name)+"\n      ")]),e._v(" "),t("h2",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.title)+"\n      ")]),e._v(" "),t("h2",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.author)+"\n      ")]),e._v(" "),t("p",[e._v(e._s(e.json.notice))]),e._v(" "),t("p",[e._v(e._s(e.json.details))])]),e._v(" "),t("div",{staticClass:"mt-8"},[e.json.hasOwnProperty("constructor")?t("Member",{attrs:{json:e.json.constructor}}):e._e()],1),e._v(" "),t("div",{staticClass:"mt-8"},[e.json.receive?t("Member",{attrs:{json:e.json.receive}}):e._e()],1),e._v(" "),t("div",{staticClass:"mt-8"},[e.json.fallback?t("Member",{attrs:{json:e.json.fallback}}):e._e()],1),e._v(" "),e.json.events?t("MemberSet",{attrs:{title:"Events",json:e.json.events}}):e._e(),e._v(" "),e.json.stateVariables?t("MemberSet",{attrs:{title:"State Variables",json:e.json.stateVariables}}):e._e(),e._v(" "),e.json.methods?t("MemberSet",{attrs:{title:"Methods",json:e.json.methods}}):e._e()],1),e._v(" "),t("FooterBar")],1)};Pl._withStripped=!0;var Cl=function(){var e=this,t=e._self._c;return t("div",{staticClass:"bg-gray-100 fixed bottom-0 right-0 w-full border-t border-dashed border-gray-300"},[t("div",{staticClass:"w-full text-center py-2 md:max-w-screen-sm lg:max-w-screen-md mx-auto"},[t("button",{staticClass:"py-1 px-2 text-gray-500",on:{click:function(t){return e.openLink(e.repository)}}},[e._v("\n      built with "+e._s(e.name)+"\n    ")])])])};Cl._withStripped=!0;const Ol=JSON.parse('{"u2":"hardhat-docgen","cj":"https://github.com/ItsNickBarry/hardhat-docgen"}'),El=Al({data:function(){return{repository:Ol.cj,name:Ol.u2}},methods:{openLink(e){window.open(e,"_blank")}}},Cl,[],!1,null,null,null).exports;var Sl=function(){var e=this._self._c;return e("div",{staticClass:"w-full border-b border-dashed py-2 border-gray-300"},[e("router-link",{staticClass:"py-2 text-gray-500",attrs:{to:"/"}},[this._v("\n    <- Go back\n  ")])],1)};Sl._withStripped=!0;const Ll=Al({},Sl,[],!1,null,null,null).exports;var Fl=function(){var e=this,t=e._self._c;return t("div",{staticClass:"border-2 border-gray-400 border-dashed w-full p-2"},[t("h3",{staticClass:"text-lg pb-2 mb-2 border-b-2 border-gray-400 border-dashed"},[e._v("\n    "+e._s(e.name)+" "+e._s(e.keywords)+" "+e._s(e.inputSignature)+"\n  ")]),e._v(" "),t("div",{staticClass:"space-y-3"},[t("p",[e._v(e._s(e.json.notice))]),e._v(" "),t("p",[e._v(e._s(e.json.details))]),e._v(" "),t("MemberSection",{attrs:{name:"Parameters",items:e.inputs}}),e._v(" "),t("MemberSection",{attrs:{name:"Return Values",items:e.outputs}})],1)])};Fl._withStripped=!0;var Vl=function(){var e=this,t=e._self._c;return e.items.length>0?t("ul",[t("h4",{staticClass:"text-lg"},[e._v("\n    "+e._s(e.name)+"\n  ")]),e._v(" "),e._l(e.items,(function(n,a){return t("li",{key:a},[t("span",{staticClass:"bg-gray-300"},[e._v(e._s(n.type))]),e._v(" "),t("b",[e._v(e._s(n.name||`_${a}`))]),n.desc?t("span",[e._v(": "),t("i",[e._v(e._s(n.desc))])]):e._e()])}))],2):e._e()};Vl._withStripped=!0;const Nl={components:{MemberSection:Al({props:{name:{type:String,default:""},items:{type:Array,default:()=>new Array}}},Vl,[],!1,null,null,null).exports},props:{json:{type:Object,default:()=>new Object}},computed:{name:function(){return this.json.name||this.json.type},keywords:function(){let e=[];return this.json.stateMutability&&e.push(this.json.stateMutability),"true"===this.json.anonymous&&e.push("anonymous"),e.join(" ")},params:function(){return this.json.params||{}},returns:function(){return this.json.returns||{}},inputs:function(){return(this.json.inputs||[]).map((e=>({...e,desc:this.params[e.name]})))},inputSignature:function(){return`(${this.inputs.map((e=>e.type)).join(",")})`},outputs:function(){return(this.json.outputs||[]).map(((e,t)=>({...e,desc:this.returns[e.name||`_${t}`]})))},outputSignature:function(){return`(${this.outputs.map((e=>e.type)).join(",")})`}}},ql=Al(Nl,Fl,[],!1,null,null,null).exports;var Dl=function(){var e=this,t=e._self._c;return t("div",{staticClass:"w-full mt-8"},[t("h2",{staticClass:"text-lg"},[e._v(e._s(e.title))]),e._v(" "),e._l(Object.keys(e.json),(function(n){return t("Member",{key:n,staticClass:"mt-3",attrs:{json:e.json[n]}})}))],2)};Dl._withStripped=!0;var zl=Al({components:{Member:ql},props:{title:{type:String,default:""},json:{type:Object,default:()=>new Object}}},Dl,[],!1,null,null,null);const Bl=Al({components:{Member:ql,MemberSet:zl.exports,HeaderBar:Ll,FooterBar:El},props:{json:{type:Object,default:()=>new Object}}},Pl,[],!1,null,null,null).exports;var $l=function(){var e=this,t=e._self._c;return t("div",{staticClass:"w-full space-y-10 md:max-w-screen-sm lg:max-w-screen-md mx-auto pb-32"},[t("Branch",{attrs:{json:e.trees,name:"Sources:"}}),e._v(" "),t("FooterBar",{staticClass:"mt-20"})],1)};$l._withStripped=!0;var Gl=function(){var e=this,t=e._self._c;return t("div",[e._v("\n  "+e._s(e.name)+"\n  "),Array.isArray(e.json)?t("div",{staticClass:"pl-5"},e._l(e.json,(function(n,a){return t("div",{key:a},[t("router-link",{attrs:{to:`${n.source}:${n.name}`}},[e._v("\n        "+e._s(n.name)+"\n      ")])],1)})),0):t("div",{staticClass:"pl-5"},e._l(Object.keys(e.json),(function(n){return t("div",{key:n},[t("Branch",{attrs:{json:e.json[n],name:n}})],1)})),0)])};Gl._withStripped=!0;var Ul=Al({name:"Branch",props:{name:{type:String,default:null},json:{type:[Object,Array],default:()=>new Object}}},Gl,[],!1,null,null,null);const jl=Al({components:{Branch:Ul.exports,FooterBar:El},props:{json:{type:Object,default:()=>new Object}},computed:{trees:function(){let e={};for(let t in this.json)t.replace("/","//").split(/\/(?=[^\/])/).reduce(function(e,n){if(!n.includes(":"))return e[n]=e[n]||{},e[n];{let[a]=n.split(":");e[a]=e[a]||[],e[a].push(this.json[t])}}.bind(this),e);return e}}},$l,[],!1,null,null,null).exports;Qn.use(Ml);const Wl={"contracts/factories/PerpFactory.sol:PerpFactory":{source:"contracts/factories/PerpFactory.sol",name:"PerpFactory",title:"Factory Contract",author:"volmex.finance [security@volmexlabs.com]",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"PerpSystemCreated(uint256,address,address,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"perpIndex",type:"uint256"},{indexed:!1,internalType:"address",name:"positioning",type:"address"},{indexed:!1,internalType:"address",name:"vaultController",type:"address"},{indexed:!1,internalType:"address",name:"accountBalance",type:"address"},{indexed:!1,internalType:"address",name:"marketRegistry",type:"address"}],name:"PerpSystemCreated",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"TokenCreated(uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"tokenIndex",type:"uint256"},{indexed:!0,internalType:"address",name:"token",type:"address"}],name:"TokenCreated",type:"event"},"VaultCreated(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"}],name:"VaultCreated",type:"event"}},methods:{"CLONES_DEPLOYER()":{inputs:[],name:"CLONES_DEPLOYER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"accountBalanceImplementation()":{inputs:[],name:"accountBalanceImplementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"baseTokenImplementation()":{inputs:[],name:"baseTokenImplementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"cloneBaseToken(string,string,address)":{inputs:[{internalType:"string",name:"_name",type:"string"},{internalType:"string",name:"_symbol",type:"string"},{internalType:"address",name:"_priceFeed",type:"address"}],name:"cloneBaseToken",outputs:[{internalType:"contract IVolmexBaseToken",name:"volmexBaseToken",type:"address"}],stateMutability:"nonpayable",type:"function",details:"Generates a salt using baseTokenIndexCount, token name and token symbolClone the base token implementation with a salt make it deterministicInitializes the base token",params:{_name:"is the name of base token",_priceFeed:"is the address of referenced price oracle",_symbol:"is the symbol of base token"},notice:"Clones the base token - { returns base token address }"},"clonePerpEcosystem(address,address,address,address,address,uint64,address[2])":{inputs:[{internalType:"address",name:"_positioningConfig",type:"address"},{internalType:"address",name:"_matchingEngine",type:"address"},{internalType:"address",name:"_markPriceOracle",type:"address"},{internalType:"address",name:"_indexPriceOracle",type:"address"},{internalType:"address",name:"_quoteToken",type:"address"},{internalType:"uint64",name:"_underlyingPriceIndex",type:"uint64"},{internalType:"address[2]",name:"_liquidators",type:"address[2]"}],name:"clonePerpEcosystem",outputs:[{internalType:"address[4]",name:"perpEcosystem",type:"address[4]"}],stateMutability:"nonpayable",type:"function",returns:{perpEcosystem:"Array of-                      0: AccountBalance                      1: VaultController                      2: Positioning                      3: MarketRegistry"},notice:"Clones the complete perpetual ecosystem"},"cloneQuoteToken(string,string)":{inputs:[{internalType:"string",name:"_name",type:"string"},{internalType:"string",name:"_symbol",type:"string"}],name:"cloneQuoteToken",outputs:[{internalType:"contract IVolmexQuoteToken",name:"volmexQuoteToken",type:"address"}],stateMutability:"nonpayable",type:"function",details:"Generates a salt using quoteTokenIndexCount, token name and token symbolClone the quote token implementation with a salt make it deterministicInitializes the quote token",params:{_name:"is the name of quote token",_symbol:"is the symbol of quote token"},notice:"Clones the quote token - { returns quote token address }"},"cloneVault(address,bool,address,address,address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"bool",name:"_isEthVault",type:"bool"},{internalType:"address",name:"_positioningConfig",type:"address"},{internalType:"address",name:"_accountBalance",type:"address"},{internalType:"address",name:"_vaultImplementation",type:"address"},{internalType:"uint256",name:"_vaultControllerIndex",type:"uint256"}],name:"cloneVault",outputs:[{internalType:"contract IVault",name:"vault",type:"address"}],stateMutability:"nonpayable",type:"function",notice:"Clones the vault"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address,address,address,address,address,address,address,address)":{inputs:[{internalType:"address",name:"_baseTokenImplementation",type:"address"},{internalType:"address",name:"_quoteTokenImplementation",type:"address"},{internalType:"address",name:"_vaultControllerImplementation",type:"address"},{internalType:"address",name:"_vaultImplementation",type:"address"},{internalType:"address",name:"_positioningImplementation",type:"address"},{internalType:"address",name:"_accountBalanceImplementation",type:"address"},{internalType:"contract IVolmexPerpView",name:"_perpViewRegistry",type:"address"},{internalType:"address",name:"_marketRegistryImplementation",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Intializes the Factory and stores the implementations"},"marketRegistryImplementation()":{inputs:[],name:"marketRegistryImplementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"perpViewRegistry()":{inputs:[],name:"perpViewRegistry",outputs:[{internalType:"contract IVolmexPerpView",name:"",type:"address"}],stateMutability:"view",type:"function"},"positioningImplementation()":{inputs:[],name:"positioningImplementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"quoteTokenImplementation()":{inputs:[],name:"quoteTokenImplementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"vaultControllerImplementation()":{inputs:[],name:"vaultControllerImplementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaultImplementation()":{inputs:[],name:"vaultImplementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/funding-rate/FundingRate.sol:FundingRate":{source:"contracts/funding-rate/FundingRate.sol",name:"FundingRate",events:{"FundingUpdated(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"markTwap",type:"uint256"},{indexed:!1,internalType:"uint256",name:"indexTwap",type:"uint256"}],name:"FundingUpdated",type:"event",notice:"event to emit after funding updated"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"PositioningCalleeChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"positioningCallee",type:"address"}],name:"PositioningCalleeChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_ADMIN()":{inputs:[],name:"POSITIONING_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_CALLEE_ADMIN()":{inputs:[],name:"POSITIONING_CALLEE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"defaultFeeReceiver()":{inputs:[],name:"defaultFeeReceiver",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPendingFundingPayment(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getPendingFundingPayment",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"this function calculates pending funding payment of a trader respective to basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"}},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"isLiquidatorWhitelist(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isLiquidatorWhitelist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setPositioning(address)":{inputs:[{internalType:"address",name:"positioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"settleFunding(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"settleFunding",outputs:[{internalType:"int256",name:"fundingPayment",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"this function is used to settle funding f a trader on the basis of given basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"},returns:{fundingPayment:"pnding funding payment on this basetoken"}},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."}}},"contracts/helpers/BlockContext.sol:BlockContext":{source:"contracts/helpers/BlockContext.sol",name:"BlockContext"},"contracts/helpers/MarketRegistry.sol:MarketRegistry":{source:"contracts/helpers/MarketRegistry.sol",name:"MarketRegistry",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"MaxOrdersPerMarketChanged(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"maxOrdersPerMarket",type:"uint8"}],name:"MaxOrdersPerMarketChanged",type:"event",notice:"Emitted when the max orders per market is updated."},"PositioningCalleeChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"positioningCallee",type:"address"}],name:"PositioningCalleeChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MARKET_REGISTRY_ADMIN()":{inputs:[],name:"MARKET_REGISTRY_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_CALLEE_ADMIN()":{inputs:[],name:"POSITIONING_CALLEE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"addBaseToken(address)":{inputs:[{internalType:"address",name:"baseToken",type:"address"}],name:"addBaseToken",outputs:[],stateMutability:"nonpayable",type:"function",details:"Function to add base token in the market",params:{baseToken:"address of the baseToken"}},"checkBaseToken(address)":{inputs:[{internalType:"address",name:"baseToken",type:"address"}],name:"checkBaseToken",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Function to check base token in the market",params:{baseToken:"address of the baseToken"}},"getMakerFeeRatio()":{inputs:[],name:"getMakerFeeRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",notice:"Get the maker fee ration"},"getMaxOrdersPerMarket()":{inputs:[],name:"getMaxOrdersPerMarket",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",returns:{_0:"The max allowed orders per market"},notice:"Get max allowed orders per market"},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getQuoteToken()":{inputs:[],name:"getQuoteToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"The address of the quote token"},notice:"Get the quote token address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTakerFeeRatio()":{inputs:[],name:"getTakerFeeRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",notice:"Get the taker fee ration"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address)":{inputs:[{internalType:"address",name:"quoteTokenArg",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMakerFeeRatio(uint24)":{inputs:[{internalType:"uint24",name:"makerFeeRatio",type:"uint24"}],name:"setMakerFeeRatio",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set maker fee ratio",params:{makerFeeRatio:"The maker fee ratio"}},"setMaxOrdersPerMarket(uint8)":{inputs:[{internalType:"uint8",name:"maxOrdersPerMarketArg",type:"uint8"}],name:"setMaxOrdersPerMarket",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set max allowed orders per market",params:{maxOrdersPerMarketArg:"The max allowed orders per market"}},"setPositioning(address)":{inputs:[{internalType:"address",name:"positioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"setTakerFeeRatio(uint24)":{inputs:[{internalType:"uint24",name:"takerFeeRatio",type:"uint24"}],name:"setTakerFeeRatio",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set taker fee ratio",params:{takerFeeRatio:"The taker fee ratio"}},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."}}},"contracts/helpers/OwnerPausable.sol:OwnerPausable":{source:"contracts/helpers/OwnerPausable.sol",name:"OwnerPausable",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/helpers/PositioningCallee.sol:PositioningCallee":{source:"contracts/helpers/PositioningCallee.sol",name:"PositioningCallee",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"PositioningCalleeChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"positioningCallee",type:"address"}],name:"PositioningCalleeChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_CALLEE_ADMIN()":{inputs:[],name:"POSITIONING_CALLEE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setPositioning(address)":{inputs:[{internalType:"address",name:"positioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."}}},"contracts/interfaces/IAccountBalance.sol:IAccountBalance":{source:"contracts/interfaces/IAccountBalance.sol",name:"IAccountBalance",events:{"PnlRealized(address,address,int256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"amount",type:"int256"}],name:"PnlRealized",type:"event",details:"Emit whenever a trader's `owedRealizedPnl` is updated",params:{amount:"The amount changed",trader:"The address of the trader"}},"UnderlyingPriceIndexSet(uint64)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint64",name:"underlyingIndex",type:"uint64"}],name:"UnderlyingPriceIndexSet",type:"event",details:"Emit when underlying price index is set"},"VaultChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"}],name:"VaultChanged",type:"event",params:{vault:"The address of the vault contract"}}},methods:{"getAccountInfo(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getAccountInfo",outputs:[{components:[{internalType:"int256",name:"positionSize",type:"int256"},{internalType:"int256",name:"openNotional",type:"int256"}],internalType:"struct LibAccountMarket.Info",name:"",type:"tuple"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"traderAccountInfo The baseToken account info of trader"},notice:"Get trader account info"},"getBaseTokens(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getBaseTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",params:{trader:"The address of trader"},returns:{_0:"baseTokens The array of baseToken address"},notice:"Get trader registered baseTokens"},"getLiquidatablePositionSize(address,address,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"accountValue",type:"int256"}],name:"getLiquidatablePositionSize",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",params:{accountValue:"The account value of trader",baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"liquidatablePositionSize The liquidatable position size of trader's baseToken market"},notice:"Get liquidatable position size of trader's baseToken market"},"getMarginRequirementForLiquidation(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getMarginRequirementForLiquidation",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"This is different from `Vault._getTotalMarginRequirement()`, which is for freeCollateral calculation",params:{trader:"The address of trader"},returns:{_0:"marginRequirementForLiquidation It is compared with `Positioning.getAccountValue`"},notice:"Get margin requirement to check whether trader will be able to liquidate"},"getOpenNotional(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getOpenNotional",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"openNotional The taker cost of trader's baseToken"},notice:"Get taker cost of trader's baseToken"},"getPnlAndPendingFee(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getPnlAndPendingFee",outputs:[{internalType:"int256",name:"owedRealizedPnl",type:"int256"},{internalType:"int256",name:"unrealizedPnl",type:"int256"}],stateMutability:"view",type:"function",params:{trader:"The address of trader"},returns:{owedRealizedPnl:"the pnl realized already but stored temporarily in AccountBalance",unrealizedPnl:"the pnl not yet realized"},notice:"Get owedRealizedPnl, realizedPnl and pending fee"},"getPositionSize(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getPositionSize",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"This will only has taker position, can get maker impermanent position through `getTotalPositionSize`",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"takerPositionSize The taker position size of trader's baseToken market"},notice:"Get taker position size of trader's baseToken market"},"getPositioningConfig()":{inputs:[],name:"getPositioningConfig",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"PositioningConfig The address of PositioningConfig"},notice:"Get `PositioningConfig` address"},"getTotalAbsPositionValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getTotalAbsPositionValue",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{trader:"The address of trader"},returns:{_0:"totalAbsPositionValue Sum up positions value of every market"},notice:"Get all market position abs value of trader"},"getTotalDebtValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getTotalDebtValue",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Total debt value will relate to `Vault.getFreeCollateral()`",params:{trader:"The address of trader"},returns:{_0:"totalDebtValue The debt value of trader"},notice:"Get total debt value of trader"},"getTotalPositionValue(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getTotalPositionValue",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"A negative returned value is only be used when calculating pnl,we use `15 mins` twap to calc position value",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"totalPositionValue Total position value of trader's baseToken market"},notice:"Get total position value of trader's baseToken market"},"initialize(address)":{inputs:[{internalType:"address",name:"positioningConfigArg",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"modifyOwedRealizedPnl(address,int256,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"int256",name:"amount",type:"int256"},{internalType:"address",name:"baseToken",type:"address"}],name:"modifyOwedRealizedPnl",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only used by `Positioning` contract",params:{amount:"Modified amount of owedRealizedPnl",trader:"The address of the trader"},notice:"Modify trader owedRealizedPnl"},"registerBaseToken(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"registerBaseToken",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only used by `Positioning` contract",params:{baseToken:"The address of the trader's base token",trader:"The address of the trader"},notice:"Every time a trader's position value is checked, the base token list of this trader will be traversed; thus, this list should be kept as short as possible"},"settleBalanceAndDeregister(address,address,int256,int256,int256,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"takerBase",type:"int256"},{internalType:"int256",name:"takerQuote",type:"int256"},{internalType:"int256",name:"realizedPnl",type:"int256"},{internalType:"int256",name:"fee",type:"int256"}],name:"settleBalanceAndDeregister",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"Only used by `Positioning` contract",params:{baseToken:"The address of the baseToken",fee:"Amount of maker fee collected from pool",realizedPnl:"Amount of pnl realized",takerBase:"Modified amount of taker base",takerQuote:"Modified amount of taker quote",trader:"The address of the trader"},notice:"Settle account balance and deregister base token"},"settleOwedRealizedPnl(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"settleOwedRealizedPnl",outputs:[{internalType:"int256",name:"pnl",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"Only used by `Vault.withdraw()`",params:{trader:"The address of the trader"},returns:{pnl:"Settled owedRealizedPnl"},notice:"Settle owedRealizedPnl"}}},"contracts/interfaces/IAssetMatcher.sol:IAssetMatcher":{source:"contracts/interfaces/IAssetMatcher.sol",name:"IAssetMatcher",methods:{"_matchAssets(address,address)":{inputs:[{internalType:"address",name:"leftBaseToken",type:"address"},{internalType:"address",name:"rightBaseToken",type:"address"}],name:"_matchAssets",outputs:[{internalType:"address",name:"baseToken",type:"address"}],stateMutability:"pure",type:"function"}}},"contracts/interfaces/IChainlinkIndexPriceOracle.sol:IChainlinkIndexPriceOracle":{source:"contracts/interfaces/IChainlinkIndexPriceOracle.sol",name:"IChainlinkIndexPriceOracle",methods:{"latestRoundData(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"latestRoundData",outputs:[{internalType:"uint80",name:"roundId",type:"uint80"},{internalType:"int256",name:"answer",type:"int256"},{internalType:"uint256",name:"startedAt",type:"uint256"},{internalType:"uint256",name:"updatedAt",type:"uint256"},{internalType:"uint80",name:"answeredInRound",type:"uint80"}],stateMutability:"view",type:"function"}}},"contracts/interfaces/IERC1271.sol:IERC1271":{source:"contracts/interfaces/IERC1271.sol",name:"IERC1271",methods:{"isValidSignature(bytes32,bytes)":{inputs:[{internalType:"bytes32",name:"_hash",type:"bytes32"},{internalType:"bytes",name:"_signature",type:"bytes"}],name:"isValidSignature",outputs:[{internalType:"bytes4",name:"magicValue",type:"bytes4"}],stateMutability:"view",type:"function",details:"Should return whether the signature provided is valid for the provided data",params:{_hash:"Hash of the data signed on the behalf of address(this)",_signature:"Signature byte array associated with _data MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls"}}}},"contracts/interfaces/IERC20Metadata.sol:IERC20Metadata":{source:"contracts/interfaces/IERC20Metadata.sol",name:"IERC20Metadata",details:"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens owned by `account`."},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the decimals places of the token."},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens in existence."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}},"contracts/interfaces/IERC20Modified.sol:IERC20Modified":{source:"contracts/interfaces/IERC20Modified.sol",name:"IERC20Modified",methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"burn(address,uint256)":{inputs:[{internalType:"address",name:"_whose",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"_toWhom",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy":{source:"contracts/interfaces/IERC20TransferProxy.sol",name:"IERC20TransferProxy",methods:{"erc20SafeTransferFrom(address,address,address,uint256)":{inputs:[{internalType:"contract IERC20Upgradeable",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"erc20SafeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/IFundingRate.sol:IFundingRate":{source:"contracts/interfaces/IFundingRate.sol",name:"IFundingRate",events:{"FundingUpdated(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"markTwap",type:"uint256"},{indexed:!1,internalType:"uint256",name:"indexTwap",type:"uint256"}],name:"FundingUpdated",type:"event",notice:"event to emit after funding updated"}},methods:{"getPendingFundingPayment(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getPendingFundingPayment",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"this function calculates pending funding payment of a trader respective to basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"}},"settleFunding(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"settleFunding",outputs:[{internalType:"int256",name:"fundingPayment",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"this function is used to settle funding f a trader on the basis of given basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"},returns:{fundingPayment:"pnding funding payment on this basetoken"}}}},"contracts/interfaces/IIndexPrice.sol:IIndexPrice":{source:"contracts/interfaces/IIndexPrice.sol",name:"IIndexPrice",methods:{"getIndexPrice(uint256)":{inputs:[{internalType:"uint256",name:"interval",type:"uint256"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"indexPrice",type:"uint256"}],stateMutability:"view",type:"function",params:{interval:"The interval represents twap interval."},returns:{indexPrice:"Twap price with interval"},notice:"Returns the index price of the token."}}},"contracts/interfaces/IIndexPriceOracle.sol:IIndexPriceOracle":{source:"contracts/interfaces/IIndexPriceOracle.sol",name:"IIndexPriceOracle",events:{"BaseVolatilityIndexUpdated(uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"baseVolatilityIndex",type:"uint256"}],name:"BaseVolatilityIndexUpdated",type:"event"},"BatchVolatilityTokenPriceUpdated(uint256[],uint256[],bytes32[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256[]",name:"_volatilityIndexes",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"_volatilityTokenPrices",type:"uint256[]"},{indexed:!1,internalType:"bytes32[]",name:"_proofHashes",type:"bytes32[]"}],name:"BatchVolatilityTokenPriceUpdated",type:"event"},"LeveragedVolatilityIndexAdded(uint256,uint256,string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"volatilityTokenIndex",type:"uint256"},{indexed:!1,internalType:"uint256",name:"volatilityCapRatio",type:"uint256"},{indexed:!1,internalType:"string",name:"volatilityTokenSymbol",type:"string"},{indexed:!1,internalType:"uint256",name:"leverage",type:"uint256"},{indexed:!1,internalType:"uint256",name:"baseVolatilityIndex",type:"uint256"}],name:"LeveragedVolatilityIndexAdded",type:"event"},"SymbolIndexUpdated(uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"_index",type:"uint256"}],name:"SymbolIndexUpdated",type:"event"},"VolatilityIndexAdded(uint256,uint256,string,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"volatilityTokenIndex",type:"uint256"},{indexed:!1,internalType:"uint256",name:"volatilityCapRatio",type:"uint256"},{indexed:!1,internalType:"string",name:"volatilityTokenSymbol",type:"string"},{indexed:!1,internalType:"uint256",name:"volatilityTokenPrice",type:"uint256"}],name:"VolatilityIndexAdded",type:"event"}},methods:{"addVolatilityIndex(uint256,address,string,uint256,uint256,bytes32)":{inputs:[{internalType:"uint256",name:"_volatilityTokenPrice",type:"uint256"},{internalType:"contract IVolmexProtocol",name:"_protocol",type:"address"},{internalType:"string",name:"_volatilityTokenSymbol",type:"string"},{internalType:"uint256",name:"_leverage",type:"uint256"},{internalType:"uint256",name:"_baseVolatilityIndex",type:"uint256"},{internalType:"bytes32",name:"_proofHash",type:"bytes32"}],name:"addVolatilityIndex",outputs:[],stateMutability:"nonpayable",type:"function"},"baseVolatilityIndex(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"baseVolatilityIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getIndexTwap(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"getIndexTwap",outputs:[{internalType:"uint256",name:"volatilityTokenTwap",type:"uint256"},{internalType:"uint256",name:"iVolatilityTokenTwap",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function"},"getVolatilityPriceBySymbol(string)":{inputs:[{internalType:"string",name:"_volatilityTokenSymbol",type:"string"}],name:"getVolatilityPriceBySymbol",outputs:[{internalType:"uint256",name:"volatilityTokenPrice",type:"uint256"},{internalType:"uint256",name:"iVolatilityTokenPrice",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function"},"getVolatilityTokenPriceByIndex(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"getVolatilityTokenPriceByIndex",outputs:[{internalType:"uint256",name:"volatilityTokenPrice",type:"uint256"},{internalType:"uint256",name:"iVolatilityTokenPrice",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function"},"indexCount()":{inputs:[],name:"indexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"latestRoundData(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"latestRoundData",outputs:[{internalType:"uint256",name:"answer",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function"},"updateBaseVolatilityIndex(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_leverageVolatilityIndex",type:"uint256"},{internalType:"uint256",name:"_newBaseVolatilityIndex",type:"uint256"}],name:"updateBaseVolatilityIndex",outputs:[],stateMutability:"nonpayable",type:"function"},"updateBatchVolatilityTokenPrice(uint256[],uint256[],bytes32[])":{inputs:[{internalType:"uint256[]",name:"_volatilityIndexes",type:"uint256[]"},{internalType:"uint256[]",name:"_volatilityTokenPrices",type:"uint256[]"},{internalType:"bytes32[]",name:"_proofHashes",type:"bytes32[]"}],name:"updateBatchVolatilityTokenPrice",outputs:[],stateMutability:"nonpayable",type:"function"},"updateIndexBySymbol(string,uint256)":{inputs:[{internalType:"string",name:"_tokenSymbol",type:"string"},{internalType:"uint256",name:"_index",type:"uint256"}],name:"updateIndexBySymbol",outputs:[],stateMutability:"nonpayable",type:"function"},"volatilityCapRatioByIndex(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"volatilityCapRatioByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityIndexBySymbol(string)":{inputs:[{internalType:"string",name:"_tokenSymbol",type:"string"}],name:"volatilityIndexBySymbol",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityLastUpdateTimestamp(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"volatilityLastUpdateTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityLeverageByIndex(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"volatilityLeverageByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityTokenPriceProofHash(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"volatilityTokenPriceProofHash",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}}},"contracts/interfaces/IMarkPriceOracle.sol:IMarkPriceOracle":{source:"contracts/interfaces/IMarkPriceOracle.sol",name:"IMarkPriceOracle",methods:{"addAssets(uint256[],address[])":{inputs:[{internalType:"uint256[]",name:"_priceCumulative",type:"uint256[]"},{internalType:"address[]",name:"_asset",type:"address[]"}],name:"addAssets",outputs:[],stateMutability:"nonpayable",type:"function"},"addObservation(uint256,uint64)":{inputs:[{internalType:"uint256",name:"_priceCumulative",type:"uint256"},{internalType:"uint64",name:"_index",type:"uint64"}],name:"addObservation",outputs:[],stateMutability:"nonpayable",type:"function"},"exchange()":{inputs:[],name:"exchange",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getCumulativePrice(uint256,uint64)":{inputs:[{internalType:"uint256",name:"_twInterval",type:"uint256"},{internalType:"uint64",name:"_index",type:"uint64"}],name:"getCumulativePrice",outputs:[{internalType:"uint256",name:"priceCumulative",type:"uint256"}],stateMutability:"view",type:"function"},"indexByBaseToken(address)":{inputs:[{internalType:"address",name:"_baseToken",type:"address"}],name:"indexByBaseToken",outputs:[{internalType:"uint64",name:"_index",type:"uint64"}],stateMutability:"view",type:"function"}}},"contracts/interfaces/IMarketRegistry.sol:IMarketRegistry":{source:"contracts/interfaces/IMarketRegistry.sol",name:"IMarketRegistry",events:{"MaxOrdersPerMarketChanged(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"maxOrdersPerMarket",type:"uint8"}],name:"MaxOrdersPerMarketChanged",type:"event",params:{maxOrdersPerMarket:"Max orders per market"},notice:"Emitted when the max orders per market is updated."}},methods:{"addBaseToken(address)":{inputs:[{internalType:"address",name:"baseToken",type:"address"}],name:"addBaseToken",outputs:[],stateMutability:"nonpayable",type:"function",details:"Function to add base token in the market",params:{baseToken:"address of the baseToken"}},"checkBaseToken(address)":{inputs:[{internalType:"address",name:"baseToken",type:"address"}],name:"checkBaseToken",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Function to check base token in the market",params:{baseToken:"address of the baseToken"}},"getMakerFeeRatio()":{inputs:[],name:"getMakerFeeRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",notice:"Get the maker fee ration"},"getMaxOrdersPerMarket()":{inputs:[],name:"getMaxOrdersPerMarket",outputs:[{internalType:"uint8",name:"maxOrdersPerMarket",type:"uint8"}],stateMutability:"view",type:"function",returns:{maxOrdersPerMarket:"The max allowed orders per market"},notice:"Get max allowed orders per market"},"getQuoteToken()":{inputs:[],name:"getQuoteToken",outputs:[{internalType:"address",name:"quoteToken",type:"address"}],stateMutability:"view",type:"function",returns:{quoteToken:"The address of the quote token"},notice:"Get the quote token address"},"getTakerFeeRatio()":{inputs:[],name:"getTakerFeeRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",notice:"Get the taker fee ration"},"initialize(address)":{inputs:[{internalType:"address",name:"quoteTokenArg",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"setMakerFeeRatio(uint24)":{inputs:[{internalType:"uint24",name:"makerFeeRatio",type:"uint24"}],name:"setMakerFeeRatio",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set maker fee ratio",params:{makerFeeRatio:"The maker fee ratio"}},"setMaxOrdersPerMarket(uint8)":{inputs:[{internalType:"uint8",name:"maxOrdersPerMarketArg",type:"uint8"}],name:"setMaxOrdersPerMarket",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set max allowed orders per market",params:{maxOrdersPerMarketArg:"The max allowed orders per market"}},"setTakerFeeRatio(uint24)":{inputs:[{internalType:"uint24",name:"takerFeeRatio",type:"uint24"}],name:"setTakerFeeRatio",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set taker fee ratio",params:{takerFeeRatio:"The taker fee ratio"}}}},"contracts/interfaces/IMatchingEngine.sol:IMatchingEngine":{source:"contracts/interfaces/IMatchingEngine.sol",name:"IMatchingEngine",methods:{"cancelAllOrders(uint256)":{inputs:[{internalType:"uint256",name:"minSalt",type:"uint256"}],name:"cancelAllOrders",outputs:[],stateMutability:"nonpayable",type:"function"},"cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"cancelOrder",outputs:[],stateMutability:"nonpayable",type:"function"},"cancelOrdersInBatch((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[])":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"orders",type:"tuple[]"}],name:"cancelOrdersInBatch",outputs:[],stateMutability:"nonpayable",type:"function"},"fills(bytes32)":{inputs:[{internalType:"bytes32",name:"orderHashKey",type:"bytes32"}],name:"fills",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"grantMatchOrders(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"grantMatchOrders",outputs:[],stateMutability:"nonpayable",type:"function"},"matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderLeft",type:"tuple"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderRight",type:"tuple"}],name:"matchOrders",outputs:[{components:[{internalType:"uint256",name:"leftValue",type:"uint256"},{internalType:"uint256",name:"rightValue",type:"uint256"}],internalType:"struct LibFill.FillResult",name:"",type:"tuple"}],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/IPerpFactory.sol:IPerpFactory":{source:"contracts/interfaces/IPerpFactory.sol",name:"IPerpFactory",events:{"PerpSystemCreated(uint256,address,address,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"perpIndex",type:"uint256"},{indexed:!1,internalType:"address",name:"positioning",type:"address"},{indexed:!1,internalType:"address",name:"vaultController",type:"address"},{indexed:!1,internalType:"address",name:"accountBalance",type:"address"},{indexed:!1,internalType:"address",name:"marketRegistry",type:"address"}],name:"PerpSystemCreated",type:"event"},"TokenCreated(uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"tokenIndex",type:"uint256"},{indexed:!0,internalType:"address",name:"token",type:"address"}],name:"TokenCreated",type:"event"},"VaultCreated(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"}],name:"VaultCreated",type:"event"}}},"contracts/interfaces/IPositioning.sol:IPositioning":{source:"contracts/interfaces/IPositioning.sol",name:"IPositioning",events:{"DefaultFeeReceiverChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"defaultFeeReceiver",type:"address"}],name:"DefaultFeeReceiverChanged",type:"event",notice:"Emitted when defualt fee receiver is changed"},"FundingIntervalSet(int256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"int256",name:"fundingInterval",type:"int256"}],name:"FundingIntervalSet",type:"event"},"FundingPaymentSettled(address,address,int256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"fundingPayment",type:"int256"}],name:"FundingPaymentSettled",type:"event",params:{baseToken:"The address of virtual base token(ETH, BTC, etc...)",fundingPayment:"The fundingPayment of trader on baseToken market, > 0: payment, < 0 : receipt",trader:"The address of trader"},notice:"Emitted when settling a trader's funding payment"},"IndexPriceSet(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"indexPriceOracle",type:"address"}],name:"IndexPriceSet",type:"event"},"LiquidatorWhitelisted(address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"liquidator",type:"address"},{indexed:!1,internalType:"bool",name:"isWhitelist",type:"bool"}],name:"LiquidatorWhitelisted",type:"event",notice:"Emitted when liquidator is whitelisted or removed"},"PositionChanged(address,address,int256,int256,uint256,uint256,bytes4,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"exchangedPositionSize",type:"int256"},{indexed:!1,internalType:"int256",name:"exchangedPositionNotional",type:"int256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"orderIndexPrice",type:"uint256"},{indexed:!1,internalType:"bytes4",name:"orderType",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isShort",type:"bool"}],name:"PositionChanged",type:"event",params:{baseToken:"The address of virtual base token(ETH, BTC, etc...)",exchangedPositionNotional:"The cost of position, include fee",exchangedPositionSize:"The actual amount swap to uniswapV3 pool",fee:"The fee of open/close position",trader:"Trader address"},notice:"Emitted when taker's position is being changed"},"PositionLiquidated(address,address,uint256,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"positionNotional",type:"uint256"},{indexed:!1,internalType:"uint256",name:"positionSize",type:"uint256"},{indexed:!1,internalType:"uint256",name:"liquidationFee",type:"uint256"},{indexed:!1,internalType:"address",name:"liquidator",type:"address"}],name:"PositionLiquidated",type:"event",params:{baseToken:"Virtual base token(ETH, BTC, etc...) address",liquidationFee:"The fee of liquidate",liquidator:"The address of liquidator",positionNotional:"The cost of position",positionSize:"The size of position",trader:"The trader who has been liquidated"},notice:"Emitted when taker position is being liquidated"},"ReferredPositionChanged(bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"referralCode",type:"bytes32"}],name:"ReferredPositionChanged",type:"event",params:{referralCode:"The referral code by partners"},notice:"Emitted when open position with non-zero referral code"},"TrustedForwarderChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"forwarder",type:"address"}],name:"TrustedForwarderChanged",type:"event",details:"TrustedForward is only used for metaTx",params:{forwarder:"The trusted forwarder address"},notice:"Emitted when trusted forwarder address changed"}},methods:{"getAccountBalance()":{inputs:[],name:"getAccountBalance",outputs:[{internalType:"address",name:"accountBalance",type:"address"}],stateMutability:"view",type:"function",returns:{accountBalance:"`AccountBalance` address"},notice:"Get AccountBalance address"},"getAllPendingFundingPayment(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getAllPendingFundingPayment",outputs:[{internalType:"int256",name:"pendingFundingPayment",type:"int256"}],stateMutability:"view",type:"function",params:{trader:"address of the trader"},returns:{pendingFundingPayment:" total pending funding"},notice:"Get total pending funding payment of trader"},"getLiquidatablePosition(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getLiquidatablePosition",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},notice:"Get position size of a trader to be liquidated"},"getPnlToBeRealized((address,address,int256,int256))":{inputs:[{components:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"base",type:"int256"},{internalType:"int256",name:"quote",type:"int256"}],internalType:"struct IPositioning.RealizePnlParams",name:"params",type:"tuple"}],name:"getPnlToBeRealized",outputs:[{internalType:"int256",name:"pnlToBeRealized",type:"int256"}],stateMutability:"view",type:"function",details:"This function normally won't be needed by traders, but it might be useful for 3rd party",params:{params:"The params needed to do the query, encoded as `RealizePnlParams` in calldata"},returns:{pnlToBeRealized:"The pnl that can be realized if trader reduce position"},notice:"Get the pnl that can be realized if trader reduce position"},"getPositioningConfig()":{inputs:[],name:"getPositioningConfig",outputs:[{internalType:"address",name:"PositioningConfig",type:"address"}],stateMutability:"view",type:"function",returns:{PositioningConfig:"PositioningConfig address"},notice:"Get PositioningConfig address"},"getVaultController()":{inputs:[],name:"getVaultController",outputs:[{internalType:"address",name:"vault",type:"address"}],stateMutability:"view",type:"function",returns:{vault:"`Vault` address"},notice:"Get `Vault` address"},"initialize(address,address,address,address,address,address,uint64,address[2])":{inputs:[{internalType:"address",name:"positioningConfigArg",type:"address"},{internalType:"address",name:"vaultControllerArg",type:"address"},{internalType:"address",name:"accountBalanceArg",type:"address"},{internalType:"address",name:"matchingEngineArg",type:"address"},{internalType:"address",name:"markPriceArg",type:"address"},{internalType:"address",name:"indexPriceArg",type:"address"},{internalType:"uint64",name:"underlyingPriceIndex",type:"uint64"},{internalType:"address[2]",name:"liquidators",type:"address[2]"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"this function is public for testing"},"liquidate(address,address,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"positionSize",type:"int256"}],name:"liquidate",outputs:[],stateMutability:"nonpayable",type:"function",details:"If trader has open orders, need to call `cancelAllExcessOrders` firstIf positionSize is greater than maxLiquidatePositionSize, liquidate maxLiquidatePositionSize by defaultIf margin ratio >= 0.5 * mmRatio,         maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1maxLiquidatePositionSize = positionSize * maxLiquidateRatio",params:{baseToken:"The address of baseToken",positionSize:"the position size to be liquidated by liquidator",trader:"The address of trader"},notice:"If trader is underwater, any one can call `liquidate` to liquidate this trader"},"liquidateFullPosition(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"liquidateFullPosition",outputs:[],stateMutability:"nonpayable",type:"function",details:"If margin ratio >= 0.5 * mmRatio, maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1maxLiquidatePositionSize = positionSize * maxLiquidateRatio",params:{baseToken:"The address of baseToken",trader:"The address of trader"},notice:"liquidate trader's position and will liquidate the max possible position size"},"openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderLeft",type:"tuple"},{internalType:"bytes",name:"signatureLeft",type:"bytes"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderRight",type:"tuple"},{internalType:"bytes",name:"signatureRight",type:"bytes"},{internalType:"bytes",name:"liquidator",type:"bytes"}],name:"openPosition",outputs:[],stateMutability:"nonpayable",type:"function",params:{orderLeft:"PositionParams struct",orderRight:"PositionParams struct"},notice:"Trader can call `openPosition` to long/short on baseToken market"},"setDefaultFeeReceiver(address)":{inputs:[{internalType:"address",name:"newDefaultFeeReceiver",type:"address"}],name:"setDefaultFeeReceiver",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Function to set fee receiver"},"setFundingInterval(int256)":{inputs:[{internalType:"int256",name:"interval",type:"int256"}],name:"setFundingInterval",outputs:[],stateMutability:"nonpayable",type:"function",params:{interval:"denominator for 24 hours and get interval value, eg 24/3 = 8 hour interval of funding payment"},notice:"Update funding rate inteval"},"settleAllFunding(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"settleAllFunding",outputs:[],stateMutability:"nonpayable",type:"function",params:{trader:"The address of trader"},notice:"Settle all markets fundingPayment to owedRealized Pnl"},"whitelistLiquidator(address,bool)":{inputs:[{internalType:"address",name:"liquidator",type:"address"},{internalType:"bool",name:"isWhitelist",type:"bool"}],name:"whitelistLiquidator",outputs:[],stateMutability:"nonpayable",type:"function",params:{isWhitelist:"if true, whitelist. is false remove whitelist"},notice:"Update whitelist for a liquidator"}}},"contracts/interfaces/IPositioningConfig.sol:IPositioningConfig":{source:"contracts/interfaces/IPositioningConfig.sol",name:"IPositioningConfig",methods:{"getImRatio()":{inputs:[],name:"getImRatio",outputs:[{internalType:"uint24",name:"imRatio",type:"uint24"}],stateMutability:"view",type:"function",returns:{imRatio:"Initial margin ratio"}},"getLiquidationPenaltyRatio()":{inputs:[],name:"getLiquidationPenaltyRatio",outputs:[{internalType:"uint24",name:"liquidationPenaltyRatio",type:"uint24"}],stateMutability:"view",type:"function",returns:{liquidationPenaltyRatio:"Liquidation penalty ratio"}},"getMaxFundingRate()":{inputs:[],name:"getMaxFundingRate",outputs:[{internalType:"uint24",name:"maxFundingRate",type:"uint24"}],stateMutability:"view",type:"function",returns:{maxFundingRate:"Max value of funding rate"}},"getMaxMarketsPerAccount()":{inputs:[],name:"getMaxMarketsPerAccount",outputs:[{internalType:"uint8",name:"maxMarketsPerAccount",type:"uint8"}],stateMutability:"view",type:"function",returns:{maxMarketsPerAccount:"Max value of total markets per account"}},"getMmRatio()":{inputs:[],name:"getMmRatio",outputs:[{internalType:"uint24",name:"mmRatio",type:"uint24"}],stateMutability:"view",type:"function",returns:{mmRatio:"Maintenance margin requirement ratio"}},"getPartialCloseRatio()":{inputs:[],name:"getPartialCloseRatio",outputs:[{internalType:"uint24",name:"partialCloseRatio",type:"uint24"}],stateMutability:"view",type:"function",returns:{partialCloseRatio:"Partial close ratio"}},"getPartialLiquidationRatio()":{inputs:[],name:"getPartialLiquidationRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",returns:{_0:"partial liquidation ratio"}},"getSettlementTokenBalanceCap()":{inputs:[],name:"getSettlementTokenBalanceCap",outputs:[{internalType:"uint256",name:"settlementTokenBalanceCap",type:"uint256"}],stateMutability:"view",type:"function",returns:{settlementTokenBalanceCap:"Max value of settlement token balance"}},"getTwapInterval()":{inputs:[],name:"getTwapInterval",outputs:[{internalType:"uint32",name:"twapInterval",type:"uint32"}],stateMutability:"view",type:"function",returns:{twapInterval:"TwapInterval for funding and prices (mark & index) calculations"}}}},"contracts/interfaces/ITransferExecutor.sol:ITransferExecutor":{source:"contracts/interfaces/ITransferExecutor.sol",name:"ITransferExecutor",methods:{"transfer((address,uint256),address,address,address)":{inputs:[{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"asset",type:"tuple"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"address",name:"proxy",type:"address"}],name:"transfer",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/ITransferManager.sol:ITransferManager":{source:"contracts/interfaces/ITransferManager.sol",name:"ITransferManager"},"contracts/interfaces/ITransferProxy.sol:ITransferProxy":{source:"contracts/interfaces/ITransferProxy.sol",name:"ITransferProxy",methods:{"transfer((address,uint256),address,address)":{inputs:[{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"asset",type:"tuple"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"}],name:"transfer",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/IVault.sol:IVault":{source:"contracts/interfaces/IVault.sol",name:"IVault",events:{"BorrowFund(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"from",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"BorrowFund",type:"event",params:{amount:"The amount needed to the vault",from:"The address which send the fund"},notice:"Emitted when vault borrow the amount"},"DebtRepayed(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"DebtRepayed",type:"event",params:{amount:"The amount of the fund",to:"The address which fund was refunded"},notice:"Emitted when vault repay the debt"},"Deposited(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"collateralToken",type:"address"},{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposited",type:"event",params:{amount:"The amount of token that was deposited",collateralToken:"The address of token that was deposited",trader:"The address of trader"},notice:"Emitted when trader deposit collateral into vault"},"LowBalance(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"LowBalance",type:"event",params:{amount:"The amount needed to the vault"},notice:"Emitted when vault have low balance"},"Withdrawn(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"collateralToken",type:"address"},{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdrawn",type:"event",params:{amount:"The amount of token that was withdrawn",collateralToken:"The address of token that was withdrawn",trader:"The address of trader"},notice:"Emitted when trader withdraw collateral from vault"}},methods:{"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"decimals",type:"uint8"}],stateMutability:"view",type:"function",details:"cached the settlement token's decimal for gas optimization",returns:{decimals:"The decimals of settlement token"},notice:"Get settlement token decimals"},"deposit(address,uint256,address)":{inputs:[{internalType:"contract IVolmexPerpPeriphery",name:"periphery",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"from",type:"address"}],name:"deposit",outputs:[],stateMutability:"payable",type:"function",params:{amount:"The amount of the token to deposit",from:"The address of the trader"},notice:"Deposit collateral into vault"},"getAccountBalance()":{inputs:[],name:"getAccountBalance",outputs:[{internalType:"address",name:"accountBalance",type:"address"}],stateMutability:"view",type:"function",returns:{accountBalance:"The address of `AccountBalance` contract"},notice:"Get `AccountBalance` contract address"},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Positioning The address of `Positioning` contract"},notice:"Get `Positioning` contract address"},"getPositioningConfig()":{inputs:[],name:"getPositioningConfig",outputs:[{internalType:"address",name:"PositioningConfig",type:"address"}],stateMutability:"view",type:"function",returns:{PositioningConfig:"The address of `PositioningConfig` contract"},notice:"Get `PositioningConfig` contract address"},"getSettlementToken()":{inputs:[],name:"getSettlementToken",outputs:[{internalType:"address",name:"settlementToken",type:"address"}],stateMutability:"view",type:"function",returns:{settlementToken:"The address of settlement token"},notice:"Get settlement token address"},"getTotalDebt()":{inputs:[],name:"getTotalDebt",outputs:[{internalType:"uint256",name:"debtAmount",type:"uint256"}],stateMutability:"view",type:"function",returns:{debtAmount:"The debt amount"},notice:"Get the debt amount in vault"},"getVaultController()":{inputs:[],name:"getVaultController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Get `Vault controller` contract address"},"initialize(address,address,address,address,bool)":{inputs:[{internalType:"address",name:"PositioningConfigArg",type:"address"},{internalType:"address",name:"accountBalanceArg",type:"address"},{internalType:"address",name:"tokenArg",type:"address"},{internalType:"address",name:"vaultControllerArg",type:"address"},{internalType:"bool",name:"isEthVaultArg",type:"bool"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"isEthVault()":{inputs:[],name:"isEthVault",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"repayDebtToOwner(address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"repayDebtToOwner",outputs:[],stateMutability:"nonpayable",type:"function",details:"once multi-collateral is implemented, the token is not limited to settlementToken",params:{amount:"The amount of the token to withdraw",token:"The address of the token"},notice:"function to repay debt taken during low balance period"},"setPositioning(address)":{inputs:[{internalType:"address",name:"PositioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Set positioning contract"},"setSettlementToken(address)":{inputs:[{internalType:"address",name:"newTokenArg",type:"address"}],name:"setSettlementToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{newTokenArg:"The address of `Positioning` contract"},notice:"Set new settlement token"},"setVaultController(address)":{inputs:[{internalType:"address",name:"vaultControllerArg",type:"address"}],name:"setVaultController",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Set vault controller contract"},"transferFundToVault(address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFundToVault",outputs:[],stateMutability:"nonpayable",type:"function",details:"once multi-collateral is implemented, the token is not limited to settlementToken",params:{amount:"The amount of the token to withdraw",token:"The address of the token vault need funding"},notice:"transfer fund to vault in case of low balance"},"withdraw(uint256,address)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"to",type:"address"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"The amount of the token to withdraw",to:"The address of the trader"},notice:"Withdraw collateral from vault"}}},"contracts/interfaces/IVaultController.sol:IVaultController":{source:"contracts/interfaces/IVaultController.sol",name:"IVaultController",methods:{"deposit(address,address,address,uint256)":{inputs:[{internalType:"contract IVolmexPerpPeriphery",name:"periphery",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"payable",type:"function",params:{amount:"The amount of the token to deposit",token:"The address of the token to deposit"},notice:"Deposit collateral into vault"},"getAccountValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getAccountValue",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",notice:"Function to get total account value of a trader"},"getBalance(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getBalance",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",notice:"Function to balance of the trader in 18 Decimals"},"getBalanceByToken(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"token",type:"address"}],name:"getBalanceByToken",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",notice:"Function to balance of the trader on the basis of token in 18 Decimals"},"getFreeCollateralByRatio(address,uint24)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"uint24",name:"ratio",type:"uint24"}],name:"getFreeCollateralByRatio",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",notice:"Function to get total free collateral of a trader by given ratio"},"getVault(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"getVault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Function to get address of the vault related to given token"},"initialize(address,address)":{inputs:[{internalType:"address",name:"positioningConfig",type:"address"},{internalType:"address",name:"accountBalanceArg",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"registerVault(address,address)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_token",type:"address"}],name:"registerVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Function to register new vault"},"setPositioning(address)":{inputs:[{internalType:"address",name:"PositioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Function to set positioning contract"},"withdraw(address,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address payable",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"The amount of the token to withdraw",token:"The address of the token sender is going to withdraw"},notice:"Withdraw collateral from vault"}}},"contracts/interfaces/IVirtualToken.sol:IVirtualToken":{source:"contracts/interfaces/IVirtualToken.sol",name:"IVirtualToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens owned by `account`."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"isBase()":{inputs:[],name:"isBase",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"mintMaximumTo(address)":{inputs:[{internalType:"address",name:"recipient",type:"address"}],name:"mintMaximumTo",outputs:[],stateMutability:"nonpayable",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens in existence."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}},"contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken":{source:"contracts/interfaces/IVolmexBaseToken.sol",name:"IVolmexBaseToken",events:{"PriceFeedChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"priceFeed",type:"address"}],name:"PriceFeedChanged",type:"event"}},methods:{"getIndexPrice(uint256)":{inputs:[{internalType:"uint256",name:"interval",type:"uint256"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"indexPrice",type:"uint256"}],stateMutability:"view",type:"function",returns:{indexPrice:"the current index price"},notice:"Get the current index price"},"getPriceFeed()":{inputs:[],name:"getPriceFeed",outputs:[{internalType:"address",name:"priceFeed",type:"address"}],stateMutability:"view",type:"function",returns:{priceFeed:"the current price feed"},notice:"Get the price feed address"},"initialize(string,string,address,bool)":{inputs:[{internalType:"string",name:"nameArg",type:"string"},{internalType:"string",name:"symbolArg",type:"string"},{internalType:"address",name:"priceFeedArg",type:"address"},{internalType:"bool",name:"isBase",type:"bool"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"setPriceFeed(address)":{inputs:[{internalType:"address",name:"priceFeedArg",type:"address"}],name:"setPriceFeed",outputs:[],stateMutability:"nonpayable",type:"function",details:"This function is only used for emergency shutdown, to set priceFeed to an emergencyPriceFeed"}}},"contracts/interfaces/IVolmexPerpLimitOrder.sol:IVolmexPerpLimitOrder":{source:"contracts/interfaces/IVolmexPerpLimitOrder.sol",name:"IVolmexPerpLimitOrder",methods:{"initialize(address,address,address,address)":{inputs:[{internalType:"contract IMarkPriceOracle",name:"_markPriceOracle",type:"address"},{internalType:"contract IPositioning",name:"_positioning",type:"address"},{internalType:"contract IAccountBalance",name:"_accountBalance",type:"address"},{internalType:"address",name:"_admin",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"setMarkPriceOracle(address)":{inputs:[{internalType:"contract IMarkPriceOracle",name:"_markPriceOracle",type:"address"}],name:"setMarkPriceOracle",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery":{source:"contracts/interfaces/IVolmexPerpPeriphery.sol",name:"IVolmexPerpPeriphery",events:{"RelayerUpdated(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"newRelayerAddress",type:"address"}],name:"RelayerUpdated",type:"event"},"VaultWhitelisted(address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"},{indexed:!1,internalType:"bool",name:"isWhitelist",type:"bool"}],name:"VaultWhitelisted",type:"event"}},methods:{"depositToVault(uint64,address,uint256)":{inputs:[{internalType:"uint64",name:"_index",type:"uint64"},{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"depositToVault",outputs:[],stateMutability:"payable",type:"function"},"openPosition(uint64,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)":{inputs:[{internalType:"uint64",name:"_index",type:"uint64"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"_orderLeft",type:"tuple"},{internalType:"bytes",name:"_signatureLeft",type:"bytes"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"_orderRight",type:"tuple"},{internalType:"bytes",name:"_signatureRight",type:"bytes"},{internalType:"bytes",name:"liquidator",type:"bytes"}],name:"openPosition",outputs:[],stateMutability:"nonpayable",type:"function"},"transferToVault(address,address,uint256)":{inputs:[{internalType:"contract IERC20Upgradeable",name:"_token",type:"address"},{internalType:"address",name:"_from",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"transferToVault",outputs:[],stateMutability:"nonpayable",type:"function"},"withdrawFromVault(uint64,address,address,uint256)":{inputs:[{internalType:"uint64",name:"_index",type:"uint64"},{internalType:"address",name:"_token",type:"address"},{internalType:"address payable",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdrawFromVault",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView":{source:"contracts/interfaces/IVolmexPerpView.sol",name:"IVolmexPerpView",methods:{"accounts(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"accounts",outputs:[{internalType:"contract IAccountBalance",name:"",type:"address"}],stateMutability:"view",type:"function"},"baseTokenIndexCount()":{inputs:[],name:"baseTokenIndexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"baseTokens(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"baseTokens",outputs:[{internalType:"contract IVolmexBaseToken",name:"",type:"address"}],stateMutability:"view",type:"function"},"incrementPerpIndex()":{inputs:[],name:"incrementPerpIndex",outputs:[],stateMutability:"nonpayable",type:"function"},"incrementVaultIndex()":{inputs:[],name:"incrementVaultIndex",outputs:[],stateMutability:"nonpayable",type:"function"},"marketRegistries(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"marketRegistries",outputs:[{internalType:"contract IMarketRegistry",name:"",type:"address"}],stateMutability:"view",type:"function"},"perpIndexCount()":{inputs:[],name:"perpIndexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"positionings(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"positionings",outputs:[{internalType:"contract IPositioning",name:"",type:"address"}],stateMutability:"view",type:"function"},"quoteTokenIndexCount()":{inputs:[],name:"quoteTokenIndexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"quoteTokens(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"quoteTokens",outputs:[{internalType:"contract IVolmexQuoteToken",name:"",type:"address"}],stateMutability:"view",type:"function"},"setAccount(address)":{inputs:[{internalType:"contract IAccountBalance",name:"_account",type:"address"}],name:"setAccount",outputs:[],stateMutability:"nonpayable",type:"function"},"setBaseToken(address)":{inputs:[{internalType:"contract IVolmexBaseToken",name:"_baseToken",type:"address"}],name:"setBaseToken",outputs:[],stateMutability:"nonpayable",type:"function"},"setMarketRegistry(address)":{inputs:[{internalType:"contract IMarketRegistry",name:"_marketRegistry",type:"address"}],name:"setMarketRegistry",outputs:[],stateMutability:"nonpayable",type:"function"},"setPositioning(address)":{inputs:[{internalType:"contract IPositioning",name:"_positioning",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"setQuoteToken(address)":{inputs:[{internalType:"contract IVolmexQuoteToken",name:"_quoteToken",type:"address"}],name:"setQuoteToken",outputs:[],stateMutability:"nonpayable",type:"function"},"setVaultController(address)":{inputs:[{internalType:"contract IVaultController",name:"_vaultController",type:"address"}],name:"setVaultController",outputs:[],stateMutability:"nonpayable",type:"function"},"vaultControllers(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"vaultControllers",outputs:[{internalType:"contract IVaultController",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaultIndexCount()":{inputs:[],name:"vaultIndexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/interfaces/IVolmexProtocol.sol:IVolmexProtocol":{source:"contracts/interfaces/IVolmexProtocol.sol",name:"IVolmexProtocol",methods:{"accumulatedFees()":{inputs:[],name:"accumulatedFees",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"active()":{inputs:[],name:"active",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"claimAccumulatedFees()":{inputs:[],name:"claimAccumulatedFees",outputs:[],stateMutability:"nonpayable",type:"function"},"collateral()":{inputs:[],name:"collateral",outputs:[{internalType:"contract IERC20Modified",name:"",type:"address"}],stateMutability:"view",type:"function"},"collateralize(uint256)":{inputs:[{internalType:"uint256",name:"_collateralQty",type:"uint256"}],name:"collateralize",outputs:[],stateMutability:"nonpayable",type:"function"},"inverseVolatilityToken()":{inputs:[],name:"inverseVolatilityToken",outputs:[{internalType:"contract IERC20Modified",name:"",type:"address"}],stateMutability:"view",type:"function"},"isSettled()":{inputs:[],name:"isSettled",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"issuanceFees()":{inputs:[],name:"issuanceFees",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"minimumCollateralQty()":{inputs:[],name:"minimumCollateralQty",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"precisionRatio()":{inputs:[],name:"precisionRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"recoverTokens(address,address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_toWhom",type:"address"},{internalType:"uint256",name:"_howMuch",type:"uint256"}],name:"recoverTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"redeem(uint256)":{inputs:[{internalType:"uint256",name:"_positionTokenQty",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function"},"redeemFees()":{inputs:[],name:"redeemFees",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"redeemSettled(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_volatilityIndexTokenQty",type:"uint256"},{internalType:"uint256",name:"_inverseVolatilityIndexTokenQty",type:"uint256"}],name:"redeemSettled",outputs:[],stateMutability:"nonpayable",type:"function"},"settle(uint256)":{inputs:[{internalType:"uint256",name:"_settlementPrice",type:"uint256"}],name:"settle",outputs:[],stateMutability:"nonpayable",type:"function"},"settlementPrice()":{inputs:[],name:"settlementPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"toggleActive()":{inputs:[],name:"toggleActive",outputs:[],stateMutability:"nonpayable",type:"function"},"togglePause(bool)":{inputs:[{internalType:"bool",name:"_isPause",type:"bool"}],name:"togglePause",outputs:[],stateMutability:"nonpayable",type:"function"},"updateFees(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_issuanceFees",type:"uint256"},{internalType:"uint256",name:"_redeemFees",type:"uint256"}],name:"updateFees",outputs:[],stateMutability:"nonpayable",type:"function"},"updateMinimumCollQty(uint256)":{inputs:[{internalType:"uint256",name:"_newMinimumCollQty",type:"uint256"}],name:"updateMinimumCollQty",outputs:[],stateMutability:"nonpayable",type:"function"},"updatePositionToken(address,bool)":{inputs:[{internalType:"address",name:"_positionToken",type:"address"},{internalType:"bool",name:"_isVolatilityIndex",type:"bool"}],name:"updatePositionToken",outputs:[],stateMutability:"nonpayable",type:"function"},"volatilityCapRatio()":{inputs:[],name:"volatilityCapRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityToken()":{inputs:[],name:"volatilityToken",outputs:[{internalType:"contract IERC20Modified",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken":{source:"contracts/interfaces/IVolmexQuoteToken.sol",name:"IVolmexQuoteToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens owned by `account`."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"initialize(string,string,bool)":{inputs:[{internalType:"string",name:"nameArg",type:"string"},{internalType:"string",name:"symbolArg",type:"string"},{internalType:"bool",name:"isBaseArg",type:"bool"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"isBase()":{inputs:[],name:"isBase",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"mintMaximumTo(address)":{inputs:[{internalType:"address",name:"recipient",type:"address"}],name:"mintMaximumTo",outputs:[],stateMutability:"nonpayable",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens in existence."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}},"contracts/libs/EncodeDecode.sol:EncodeDecode":{source:"contracts/libs/EncodeDecode.sol",name:"EncodeDecode"},"contracts/libs/LibAccountMarket.sol:LibAccountMarket":{source:"contracts/libs/LibAccountMarket.sol",name:"LibAccountMarket"},"contracts/libs/LibAsset.sol:LibAsset":{source:"contracts/libs/LibAsset.sol",name:"LibAsset"},"contracts/libs/LibDeal.sol:LibDeal":{source:"contracts/libs/LibDeal.sol",name:"LibDeal"},"contracts/libs/LibFill.sol:LibFill":{source:"contracts/libs/LibFill.sol",name:"LibFill"},"contracts/libs/LibFullMath.sol:LibFullMath":{source:"contracts/libs/LibFullMath.sol",name:"LibFullMath",title:"Contains 512-bit math functions",details:'Handles "phantom overflow" i.e., allows multiplication and division where an intermediate value overflows 256 bits',notice:"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision"},"contracts/libs/LibMath.sol:LibMath":{source:"contracts/libs/LibMath.sol",name:"LibMath"},"contracts/libs/LibOrder.sol:LibOrder":{source:"contracts/libs/LibOrder.sol",name:"LibOrder",methods:{"ORDER()":{inputs:[],name:"ORDER",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"},"STOP_LOSS_LIMIT_ORDER()":{inputs:[],name:"STOP_LOSS_LIMIT_ORDER",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"},"TAKE_PROFIT_LIMIT_ORDER()":{inputs:[],name:"TAKE_PROFIT_LIMIT_ORDER",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"}}},"contracts/libs/LibPerpMath.sol:LibPerpMath":{source:"contracts/libs/LibPerpMath.sol",name:"LibPerpMath"},"contracts/libs/LibSafeCastInt.sol:LibSafeCastInt":{source:"contracts/libs/LibSafeCastInt.sol",name:"LibSafeCastInt",details:'copy from "@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol" and rename to avoid naming conflict with uniswap'},"contracts/libs/LibSafeCastUint.sol:LibSafeCastUint":{source:"contracts/libs/LibSafeCastUint.sol",name:"LibSafeCastUint",details:'copy from "@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol" and rename to avoid naming conflict with uniswap'},"contracts/libs/LibSettlementTokenMath.sol:LibSettlementTokenMath":{source:"contracts/libs/LibSettlementTokenMath.sol",name:"LibSettlementTokenMath",details:"decimals of settlementToken token MUST be less than 18"},"contracts/libs/LibSignature.sol:LibSignature":{source:"contracts/libs/LibSignature.sol",name:"LibSignature"},"contracts/matching-engine/AssetMatcher.sol:AssetMatcher":{source:"contracts/matching-engine/AssetMatcher.sol",name:"AssetMatcher",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/matching-engine/MatchingEngine.sol:MatchingEngine":{source:"contracts/matching-engine/MatchingEngine.sol",name:"MatchingEngine",events:{"Canceled(bytes32,address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"hash",type:"bytes32"},{indexed:!1,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"salt",type:"uint256"}],name:"Canceled",type:"event"},"CanceledAll(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"uint256",name:"minSalt",type:"uint256"}],name:"CanceledAll",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"Matched(address[2],uint64[2],uint256[2],uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address[2]",name:"traders",type:"address[2]"},{indexed:!1,internalType:"uint64[2]",name:"deadline",type:"uint64[2]"},{indexed:!1,internalType:"uint256[2]",name:"salt",type:"uint256[2]"},{indexed:!1,internalType:"uint256",name:"newLeftFill",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newRightFill",type:"uint256"}],name:"Matched",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"CAN_MATCH_ORDERS()":{inputs:[],name:"CAN_MATCH_ORDERS",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MATCHING_ENGINE_CORE_ADMIN()":{inputs:[],name:"MATCHING_ENGINE_CORE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"cancelAllOrders(uint256)":{inputs:[{internalType:"uint256",name:"minSalt",type:"uint256"}],name:"cancelAllOrders",outputs:[],stateMutability:"nonpayable",type:"function",params:{minSalt:"salt in minimum of all orders"},notice:"Cancels all orders"},"cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"cancelOrder",outputs:[],stateMutability:"nonpayable",type:"function",params:{order:"the order to be cancelled"},notice:"Cancels a given order"},"cancelOrdersInBatch((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[])":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"orders",type:"tuple[]"}],name:"cancelOrdersInBatch",outputs:[],stateMutability:"nonpayable",type:"function",params:{orders:"Array or orders to be cancelled"},notice:"Cancels multiple orders in batch"},"fills(bytes32)":{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"fills",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantMatchOrders(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"grantMatchOrders",outputs:[],stateMutability:"nonpayable",type:"function"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address,address)":{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"contract IMarkPriceOracle",name:"_markPriceOracle",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",params:{_markPriceOracle:"Address of mark price oracle",_owner:"Owner address"},notice:"Initialize the contract"},"makerMinSalt(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"makerMinSalt",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"markPriceOracle()":{inputs:[],name:"markPriceOracle",outputs:[{internalType:"contract IMarkPriceOracle",name:"",type:"address"}],stateMutability:"view",type:"function"},"matchOrderInBatch((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[],(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[])":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"ordersLeft",type:"tuple[]"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"ordersRight",type:"tuple[]"}],name:"matchOrderInBatch",outputs:[],stateMutability:"nonpayable",type:"function"},"matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderLeft",type:"tuple"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderRight",type:"tuple"}],name:"matchOrders",outputs:[{components:[{internalType:"uint256",name:"leftValue",type:"uint256"},{internalType:"uint256",name:"rightValue",type:"uint256"}],internalType:"struct LibFill.FillResult",name:"",type:"tuple"}],stateMutability:"nonpayable",type:"function",params:{orderLeft:"the left side of order",orderRight:"the right side of order"},notice:"Will match two orders & transfers assets"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore":{source:"contracts/matching-engine/MatchingEngineCore.sol",name:"MatchingEngineCore",events:{"Canceled(bytes32,address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"hash",type:"bytes32"},{indexed:!1,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"salt",type:"uint256"}],name:"Canceled",type:"event"},"CanceledAll(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"uint256",name:"minSalt",type:"uint256"}],name:"CanceledAll",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"Matched(address[2],uint64[2],uint256[2],uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address[2]",name:"traders",type:"address[2]"},{indexed:!1,internalType:"uint64[2]",name:"deadline",type:"uint64[2]"},{indexed:!1,internalType:"uint256[2]",name:"salt",type:"uint256[2]"},{indexed:!1,internalType:"uint256",name:"newLeftFill",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newRightFill",type:"uint256"}],name:"Matched",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"CAN_MATCH_ORDERS()":{inputs:[],name:"CAN_MATCH_ORDERS",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MATCHING_ENGINE_CORE_ADMIN()":{inputs:[],name:"MATCHING_ENGINE_CORE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"cancelAllOrders(uint256)":{inputs:[{internalType:"uint256",name:"minSalt",type:"uint256"}],name:"cancelAllOrders",outputs:[],stateMutability:"nonpayable",type:"function",params:{minSalt:"salt in minimum of all orders"},notice:"Cancels all orders"},"cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"cancelOrder",outputs:[],stateMutability:"nonpayable",type:"function",params:{order:"the order to be cancelled"},notice:"Cancels a given order"},"cancelOrdersInBatch((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[])":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"orders",type:"tuple[]"}],name:"cancelOrdersInBatch",outputs:[],stateMutability:"nonpayable",type:"function",params:{orders:"Array or orders to be cancelled"},notice:"Cancels multiple orders in batch"},"fills(bytes32)":{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"fills",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantMatchOrders(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"grantMatchOrders",outputs:[],stateMutability:"nonpayable",type:"function"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"makerMinSalt(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"makerMinSalt",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"markPriceOracle()":{inputs:[],name:"markPriceOracle",outputs:[{internalType:"contract IMarkPriceOracle",name:"",type:"address"}],stateMutability:"view",type:"function"},"matchOrderInBatch((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[],(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[])":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"ordersLeft",type:"tuple[]"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"ordersRight",type:"tuple[]"}],name:"matchOrderInBatch",outputs:[],stateMutability:"nonpayable",type:"function"},"matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderLeft",type:"tuple"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderRight",type:"tuple"}],name:"matchOrders",outputs:[{components:[{internalType:"uint256",name:"leftValue",type:"uint256"},{internalType:"uint256",name:"rightValue",type:"uint256"}],internalType:"struct LibFill.FillResult",name:"",type:"tuple"}],stateMutability:"nonpayable",type:"function",params:{orderLeft:"the left side of order",orderRight:"the right side of order"},notice:"Will match two orders & transfers assets"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/matching-engine/TransferExecutor.sol:TransferExecutor":{source:"contracts/matching-engine/TransferExecutor.sol",name:"TransferExecutor",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"ProxyChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"proxy",type:"address"}],name:"ProxyChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"TRANSFER_EXECUTOR()":{inputs:[],name:"TRANSFER_EXECUTOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setTransferProxy(address)":{inputs:[{internalType:"address",name:"proxy",type:"address"}],name:"setTransferProxy",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."}}},"contracts/matching-engine/TransferManager.sol:TransferManager":{source:"contracts/matching-engine/TransferManager.sol",name:"TransferManager",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"ProtocolFeeChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"ProtocolFeeChanged",type:"event",details:"event that's emitted when protocolFee changes"},"ProxyChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"proxy",type:"address"}],name:"ProxyChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"TRANSFER_EXECUTOR()":{inputs:[],name:"TRANSFER_EXECUTOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setTransferProxy(address)":{inputs:[{internalType:"address",name:"proxy",type:"address"}],name:"setTransferProxy",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/mocks/AccountBalanceMock.sol:AccountBalanceMock":{source:"contracts/mocks/AccountBalanceMock.sol",name:"AccountBalanceMock",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"PnlRealized(address,address,int256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"amount",type:"int256"}],name:"PnlRealized",type:"event"},"PositioningCalleeChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"positioningCallee",type:"address"}],name:"PositioningCalleeChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"UnderlyingPriceIndexSet(uint64)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint64",name:"underlyingIndex",type:"uint64"}],name:"UnderlyingPriceIndexSet",type:"event"},"VaultChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"}],name:"VaultChanged",type:"event"}},methods:{"ACCOUNT_BALANCE_ADMIN()":{inputs:[],name:"ACCOUNT_BALANCE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"CAN_SETTLE_REALIZED_PNL()":{inputs:[],name:"CAN_SETTLE_REALIZED_PNL",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_CALLEE_ADMIN()":{inputs:[],name:"POSITIONING_CALLEE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"fakeOwedRealisedPnlX10_18()":{inputs:[],name:"fakeOwedRealisedPnlX10_18",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function"},"fakePendingFeeX10_18()":{inputs:[],name:"fakePendingFeeX10_18",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"fakeUnrealizedPnlX10_18()":{inputs:[],name:"fakeUnrealizedPnlX10_18",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function"},"getAccountInfo(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getAccountInfo",outputs:[{components:[{internalType:"int256",name:"positionSize",type:"int256"},{internalType:"int256",name:"openNotional",type:"int256"}],internalType:"struct LibAccountMarket.Info",name:"",type:"tuple"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"traderAccountInfo The baseToken account info of trader"},notice:"Get trader account info"},"getBaseTokens(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getBaseTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",params:{trader:"The address of trader"},returns:{_0:"baseTokens The array of baseToken address"},notice:"Get trader registered baseTokens"},"getIndexPrice(address)":{inputs:[{internalType:"address",name:"baseToken",type:"address"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"indexPrice",type:"uint256"}],stateMutability:"view",type:"function",details:"this function is used to fetch index price of base token"},"getLiquidatablePositionSize(address,address,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"accountValue",type:"int256"}],name:"getLiquidatablePositionSize",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",params:{accountValue:"The account value of trader",baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"liquidatablePositionSize The liquidatable position size of trader's baseToken market"},notice:"Get liquidatable position size of trader's baseToken market"},"getMarginRequirementForLiquidation(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getMarginRequirementForLiquidation",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"This is different from `Vault._getTotalMarginRequirement()`, which is for freeCollateral calculation",params:{trader:"The address of trader"},returns:{_0:"marginRequirementForLiquidation It is compared with `Positioning.getAccountValue`"},notice:"Get margin requirement to check whether trader will be able to liquidate"},"getOpenNotional(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getOpenNotional",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"openNotional The taker cost of trader's baseToken"},notice:"Get taker cost of trader's baseToken"},"getPnlAndPendingFee(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getPnlAndPendingFee",outputs:[{internalType:"int256",name:"",type:"int256"},{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",params:{trader:"The address of trader"},returns:{_0:"the pnl realized already but stored temporarily in AccountBalance",_1:"the pnl not yet realized"},notice:"Get owedRealizedPnl, realizedPnl and pending fee"},"getPositionSize(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getPositionSize",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"This will only has taker position, can get maker impermanent position through `getTotalPositionSize`",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"takerPositionSize The taker position size of trader's baseToken market"},notice:"Get taker position size of trader's baseToken market"},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPositioningConfig()":{inputs:[],name:"getPositioningConfig",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"PositioningConfig The address of PositioningConfig"},notice:"Get `PositioningConfig` address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTotalAbsPositionValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getTotalAbsPositionValue",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{trader:"The address of trader"},returns:{_0:"totalAbsPositionValue Sum up positions value of every market"},notice:"Get all market position abs value of trader"},"getTotalDebtValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getTotalDebtValue",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Total debt value will relate to `Vault.getFreeCollateral()`",params:{trader:"The address of trader"},returns:{_0:"totalDebtValue The debt value of trader"},notice:"Get total debt value of trader"},"getTotalPositionValue(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getTotalPositionValue",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"A negative returned value is only be used when calculating pnl,we use `15 mins` twap to calc position value",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"totalPositionValue Total position value of trader's baseToken market"},notice:"Get total position value of trader's baseToken market"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"grantSettleRealizedPnlRole(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"grantSettleRealizedPnlRole",outputs:[],stateMutability:"nonpayable",type:"function"},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address)":{inputs:[{internalType:"address",name:"positioningConfigArg",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"mock_setOwedRealisedPnlX10_18(int256)":{inputs:[{internalType:"int256",name:"value",type:"int256"}],name:"mock_setOwedRealisedPnlX10_18",outputs:[],stateMutability:"nonpayable",type:"function"},"mock_setPendingFeeX10_18(uint256)":{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"mock_setPendingFeeX10_18",outputs:[],stateMutability:"nonpayable",type:"function"},"mock_setUnrealizedPnlX10_18(int256)":{inputs:[{internalType:"int256",name:"value",type:"int256"}],name:"mock_setUnrealizedPnlX10_18",outputs:[],stateMutability:"nonpayable",type:"function"},"modifyOwedRealizedPnl(address,int256,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"int256",name:"amount",type:"int256"},{internalType:"address",name:"baseToken",type:"address"}],name:"modifyOwedRealizedPnl",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only used by `Positioning` contract",params:{amount:"Modified amount of owedRealizedPnl",trader:"The address of the trader"},notice:"Modify trader owedRealizedPnl"},"registerBaseToken(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"registerBaseToken",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only used by `Positioning` contract",params:{baseToken:"The address of the trader's base token",trader:"The address of the trader"},notice:"Every time a trader's position value is checked, the base token list of this trader will be traversed; thus, this list should be kept as short as possible"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setPositioning(address)":{inputs:[{internalType:"address",name:"positioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"setUnderlyingPriceIndex(uint64)":{inputs:[{internalType:"uint64",name:"underlyingIndex",type:"uint64"}],name:"setUnderlyingPriceIndex",outputs:[],stateMutability:"nonpayable",type:"function"},"settleBalanceAndDeregister(address,address,int256,int256,int256,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"takerBase",type:"int256"},{internalType:"int256",name:"takerQuote",type:"int256"},{internalType:"int256",name:"realizedPnl",type:"int256"},{internalType:"int256",name:"fee",type:"int256"}],name:"settleBalanceAndDeregister",outputs:[{internalType:"int256",name:"positionSize",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"Only used by `Positioning` contract",params:{baseToken:"The address of the baseToken",fee:"Amount of maker fee collected from pool",realizedPnl:"Amount of pnl realized",takerBase:"Modified amount of taker base",takerQuote:"Modified amount of taker quote",trader:"The address of the trader"},notice:"Settle account balance and deregister base token"},"settleOwedRealizedPnl(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"settleOwedRealizedPnl",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"Only used by `Vault.withdraw()`",params:{trader:"The address of the trader"},returns:{_0:"Settled owedRealizedPnl"},notice:"Settle owedRealizedPnl"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."}}},"contracts/mocks/PositioningMock.sol:PositioningMock":{source:"contracts/mocks/PositioningMock.sol",name:"PositioningMock",events:{"DefaultFeeReceiverChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"defaultFeeReceiver",type:"address"}],name:"DefaultFeeReceiverChanged",type:"event",notice:"Emitted when defualt fee receiver is changed"},"FundingIntervalSet(int256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"int256",name:"fundingInterval",type:"int256"}],name:"FundingIntervalSet",type:"event"},"FundingPaymentSettled(address,address,int256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"fundingPayment",type:"int256"}],name:"FundingPaymentSettled",type:"event",notice:"Emitted when settling a trader's funding payment"},"FundingUpdated(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"markTwap",type:"uint256"},{indexed:!1,internalType:"uint256",name:"indexTwap",type:"uint256"}],name:"FundingUpdated",type:"event",notice:"event to emit after funding updated"},"IndexPriceSet(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"indexPriceOracle",type:"address"}],name:"IndexPriceSet",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LiquidatorWhitelisted(address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"liquidator",type:"address"},{indexed:!1,internalType:"bool",name:"isWhitelist",type:"bool"}],name:"LiquidatorWhitelisted",type:"event",notice:"Emitted when liquidator is whitelisted or removed"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"PositionChanged(address,address,int256,int256,uint256,uint256,bytes4,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"exchangedPositionSize",type:"int256"},{indexed:!1,internalType:"int256",name:"exchangedPositionNotional",type:"int256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"orderIndexPrice",type:"uint256"},{indexed:!1,internalType:"bytes4",name:"orderType",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isShort",type:"bool"}],name:"PositionChanged",type:"event",notice:"Emitted when taker's position is being changed"},"PositionLiquidated(address,address,uint256,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"positionNotional",type:"uint256"},{indexed:!1,internalType:"uint256",name:"positionSize",type:"uint256"},{indexed:!1,internalType:"uint256",name:"liquidationFee",type:"uint256"},{indexed:!1,internalType:"address",name:"liquidator",type:"address"}],name:"PositionLiquidated",type:"event",notice:"Emitted when taker position is being liquidated"},"PositioningCalleeChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"positioningCallee",type:"address"}],name:"PositioningCalleeChanged",type:"event"},"ReferredPositionChanged(bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"referralCode",type:"bytes32"}],name:"ReferredPositionChanged",type:"event",notice:"Emitted when open position with non-zero referral code"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"TrustedForwarderChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"forwarder",type:"address"}],name:"TrustedForwarderChanged",type:"event",notice:"Emitted when trusted forwarder address changed"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_ADMIN()":{inputs:[],name:"POSITIONING_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_CALLEE_ADMIN()":{inputs:[],name:"POSITIONING_CALLEE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"defaultFeeReceiver()":{inputs:[],name:"defaultFeeReceiver",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"fakeFundingPaymentX10_18()":{inputs:[],name:"fakeFundingPaymentX10_18",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function"},"getAccountBalance()":{inputs:[],name:"getAccountBalance",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"`AccountBalance` address"},notice:"Get AccountBalance address"},"getAccountValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getAccountValue",outputs:[{internalType:"int256",name:"accountValue",type:"int256"}],stateMutability:"view",type:"function",details:"Used to fetch account value of a trader"},"getAllPendingFundingPayment(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getAllPendingFundingPayment",outputs:[{internalType:"int256",name:"pendingFundingPayment",type:"int256"}],stateMutability:"view",type:"function",details:"this function calculates total pending funding payment of a trader"},"getIndexPrice(address)":{inputs:[{internalType:"address",name:"baseToken",type:"address"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"indexPrice",type:"uint256"}],stateMutability:"view",type:"function",details:"this function is used to fetch index price of base token"},"getLiquidatablePosition(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getLiquidatablePosition",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},notice:"Get position size of a trader to be liquidated"},"getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"getOrderValidate",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"getPendingFundingPayment(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getPendingFundingPayment",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"this function calculates pending funding payment of a trader respective to basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"}},"getPnlToBeRealized((address,address,int256,int256))":{inputs:[{components:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"base",type:"int256"},{internalType:"int256",name:"quote",type:"int256"}],internalType:"struct IPositioning.RealizePnlParams",name:"params",type:"tuple"}],name:"getPnlToBeRealized",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"This function normally won't be needed by traders, but it might be useful for 3rd party",params:{params:"The params needed to do the query, encoded as `RealizePnlParams` in calldata"},returns:{_0:"The pnl that can be realized if trader reduce position"},notice:"Get the pnl that can be realized if trader reduce position"},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPositioningConfig()":{inputs:[],name:"getPositioningConfig",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"PositioningConfig address"},notice:"Get PositioningConfig address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getVaultController()":{inputs:[],name:"getVaultController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"`Vault` address"},notice:"Get `Vault` address"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address,address,address,address,address,address,uint64,address[2])":{inputs:[{internalType:"address",name:"positioningConfigArg",type:"address"},{internalType:"address",name:"vaultControllerArg",type:"address"},{internalType:"address",name:"accountBalanceArg",type:"address"},{internalType:"address",name:"matchingEngineArg",type:"address"},{internalType:"address",name:"markPriceArg",type:"address"},{internalType:"address",name:"indexPriceArg",type:"address"},{internalType:"uint64",name:"underlyingPriceIndex",type:"uint64"},{internalType:"address[2]",name:"liquidators",type:"address[2]"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"this function is public for testing"},"isAccountLiquidatable(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"isAccountLiquidatable",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"this function is used to know the trader is liquidateable"},"isLiquidatorWhitelist(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isLiquidatorWhitelist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"liquidate(address,address,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"positionSize",type:"int256"}],name:"liquidate",outputs:[],stateMutability:"nonpayable",type:"function",details:"If trader has open orders, need to call `cancelAllExcessOrders` firstIf positionSize is greater than maxLiquidatePositionSize, liquidate maxLiquidatePositionSize by defaultIf margin ratio >= 0.5 * mmRatio,         maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1maxLiquidatePositionSize = positionSize * maxLiquidateRatio",params:{baseToken:"The address of baseToken",positionSize:"the position size to be liquidated by liquidator",trader:"The address of trader"},notice:"If trader is underwater, any one can call `liquidate` to liquidate this trader"},"liquidateFullPosition(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"liquidateFullPosition",outputs:[],stateMutability:"nonpayable",type:"function",details:"If margin ratio >= 0.5 * mmRatio, maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1maxLiquidatePositionSize = positionSize * maxLiquidateRatio",params:{baseToken:"The address of baseToken",trader:"The address of trader"},notice:"TODO: Test if this function liquidate full position even with when only partial was needed"},"makerMinSalt(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"makerMinSalt",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"mock_setFundingPaymentX10_18(int256)":{inputs:[{internalType:"int256",name:"value",type:"int256"}],name:"mock_setFundingPaymentX10_18",outputs:[],stateMutability:"nonpayable",type:"function"},"openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderLeft",type:"tuple"},{internalType:"bytes",name:"signatureLeft",type:"bytes"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderRight",type:"tuple"},{internalType:"bytes",name:"signatureRight",type:"bytes"},{internalType:"bytes",name:"liquidator",type:"bytes"}],name:"openPosition",outputs:[],stateMutability:"nonpayable",type:"function",params:{orderLeft:"PositionParams struct",orderRight:"PositionParams struct"},notice:"Trader can call `openPosition` to long/short on baseToken market"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setDefaultFeeReceiver(address)":{inputs:[{internalType:"address",name:"newDefaultFeeReceiver",type:"address"}],name:"setDefaultFeeReceiver",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Function to set fee receiver"},"setFundingInterval(int256)":{inputs:[{internalType:"int256",name:"interval",type:"int256"}],name:"setFundingInterval",outputs:[],stateMutability:"nonpayable",type:"function",params:{interval:"denominator for 24 hours and get interval value, eg 24/3 = 8 hour interval of funding payment"},notice:"Update funding rate inteval"},"setIndexPriceOracle(address)":{inputs:[{internalType:"address",name:"indexPriceOracle",type:"address"}],name:"setIndexPriceOracle",outputs:[],stateMutability:"nonpayable",type:"function"},"setMarketRegistry(address)":{inputs:[{internalType:"address",name:"marketRegistryArg",type:"address"}],name:"setMarketRegistry",outputs:[],stateMutability:"nonpayable",type:"function"},"setPositioning(address)":{inputs:[{internalType:"address",name:"positioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"settleAllFunding(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"settleAllFunding",outputs:[],stateMutability:"nonpayable",type:"function",params:{trader:"The address of trader"},notice:"Settle all markets fundingPayment to owedRealized Pnl"},"settleFunding(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"settleFunding",outputs:[{internalType:"int256",name:"fundingPayment",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"this function is used to settle funding f a trader on the basis of given basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"},returns:{fundingPayment:"pnding funding payment on this basetoken"}},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},"whitelistLiquidator(address,bool)":{inputs:[{internalType:"address",name:"liquidator",type:"address"},{internalType:"bool",name:"isWhitelist",type:"bool"}],name:"whitelistLiquidator",outputs:[],stateMutability:"nonpayable",type:"function",params:{isWhitelist:"if true, whitelist. is false remove whitelist"},notice:"Update whitelist for a liquidator"}}},"contracts/oracles/IndexPriceOracle.sol:IndexPriceOracle":{source:"contracts/oracles/IndexPriceOracle.sol",name:"IndexPriceOracle",title:"Volmex Oracle contract",author:"volmex.finance [security@volmexlabs.com]",events:{"BaseVolatilityIndexUpdated(uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"baseVolatilityIndex",type:"uint256"}],name:"BaseVolatilityIndexUpdated",type:"event"},"BatchVolatilityTokenPriceUpdated(uint256[],uint256[],bytes32[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256[]",name:"_volatilityIndexes",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"_volatilityTokenPrices",type:"uint256[]"},{indexed:!1,internalType:"bytes32[]",name:"_proofHashes",type:"bytes32[]"}],name:"BatchVolatilityTokenPriceUpdated",type:"event"},"IndexDataPointAdded(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"indexed_index",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_value",type:"uint256"}],name:"IndexDataPointAdded",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LeveragedVolatilityIndexAdded(uint256,uint256,string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"volatilityTokenIndex",type:"uint256"},{indexed:!1,internalType:"uint256",name:"volatilityCapRatio",type:"uint256"},{indexed:!1,internalType:"string",name:"volatilityTokenSymbol",type:"string"},{indexed:!1,internalType:"uint256",name:"leverage",type:"uint256"},{indexed:!1,internalType:"uint256",name:"baseVolatilityIndex",type:"uint256"}],name:"LeveragedVolatilityIndexAdded",type:"event"},"MaxTwapDatapointsUpdated(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_value",type:"uint256"}],name:"MaxTwapDatapointsUpdated",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"SymbolIndexUpdated(uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"_index",type:"uint256"}],name:"SymbolIndexUpdated",type:"event"},"VolatilityIndexAdded(uint256,uint256,string,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"volatilityTokenIndex",type:"uint256"},{indexed:!1,internalType:"uint256",name:"volatilityCapRatio",type:"uint256"},{indexed:!1,internalType:"string",name:"volatilityTokenSymbol",type:"string"},{indexed:!1,internalType:"uint256",name:"volatilityTokenPrice",type:"uint256"}],name:"VolatilityIndexAdded",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"INDEX_PRICE_ORACLE_ADMIN()":{inputs:[],name:"INDEX_PRICE_ORACLE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"addIndexDataPoint(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"},{internalType:"uint256",name:"_value",type:"uint256"}],name:"addIndexDataPoint",outputs:[],stateMutability:"nonpayable",type:"function",params:{_index:"Datapoints volatility index id {0}",_value:"Datapoint value to add {250000000}"},notice:"Adds a new datapoint to the datapoints storage array"},"addVolatilityIndex(uint256,address,string,uint256,uint256,bytes32)":{inputs:[{internalType:"uint256",name:"_volatilityTokenPrice",type:"uint256"},{internalType:"contract IVolmexProtocol",name:"_protocol",type:"address"},{internalType:"string",name:"_volatilityTokenSymbol",type:"string"},{internalType:"uint256",name:"_leverage",type:"uint256"},{internalType:"uint256",name:"_baseVolatilityIndex",type:"uint256"},{internalType:"bytes32",name:"_proofHash",type:"bytes32"}],name:"addVolatilityIndex",outputs:[],stateMutability:"nonpayable",type:"function",params:{_baseVolatilityIndex:"Index of the base volatility {0: ETHV, 1: BTCV}",_leverage:"Value of leverage on token {2X: 2, 5X: 5}",_proofHash:"Bytes32 value of token price proof of hash",_protocol:"Address of the VolmexProtocol of which the price is added",_volatilityTokenPrice:"Price of the adding volatility token",_volatilityTokenSymbol:"Symbol of the adding volatility token"},notice:"Add volatility token price by index"},"baseVolatilityIndex(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"baseVolatilityIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getIndexDataPoints(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"getIndexDataPoints",outputs:[{internalType:"uint256[]",name:"dp",type:"uint256[]"}],stateMutability:"view",type:"function",params:{_index:"Datapoints volatility index id {0}"},notice:"Get all datapoints available for a specific volatility index"},"getIndexTwap(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"getIndexTwap",outputs:[{internalType:"uint256",name:"volatilityTokenTwap",type:"uint256"},{internalType:"uint256",name:"iVolatilityTokenTwap",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function",details:"This method is a replica of `getVolatilityTokenPriceByIndex(_index)`",params:{_index:"Datapoints volatility index id {0}"},notice:"Get the TWAP value from current available datapoints"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getVolatilityPriceBySymbol(string)":{inputs:[{internalType:"string",name:"_volatilityTokenSymbol",type:"string"}],name:"getVolatilityPriceBySymbol",outputs:[{internalType:"uint256",name:"volatilityTokenPrice",type:"uint256"},{internalType:"uint256",name:"iVolatilityTokenPrice",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function",params:{_volatilityTokenSymbol:"Symbol of the volatility token"},notice:"Get the volatility token price by symbol"},"getVolatilityTokenPriceByIndex(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"getVolatilityTokenPriceByIndex",outputs:[{internalType:"uint256",name:"volatilityTokenPrice",type:"uint256"},{internalType:"uint256",name:"iVolatilityTokenPrice",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function",params:{_index:"index of the volatility token"},notice:"Get the volatility token price by index"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"indexCount()":{inputs:[],name:"indexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize(address)":{inputs:[{internalType:"address",name:"_owner",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Initializes the contract setting the deployer as the initial owner."},"latestRoundData(uint256)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"latestRoundData",outputs:[{internalType:"uint256",name:"answer",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function",params:{_index:"Datapoints volatility index id {0}"},returns:{answer:"is the answer for the given round"},notice:"Emulate the Chainlink Oracle interface for retrieving Volmex TWAP volatility index"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"updateBaseVolatilityIndex(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_leverageVolatilityIndex",type:"uint256"},{internalType:"uint256",name:"_newBaseVolatilityIndex",type:"uint256"}],name:"updateBaseVolatilityIndex",outputs:[],stateMutability:"nonpayable",type:"function",params:{_leverageVolatilityIndex:"Index of the leverage volatility token",_newBaseVolatilityIndex:"Index of the base volatility token"},notice:"Update the baseVolatilityIndex of leverage token"},"updateBatchVolatilityTokenPrice(uint256[],uint256[],bytes32[])":{inputs:[{internalType:"uint256[]",name:"_volatilityIndexes",type:"uint256[]"},{internalType:"uint256[]",name:"_volatilityTokenPrices",type:"uint256[]"},{internalType:"bytes32[]",name:"_proofHashes",type:"bytes32[]"}],name:"updateBatchVolatilityTokenPrice",outputs:[],stateMutability:"nonpayable",type:"function",details:"Check if volatility token price is greater than zero (0)Update the volatility token price corresponding to the volatility token symbolStore the volatility token price corresponding to the block numberUpdate the proof of hash for the volatility token price",params:{_proofHashes:"arrau of Bytes32 values of token prices proof of hash NOTE: Make sure the volatility token price are with 6 decimals, eg. 125000000",_volatilityIndexes:"Number array of values of the volatility index. { eg. 0 }",_volatilityTokenPrices:"array of prices of volatility token, between {0, 250000000}"},notice:"Updates the volatility token price by index"},"updateIndexBySymbol(string,uint256)":{inputs:[{internalType:"string",name:"_tokenSymbol",type:"string"},{internalType:"uint256",name:"_index",type:"uint256"}],name:"updateIndexBySymbol",outputs:[],stateMutability:"nonpayable",type:"function",params:{_index:"Number value of the index. { eg. 0 }",_tokenSymbol:"Symbol of the adding volatility token"},notice:"Update the volatility token index by symbol"},"updateTwapMaxDatapoints(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"updateTwapMaxDatapoints",outputs:[],stateMutability:"nonpayable",type:"function",params:{_value:"Max datapoints value {180}"},notice:"Update maximum amount of volatility index datapoints for calculating the TWAP"},"volatilityCapRatioByIndex(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"volatilityCapRatioByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityIndexBySymbol(string)":{inputs:[{internalType:"string",name:"",type:"string"}],name:"volatilityIndexBySymbol",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityLastUpdateTimestamp(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"volatilityLastUpdateTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityLeverageByIndex(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"volatilityLeverageByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityTokenPriceProofHash(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"volatilityTokenPriceProofHash",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}}},"contracts/oracles/IndexTWAP.sol:IndexTWAP":{source:"contracts/oracles/IndexTWAP.sol",name:"IndexTWAP",title:"Volmex Oracle TWAP library",author:"volmex.finance [security@volmexlabs.com]",events:{"IndexDataPointAdded(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"indexed_index",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_value",type:"uint256"}],name:"IndexDataPointAdded",type:"event"},"MaxTwapDatapointsUpdated(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_value",type:"uint256"}],name:"MaxTwapDatapointsUpdated",type:"event"}}},"contracts/oracles/MarkPriceOracle.sol:MarkPriceOracle":{source:"contracts/oracles/MarkPriceOracle.sol",name:"MarkPriceOracle",title:"Volmex Oracle Mark SMA",author:"volmex.finance [security@volmexlabs.com]",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"MatchingEngineChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"matchingEngine",type:"address"}],name:"MatchingEngineChanged",type:"event"},"ObservationAdded(uint64,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint64",name:"index",type:"uint64"},{indexed:!1,internalType:"uint256",name:"priceCumulative",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"ObservationAdded",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"CAN_ADD_OBSERVATION()":{inputs:[],name:"CAN_ADD_OBSERVATION",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MARK_PRICE_ORACLE_ADMIN()":{inputs:[],name:"MARK_PRICE_ORACLE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"addAssets(uint256[],address[])":{inputs:[{internalType:"uint256[]",name:"_priceCumulative",type:"uint256[]"},{internalType:"address[]",name:"_asset",type:"address[]"}],name:"addAssets",outputs:[],stateMutability:"nonpayable",type:"function"},"addObservation(uint256,uint64)":{inputs:[{internalType:"uint256",name:"_priceCumulative",type:"uint256"},{internalType:"uint64",name:"_index",type:"uint64"}],name:"addObservation",outputs:[],stateMutability:"nonpayable",type:"function",params:{_priceCumulative:"Price of the asset"},notice:"Used to add price cumulative of an asset at a given timestamp"},"baseTokenByIndex(uint64)":{inputs:[{internalType:"uint64",name:"",type:"uint64"}],name:"baseTokenByIndex",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getCumulativePrice(uint256,uint64)":{inputs:[{internalType:"uint256",name:"_twInterval",type:"uint256"},{internalType:"uint64",name:"_index",type:"uint64"}],name:"getCumulativePrice",outputs:[{internalType:"uint256",name:"priceCumulative",type:"uint256"}],stateMutability:"view",type:"function",params:{_index:"Index of the observation, the index base token mapping",_twInterval:"Time in seconds of the range"},returns:{priceCumulative:"The SMA price of the asset"},notice:"Get the single moving average price of the asset"},"getLatestPrice(uint64)":{inputs:[{internalType:"uint64",name:"_index",type:"uint64"}],name:"getLatestPrice",outputs:[{internalType:"uint256",name:"latestPrice",type:"uint256"}],stateMutability:"view",type:"function",params:{_index:"Index of the observation, the index base token mapping"},notice:"Get latest price of asset"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"indexByBaseToken(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"indexByBaseToken",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},"initialize(uint256[],address[])":{inputs:[{internalType:"uint256[]",name:"_priceCumulative",type:"uint256[]"},{internalType:"address[]",name:"_asset",type:"address[]"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",params:{_asset:"Array of addresses of the assets",_priceCumulative:"Array of initial prices of the assets"},notice:"Initialize the contract"},"matchingEngine()":{inputs:[],name:"matchingEngine",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"observationsByIndex(uint64,uint256)":{inputs:[{internalType:"uint64",name:"",type:"uint64"},{internalType:"uint256",name:"",type:"uint256"}],name:"observationsByIndex",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"priceCumulative",type:"uint256"}],stateMutability:"view",type:"function"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMatchingEngine(address)":{inputs:[{internalType:"address",name:"_matchingEngine",type:"address"}],name:"setMatchingEngine",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."}}},"contracts/orderbook/AccountBalance.sol:AccountBalance":{source:"contracts/orderbook/AccountBalance.sol",name:"AccountBalance",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"PnlRealized(address,address,int256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"amount",type:"int256"}],name:"PnlRealized",type:"event"},"PositioningCalleeChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"positioningCallee",type:"address"}],name:"PositioningCalleeChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"UnderlyingPriceIndexSet(uint64)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint64",name:"underlyingIndex",type:"uint64"}],name:"UnderlyingPriceIndexSet",type:"event"},"VaultChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"}],name:"VaultChanged",type:"event"}},methods:{"ACCOUNT_BALANCE_ADMIN()":{inputs:[],name:"ACCOUNT_BALANCE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"CAN_SETTLE_REALIZED_PNL()":{inputs:[],name:"CAN_SETTLE_REALIZED_PNL",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_CALLEE_ADMIN()":{inputs:[],name:"POSITIONING_CALLEE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"getAccountInfo(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getAccountInfo",outputs:[{components:[{internalType:"int256",name:"positionSize",type:"int256"},{internalType:"int256",name:"openNotional",type:"int256"}],internalType:"struct LibAccountMarket.Info",name:"",type:"tuple"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"traderAccountInfo The baseToken account info of trader"},notice:"Get trader account info"},"getBaseTokens(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getBaseTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",params:{trader:"The address of trader"},returns:{_0:"baseTokens The array of baseToken address"},notice:"Get trader registered baseTokens"},"getIndexPrice(address)":{inputs:[{internalType:"address",name:"baseToken",type:"address"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"indexPrice",type:"uint256"}],stateMutability:"view",type:"function",details:"this function is used to fetch index price of base token"},"getLiquidatablePositionSize(address,address,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"accountValue",type:"int256"}],name:"getLiquidatablePositionSize",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",params:{accountValue:"The account value of trader",baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"liquidatablePositionSize The liquidatable position size of trader's baseToken market"},notice:"Get liquidatable position size of trader's baseToken market"},"getMarginRequirementForLiquidation(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getMarginRequirementForLiquidation",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"This is different from `Vault._getTotalMarginRequirement()`, which is for freeCollateral calculation",params:{trader:"The address of trader"},returns:{_0:"marginRequirementForLiquidation It is compared with `Positioning.getAccountValue`"},notice:"Get margin requirement to check whether trader will be able to liquidate"},"getOpenNotional(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getOpenNotional",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"openNotional The taker cost of trader's baseToken"},notice:"Get taker cost of trader's baseToken"},"getPnlAndPendingFee(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getPnlAndPendingFee",outputs:[{internalType:"int256",name:"",type:"int256"},{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",params:{trader:"The address of trader"},returns:{_0:"the pnl realized already but stored temporarily in AccountBalance",_1:"the pnl not yet realized"},notice:"Get owedRealizedPnl, realizedPnl and pending fee"},"getPositionSize(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getPositionSize",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"This will only has taker position, can get maker impermanent position through `getTotalPositionSize`",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"takerPositionSize The taker position size of trader's baseToken market"},notice:"Get taker position size of trader's baseToken market"},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPositioningConfig()":{inputs:[],name:"getPositioningConfig",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"PositioningConfig The address of PositioningConfig"},notice:"Get `PositioningConfig` address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTotalAbsPositionValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getTotalAbsPositionValue",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{trader:"The address of trader"},returns:{_0:"totalAbsPositionValue Sum up positions value of every market"},notice:"Get all market position abs value of trader"},"getTotalDebtValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getTotalDebtValue",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Total debt value will relate to `Vault.getFreeCollateral()`",params:{trader:"The address of trader"},returns:{_0:"totalDebtValue The debt value of trader"},notice:"Get total debt value of trader"},"getTotalPositionValue(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getTotalPositionValue",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"A negative returned value is only be used when calculating pnl,we use `15 mins` twap to calc position value",params:{baseToken:"The address of baseToken",trader:"The address of trader"},returns:{_0:"totalPositionValue Total position value of trader's baseToken market"},notice:"Get total position value of trader's baseToken market"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"grantSettleRealizedPnlRole(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"grantSettleRealizedPnlRole",outputs:[],stateMutability:"nonpayable",type:"function"},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address)":{inputs:[{internalType:"address",name:"positioningConfigArg",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"modifyOwedRealizedPnl(address,int256,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"int256",name:"amount",type:"int256"},{internalType:"address",name:"baseToken",type:"address"}],name:"modifyOwedRealizedPnl",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only used by `Positioning` contract",params:{amount:"Modified amount of owedRealizedPnl",trader:"The address of the trader"},notice:"Modify trader owedRealizedPnl"},"registerBaseToken(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"registerBaseToken",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only used by `Positioning` contract",params:{baseToken:"The address of the trader's base token",trader:"The address of the trader"},notice:"Every time a trader's position value is checked, the base token list of this trader will be traversed; thus, this list should be kept as short as possible"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setPositioning(address)":{inputs:[{internalType:"address",name:"positioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"setUnderlyingPriceIndex(uint64)":{inputs:[{internalType:"uint64",name:"underlyingIndex",type:"uint64"}],name:"setUnderlyingPriceIndex",outputs:[],stateMutability:"nonpayable",type:"function"},"settleBalanceAndDeregister(address,address,int256,int256,int256,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"takerBase",type:"int256"},{internalType:"int256",name:"takerQuote",type:"int256"},{internalType:"int256",name:"realizedPnl",type:"int256"},{internalType:"int256",name:"fee",type:"int256"}],name:"settleBalanceAndDeregister",outputs:[{internalType:"int256",name:"positionSize",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"Only used by `Positioning` contract",params:{baseToken:"The address of the baseToken",fee:"Amount of maker fee collected from pool",realizedPnl:"Amount of pnl realized",takerBase:"Modified amount of taker base",takerQuote:"Modified amount of taker quote",trader:"The address of the trader"},notice:"Settle account balance and deregister base token"},"settleOwedRealizedPnl(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"settleOwedRealizedPnl",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"Only used by `Vault.withdraw()`",params:{trader:"The address of the trader"},returns:{_0:"Settled owedRealizedPnl"},notice:"Settle owedRealizedPnl"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."}}},"contracts/orderbook/OrderValidator.sol:OrderValidator":{source:"contracts/orderbook/OrderValidator.sol",name:"OrderValidator",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"}},methods:{"makerMinSalt(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"makerMinSalt",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/orderbook/Positioning.sol:Positioning":{source:"contracts/orderbook/Positioning.sol",name:"Positioning",events:{"DefaultFeeReceiverChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"defaultFeeReceiver",type:"address"}],name:"DefaultFeeReceiverChanged",type:"event",notice:"Emitted when defualt fee receiver is changed"},"FundingIntervalSet(int256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"int256",name:"fundingInterval",type:"int256"}],name:"FundingIntervalSet",type:"event"},"FundingPaymentSettled(address,address,int256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"fundingPayment",type:"int256"}],name:"FundingPaymentSettled",type:"event",notice:"Emitted when settling a trader's funding payment"},"FundingUpdated(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"markTwap",type:"uint256"},{indexed:!1,internalType:"uint256",name:"indexTwap",type:"uint256"}],name:"FundingUpdated",type:"event",notice:"event to emit after funding updated"},"IndexPriceSet(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"indexPriceOracle",type:"address"}],name:"IndexPriceSet",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LiquidatorWhitelisted(address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"liquidator",type:"address"},{indexed:!1,internalType:"bool",name:"isWhitelist",type:"bool"}],name:"LiquidatorWhitelisted",type:"event",notice:"Emitted when liquidator is whitelisted or removed"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"PositionChanged(address,address,int256,int256,uint256,uint256,bytes4,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"exchangedPositionSize",type:"int256"},{indexed:!1,internalType:"int256",name:"exchangedPositionNotional",type:"int256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"orderIndexPrice",type:"uint256"},{indexed:!1,internalType:"bytes4",name:"orderType",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isShort",type:"bool"}],name:"PositionChanged",type:"event",notice:"Emitted when taker's position is being changed"},"PositionLiquidated(address,address,uint256,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"positionNotional",type:"uint256"},{indexed:!1,internalType:"uint256",name:"positionSize",type:"uint256"},{indexed:!1,internalType:"uint256",name:"liquidationFee",type:"uint256"},{indexed:!1,internalType:"address",name:"liquidator",type:"address"}],name:"PositionLiquidated",type:"event",notice:"Emitted when taker position is being liquidated"},"PositioningCalleeChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"positioningCallee",type:"address"}],name:"PositioningCalleeChanged",type:"event"},"ReferredPositionChanged(bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"referralCode",type:"bytes32"}],name:"ReferredPositionChanged",type:"event",notice:"Emitted when open position with non-zero referral code"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"TrustedForwarderChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"forwarder",type:"address"}],name:"TrustedForwarderChanged",type:"event",notice:"Emitted when trusted forwarder address changed"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_ADMIN()":{inputs:[],name:"POSITIONING_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_CALLEE_ADMIN()":{inputs:[],name:"POSITIONING_CALLEE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"defaultFeeReceiver()":{inputs:[],name:"defaultFeeReceiver",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getAccountBalance()":{inputs:[],name:"getAccountBalance",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"`AccountBalance` address"},notice:"Get AccountBalance address"},"getAccountValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getAccountValue",outputs:[{internalType:"int256",name:"accountValue",type:"int256"}],stateMutability:"view",type:"function",details:"Used to fetch account value of a trader"},"getAllPendingFundingPayment(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getAllPendingFundingPayment",outputs:[{internalType:"int256",name:"pendingFundingPayment",type:"int256"}],stateMutability:"view",type:"function",details:"this function calculates total pending funding payment of a trader"},"getIndexPrice(address)":{inputs:[{internalType:"address",name:"baseToken",type:"address"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"indexPrice",type:"uint256"}],stateMutability:"view",type:"function",details:"this function is used to fetch index price of base token"},"getLiquidatablePosition(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getLiquidatablePosition",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},notice:"Get position size of a trader to be liquidated"},"getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"getOrderValidate",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"getPendingFundingPayment(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getPendingFundingPayment",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"this function calculates pending funding payment of a trader respective to basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"}},"getPnlToBeRealized((address,address,int256,int256))":{inputs:[{components:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"base",type:"int256"},{internalType:"int256",name:"quote",type:"int256"}],internalType:"struct IPositioning.RealizePnlParams",name:"params",type:"tuple"}],name:"getPnlToBeRealized",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"This function normally won't be needed by traders, but it might be useful for 3rd party",params:{params:"The params needed to do the query, encoded as `RealizePnlParams` in calldata"},returns:{_0:"The pnl that can be realized if trader reduce position"},notice:"Get the pnl that can be realized if trader reduce position"},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPositioningConfig()":{inputs:[],name:"getPositioningConfig",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"PositioningConfig address"},notice:"Get PositioningConfig address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getVaultController()":{inputs:[],name:"getVaultController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"`Vault` address"},notice:"Get `Vault` address"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address,address,address,address,address,address,uint64,address[2])":{inputs:[{internalType:"address",name:"positioningConfigArg",type:"address"},{internalType:"address",name:"vaultControllerArg",type:"address"},{internalType:"address",name:"accountBalanceArg",type:"address"},{internalType:"address",name:"matchingEngineArg",type:"address"},{internalType:"address",name:"markPriceArg",type:"address"},{internalType:"address",name:"indexPriceArg",type:"address"},{internalType:"uint64",name:"underlyingPriceIndex",type:"uint64"},{internalType:"address[2]",name:"liquidators",type:"address[2]"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"this function is public for testing"},"isAccountLiquidatable(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"isAccountLiquidatable",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"this function is used to know the trader is liquidateable"},"isLiquidatorWhitelist(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isLiquidatorWhitelist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"liquidate(address,address,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"positionSize",type:"int256"}],name:"liquidate",outputs:[],stateMutability:"nonpayable",type:"function",details:"If trader has open orders, need to call `cancelAllExcessOrders` firstIf positionSize is greater than maxLiquidatePositionSize, liquidate maxLiquidatePositionSize by defaultIf margin ratio >= 0.5 * mmRatio,         maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1maxLiquidatePositionSize = positionSize * maxLiquidateRatio",params:{baseToken:"The address of baseToken",positionSize:"the position size to be liquidated by liquidator",trader:"The address of trader"},notice:"If trader is underwater, any one can call `liquidate` to liquidate this trader"},"liquidateFullPosition(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"liquidateFullPosition",outputs:[],stateMutability:"nonpayable",type:"function",details:"If margin ratio >= 0.5 * mmRatio, maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1maxLiquidatePositionSize = positionSize * maxLiquidateRatio",params:{baseToken:"The address of baseToken",trader:"The address of trader"},notice:"TODO: Test if this function liquidate full position even with when only partial was needed"},"makerMinSalt(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"makerMinSalt",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderLeft",type:"tuple"},{internalType:"bytes",name:"signatureLeft",type:"bytes"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderRight",type:"tuple"},{internalType:"bytes",name:"signatureRight",type:"bytes"},{internalType:"bytes",name:"liquidator",type:"bytes"}],name:"openPosition",outputs:[],stateMutability:"nonpayable",type:"function",params:{orderLeft:"PositionParams struct",orderRight:"PositionParams struct"},notice:"Trader can call `openPosition` to long/short on baseToken market"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setDefaultFeeReceiver(address)":{inputs:[{internalType:"address",name:"newDefaultFeeReceiver",type:"address"}],name:"setDefaultFeeReceiver",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Function to set fee receiver"},"setFundingInterval(int256)":{inputs:[{internalType:"int256",name:"interval",type:"int256"}],name:"setFundingInterval",outputs:[],stateMutability:"nonpayable",type:"function",params:{interval:"denominator for 24 hours and get interval value, eg 24/3 = 8 hour interval of funding payment"},notice:"Update funding rate inteval"},"setIndexPriceOracle(address)":{inputs:[{internalType:"address",name:"indexPriceOracle",type:"address"}],name:"setIndexPriceOracle",outputs:[],stateMutability:"nonpayable",type:"function"},"setMarketRegistry(address)":{inputs:[{internalType:"address",name:"marketRegistryArg",type:"address"}],name:"setMarketRegistry",outputs:[],stateMutability:"nonpayable",type:"function"},"setPositioning(address)":{inputs:[{internalType:"address",name:"positioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"settleAllFunding(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"settleAllFunding",outputs:[],stateMutability:"nonpayable",type:"function",params:{trader:"The address of trader"},notice:"Settle all markets fundingPayment to owedRealized Pnl"},"settleFunding(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"settleFunding",outputs:[{internalType:"int256",name:"fundingPayment",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"this function is used to settle funding f a trader on the basis of given basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"},returns:{fundingPayment:"pnding funding payment on this basetoken"}},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},"whitelistLiquidator(address,bool)":{inputs:[{internalType:"address",name:"liquidator",type:"address"},{internalType:"bool",name:"isWhitelist",type:"bool"}],name:"whitelistLiquidator",outputs:[],stateMutability:"nonpayable",type:"function",params:{isWhitelist:"if true, whitelist. is false remove whitelist"},notice:"Update whitelist for a liquidator"}}},"contracts/orderbook/PositioningConfig.sol:PositioningConfig":{source:"contracts/orderbook/PositioningConfig.sol",name:"PositioningConfig",events:{"InitialMarginChanged(uint24)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint24",name:"imRatio",type:"uint24"}],name:"InitialMarginChanged",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LiquidationPenaltyRatioChanged(uint24)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint24",name:"liquidationPenaltyRatio",type:"uint24"}],name:"LiquidationPenaltyRatioChanged",type:"event"},"MaintenanceMarginChanged(uint24)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint24",name:"mmRatio",type:"uint24"}],name:"MaintenanceMarginChanged",type:"event"},"MaxFundingRateChanged(uint24)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint24",name:"rate",type:"uint24"}],name:"MaxFundingRateChanged",type:"event"},"MaxMarketsPerAccountChanged(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"maxMarketsPerAccount",type:"uint8"}],name:"MaxMarketsPerAccountChanged",type:"event"},"PartialCloseRatioChanged(uint24)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint24",name:"partialCloseRatio",type:"uint24"}],name:"PartialCloseRatioChanged",type:"event"},"PartialLiquidationRatioChanged(uint24)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint24",name:"partialLiquidationRatio",type:"uint24"}],name:"PartialLiquidationRatioChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"SettlementTokenBalanceCapChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"cap",type:"uint256"}],name:"SettlementTokenBalanceCapChanged",type:"event"},"TwapIntervalChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"twapInterval",type:"uint256"}],name:"TwapIntervalChanged",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_CONFIG_ADMIN()":{inputs:[],name:"POSITIONING_CONFIG_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"getImRatio()":{inputs:[],name:"getImRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",returns:{_0:"Initial margin ratio"}},"getLiquidationPenaltyRatio()":{inputs:[],name:"getLiquidationPenaltyRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",returns:{_0:"Liquidation penalty ratio"}},"getMaxFundingRate()":{inputs:[],name:"getMaxFundingRate",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",returns:{_0:"Max value of funding rate"}},"getMaxMarketsPerAccount()":{inputs:[],name:"getMaxMarketsPerAccount",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",returns:{_0:"Max value of total markets per account"}},"getMmRatio()":{inputs:[],name:"getMmRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",returns:{_0:"Maintenance margin requirement ratio"}},"getPartialCloseRatio()":{inputs:[],name:"getPartialCloseRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",returns:{_0:"Partial close ratio"}},"getPartialLiquidationRatio()":{inputs:[],name:"getPartialLiquidationRatio",outputs:[{internalType:"uint24",name:"",type:"uint24"}],stateMutability:"view",type:"function",returns:{_0:"partial liquidation ratio"}},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getSettlementTokenBalanceCap()":{inputs:[],name:"getSettlementTokenBalanceCap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Max value of settlement token balance"}},"getTwapInterval()":{inputs:[],name:"getTwapInterval",outputs:[{internalType:"uint32",name:"",type:"uint32"}],stateMutability:"view",type:"function",returns:{_0:"TwapInterval for funding and prices (mark & index) calculations"}},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize()":{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setImRatio(uint24)":{inputs:[{internalType:"uint24",name:"imRatioArg",type:"uint24"}],name:"setImRatio",outputs:[],stateMutability:"nonpayable",type:"function"},"setLiquidationPenaltyRatio(uint24)":{inputs:[{internalType:"uint24",name:"liquidationPenaltyRatioArg",type:"uint24"}],name:"setLiquidationPenaltyRatio",outputs:[],stateMutability:"nonpayable",type:"function"},"setMaxFundingRate(uint24)":{inputs:[{internalType:"uint24",name:"rate",type:"uint24"}],name:"setMaxFundingRate",outputs:[],stateMutability:"nonpayable",type:"function"},"setMaxMarketsPerAccount(uint8)":{inputs:[{internalType:"uint8",name:"maxMarketsPerAccountArg",type:"uint8"}],name:"setMaxMarketsPerAccount",outputs:[],stateMutability:"nonpayable",type:"function"},"setMmRatio(uint24)":{inputs:[{internalType:"uint24",name:"mmRatioArg",type:"uint24"}],name:"setMmRatio",outputs:[],stateMutability:"nonpayable",type:"function"},"setPartialCloseRatio(uint24)":{inputs:[{internalType:"uint24",name:"partialCloseRatioArg",type:"uint24"}],name:"setPartialCloseRatio",outputs:[],stateMutability:"nonpayable",type:"function"},"setPartialLiquidationRatio(uint24)":{inputs:[{internalType:"uint24",name:"partialLiquidationRatioArg",type:"uint24"}],name:"setPartialLiquidationRatio",outputs:[],stateMutability:"nonpayable",type:"function"},"setSettlementTokenBalanceCap(uint256)":{inputs:[{internalType:"uint256",name:"cap",type:"uint256"}],name:"setSettlementTokenBalanceCap",outputs:[],stateMutability:"nonpayable",type:"function"},"setTwapInterval(uint32)":{inputs:[{internalType:"uint32",name:"twapIntervalArg",type:"uint32"}],name:"setTwapInterval",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."}}},"contracts/orderbook/Vault.sol:Vault":{source:"contracts/orderbook/Vault.sol",name:"Vault",events:{"BorrowFund(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"from",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"BorrowFund",type:"event",notice:"Emitted when vault borrow the amount"},"DebtRepayed(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"DebtRepayed",type:"event",notice:"Emitted when vault repay the debt"},"Deposited(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"collateralToken",type:"address"},{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposited",type:"event",notice:"Emitted when trader deposit collateral into vault"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LowBalance(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"LowBalance",type:"event",notice:"Emitted when vault have low balance"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},"Withdrawn(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"collateralToken",type:"address"},{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdrawn",type:"event",notice:"Emitted when trader withdraw collateral from vault"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VAULT_ADMIN()":{inputs:[],name:"VAULT_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"cached the settlement token's decimal for gas optimization",returns:{_0:"The decimals of settlement token"},notice:"Get settlement token decimals"},"deposit(address,uint256,address)":{inputs:[{internalType:"contract IVolmexPerpPeriphery",name:"periphery",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"from",type:"address"}],name:"deposit",outputs:[],stateMutability:"payable",type:"function",params:{amount:"The amount of the token to deposit",from:"The address of the trader"},notice:"Deposit collateral into vault"},"getAccountBalance()":{inputs:[],name:"getAccountBalance",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"The address of `AccountBalance` contract"},notice:"Get `AccountBalance` contract address"},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Positioning The address of `Positioning` contract"},notice:"Get `Positioning` contract address"},"getPositioningConfig()":{inputs:[],name:"getPositioningConfig",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"The address of `PositioningConfig` contract"},notice:"Get `PositioningConfig` contract address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getSettlementToken()":{inputs:[],name:"getSettlementToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"The address of settlement token"},notice:"Get settlement token address"},"getTotalDebt()":{inputs:[],name:"getTotalDebt",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"The debt amount"},notice:"Get the debt amount in vault"},"getVaultController()":{inputs:[],name:"getVaultController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Get `Vault controller` contract address"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address,address,address,address,bool)":{inputs:[{internalType:"address",name:"positioningConfigArg",type:"address"},{internalType:"address",name:"accountBalanceArg",type:"address"},{internalType:"address",name:"tokenArg",type:"address"},{internalType:"address",name:"vaultControllerArg",type:"address"},{internalType:"bool",name:"isEthVaultArg",type:"bool"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"isEthVault()":{inputs:[],name:"isEthVault",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"repayDebtToOwner(address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"repayDebtToOwner",outputs:[],stateMutability:"nonpayable",type:"function",details:"once multi-collateral is implemented, the token is not limited to settlementToken",params:{amount:"The amount of the token to withdraw",token:"The address of the token"},notice:"function to repay debt taken during low balance period"},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setPositioning(address)":{inputs:[{internalType:"address",name:"positioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Set positioning contract"},"setSettlementToken(address)":{inputs:[{internalType:"address",name:"newTokenArg",type:"address"}],name:"setSettlementToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{newTokenArg:"The address of `Positioning` contract"},notice:"Set new settlement token"},"setVaultController(address)":{inputs:[{internalType:"address",name:"vaultControllerArg",type:"address"}],name:"setVaultController",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Set vault controller contract"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferFundToVault(address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFundToVault",outputs:[],stateMutability:"nonpayable",type:"function",details:"once multi-collateral is implemented, the token is not limited to settlementToken",params:{amount:"The amount of the token to withdraw",token:"The address of the token vault need funding"},notice:"transfer fund to vault in case of low balance"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},"withdraw(uint256,address)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"to",type:"address"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"The amount of the token to withdraw",to:"The address of the trader"},notice:"Withdraw collateral from vault"}}},"contracts/orderbook/VaultController.sol:VaultController":{source:"contracts/orderbook/VaultController.sol",name:"VaultController",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VAULT_CONTROLLER_ADMIN()":{inputs:[],name:"VAULT_CONTROLLER_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"deposit(address,address,address,uint256)":{inputs:[{internalType:"contract IVolmexPerpPeriphery",name:"periphery",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"payable",type:"function",params:{amount:"The amount of the token to deposit",token:"The address of the token to deposit"},notice:"Deposit collateral into vault"},"getAccountValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getAccountValue",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",notice:"Function to get total account value of a trader"},"getBalance(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getBalance",outputs:[{internalType:"int256",name:"balanceX10_18",type:"int256"}],stateMutability:"view",type:"function",notice:"Function to balance of the trader in 18 Decimals"},"getBalanceByToken(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"token",type:"address"}],name:"getBalanceByToken",outputs:[{internalType:"int256",name:"balanceX10_18",type:"int256"}],stateMutability:"view",type:"function",notice:"Function to balance of the trader on the basis of token in 18 Decimals"},"getFreeCollateralByRatio(address,uint24)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"uint24",name:"ratio",type:"uint24"}],name:"getFreeCollateralByRatio",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",notice:"Function to get total free collateral of a trader by given ratio"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getVault(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"getVault",outputs:[{internalType:"address",name:"vault",type:"address"}],stateMutability:"view",type:"function",notice:"Function to get address of the vault related to given token"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address,address)":{inputs:[{internalType:"address",name:"positioningConfig",type:"address"},{internalType:"address",name:"accountBalanceArg",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"registerVault(address,address)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_token",type:"address"}],name:"registerVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Function to register new vault"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setPositioning(address)":{inputs:[{internalType:"address",name:"PositioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Function to set positioning contract"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},"withdraw(address,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address payable",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"The amount of the token to withdraw",token:"The address of the token sender is going to withdraw"},notice:"Withdraw collateral from vault"}}},"contracts/periphery/VolmexPerpPeriphery.sol:VolmexPerpPeriphery":{source:"contracts/periphery/VolmexPerpPeriphery.sol",name:"VolmexPerpPeriphery",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"RelayerUpdated(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"newRelayerAddress",type:"address"}],name:"RelayerUpdated",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"VaultWhitelisted(address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"},{indexed:!1,internalType:"bool",name:"isWhitelist",type:"bool"}],name:"VaultWhitelisted",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"RELAYER_MULTISIG()":{inputs:[],name:"RELAYER_MULTISIG",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VOLMEX_PERP_PERIPHERY()":{inputs:[],name:"VOLMEX_PERP_PERIPHERY",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"batchFillLimitOrders(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[],bytes[],(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[],bytes[],bytes)":{inputs:[{internalType:"uint256",name:"_index",type:"uint256"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"_leftLimitOrders",type:"tuple[]"},{internalType:"bytes[]",name:"_signaturesLeftLimitOrder",type:"bytes[]"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"_rightLimitOrders",type:"tuple[]"},{internalType:"bytes[]",name:"_signaturesRightLimitOrder",type:"bytes[]"},{internalType:"bytes",name:"liquidator",type:"bytes"}],name:"batchFillLimitOrders",outputs:[],stateMutability:"nonpayable",type:"function"},"batchOpenPosition(uint64,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[],bytes[],(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[],bytes[],bytes)":{inputs:[{internalType:"uint64",name:"_index",type:"uint64"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"_ordersLeft",type:"tuple[]"},{internalType:"bytes[]",name:"_signaturesLeft",type:"bytes[]"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"_ordersRight",type:"tuple[]"},{internalType:"bytes[]",name:"_signaturesRight",type:"bytes[]"},{internalType:"bytes",name:"liquidator",type:"bytes"}],name:"batchOpenPosition",outputs:[],stateMutability:"nonpayable",type:"function"},"depositToVault(uint64,address,uint256)":{inputs:[{internalType:"uint64",name:"_index",type:"uint64"},{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"depositToVault",outputs:[],stateMutability:"payable",type:"function"},"fillLimitOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes,uint256)":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"_leftLimitOrder",type:"tuple"},{internalType:"bytes",name:"_signatureLeftLimitOrder",type:"bytes"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"_rightLimitOrder",type:"tuple"},{internalType:"bytes",name:"_signatureRightLimitOrder",type:"bytes"},{internalType:"bytes",name:"liquidator",type:"bytes"},{internalType:"uint256",name:"_index",type:"uint256"}],name:"fillLimitOrder",outputs:[],stateMutability:"nonpayable",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address,address,address[2],address,address)":{inputs:[{internalType:"contract IVolmexPerpView",name:"_perpView",type:"address"},{internalType:"contract IMarkPriceOracle",name:"_markPriceOracle",type:"address"},{internalType:"address[2]",name:"_vaults",type:"address[2]"},{internalType:"address",name:"_owner",type:"address"},{internalType:"address",name:"_relayer",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Sets the positioning & vaultControllers",params:{_owner:"Address of the admin EOA",_perpView:"Address of PerpView contractt",_relayer:"Address of relayer to execute open position"},notice:"Initializes the contract"},"markPriceOracle()":{inputs:[],name:"markPriceOracle",outputs:[{internalType:"contract IMarkPriceOracle",name:"",type:"address"}],stateMutability:"view",type:"function"},"openPosition(uint64,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)":{inputs:[{internalType:"uint64",name:"_index",type:"uint64"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"_orderLeft",type:"tuple"},{internalType:"bytes",name:"_signatureLeft",type:"bytes"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"_orderRight",type:"tuple"},{internalType:"bytes",name:"_signatureRight",type:"bytes"},{internalType:"bytes",name:"liquidator",type:"bytes"}],name:"openPosition",outputs:[],stateMutability:"nonpayable",type:"function"},"perpView()":{inputs:[],name:"perpView",outputs:[{internalType:"contract IVolmexPerpView",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMarkPriceOracle(address)":{inputs:[{internalType:"contract IMarkPriceOracle",name:"_markPriceOracle",type:"address"}],name:"setMarkPriceOracle",outputs:[],stateMutability:"nonpayable",type:"function"},"setRelayer(address)":{inputs:[{internalType:"address",name:"_relayer",type:"address"}],name:"setRelayer",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferToVault(address,address,uint256)":{inputs:[{internalType:"contract IERC20Upgradeable",name:"_token",type:"address"},{internalType:"address",name:"_from",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"transferToVault",outputs:[],stateMutability:"nonpayable",type:"function"},"whitelistVault(address,bool)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"bool",name:"_isWhitelist",type:"bool"}],name:"whitelistVault",outputs:[],stateMutability:"nonpayable",type:"function"},"withdrawFromVault(uint64,address,address,uint256)":{inputs:[{internalType:"uint64",name:"_index",type:"uint64"},{internalType:"address",name:"_token",type:"address"},{internalType:"address payable",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdrawFromVault",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1":{source:"contracts/storage/AccountBalanceStorage.sol",name:"AccountBalanceStorageV1",notice:"For future upgrades, do not change AccountBalanceStorageV1. Create a new contract which implements AccountBalanceStorageV1 and following the naming convention AccountBalanceStorageVX.",methods:{"ACCOUNT_BALANCE_ADMIN()":{inputs:[],name:"ACCOUNT_BALANCE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"CAN_SETTLE_REALIZED_PNL()":{inputs:[],name:"CAN_SETTLE_REALIZED_PNL",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}}},"contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1":{source:"contracts/storage/BaseTokenStorage.sol",name:"BaseTokenStorageV1",notice:"For future upgrades, do not change BaseTokenStorageV1. Create a new contract which implements BaseTokenStorageV1 and following the naming convention BaseTokenStorageVX."},"contracts/storage/FundingRateStorage.sol:FundingRateStorage":{source:"contracts/storage/FundingRateStorage.sol",name:"FundingRateStorage",notice:"For future upgrades, do not change ExchangeStorageV1. Create a new contract which implements ExchangeStorageV1 and following the naming convention ExchangeStorageVX."},"contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1":{source:"contracts/storage/MarketRegistryStorage.sol",name:"MarketRegistryStorageV1",notice:"For future upgrades, do not change MarketRegistryStorageV1. Create a new contract which implements MarketRegistryStorageV1 and following the naming convention MarketRegistryStorageVX.",methods:{"MARKET_REGISTRY_ADMIN()":{inputs:[],name:"MARKET_REGISTRY_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}}},"contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1":{source:"contracts/storage/PositioningConfigStorage.sol",name:"PositioningConfigStorageV1",notice:"For future upgrades, do not change PositioningConfigStorageV1. Create a new contract which implements PositioningConfigStorageV1 and following the naming convention PositioningConfigStorageVX.",methods:{"POSITIONING_CONFIG_ADMIN()":{inputs:[],name:"POSITIONING_CONFIG_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}}},"contracts/storage/PositioningStorage.sol:PositioningStorageV1":{source:"contracts/storage/PositioningStorage.sol",name:"PositioningStorageV1",notice:"For future upgrades, do not change PositioningStorageV1. Create a new contract which implements PositioningStorageV1 and following the naming convention PositioningStorageVX.",methods:{"POSITIONING_ADMIN()":{inputs:[],name:"POSITIONING_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"defaultFeeReceiver()":{inputs:[],name:"defaultFeeReceiver",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"isLiquidatorWhitelist(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isLiquidatorWhitelist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}}},"contracts/storage/VaultControllerStorage.sol:VaultControllerStorage":{source:"contracts/storage/VaultControllerStorage.sol",name:"VaultControllerStorage",methods:{"VAULT_CONTROLLER_ADMIN()":{inputs:[],name:"VAULT_CONTROLLER_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}}},"contracts/storage/VaultStorage.sol:VaultStorageV1":{source:"contracts/storage/VaultStorage.sol",name:"VaultStorageV1",notice:"For future upgrades, do not change VaultStorageV1. Create a new contract which implements VaultStorageV1 and following the naming convention VaultStorageVX.",methods:{"VAULT_ADMIN()":{inputs:[],name:"VAULT_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}}},"contracts/tests/AssetMatcherTest.sol:AssetMatcherTest":{source:"contracts/tests/AssetMatcherTest.sol",name:"AssetMatcherTest",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"__AssetMatcherTest_init()":{inputs:[],name:"__AssetMatcherTest_init",outputs:[],stateMutability:"nonpayable",type:"function"},"matchAssetsTest(address,address)":{inputs:[{internalType:"address",name:"leftBaseToken",type:"address"},{internalType:"address",name:"rightBaseToken",type:"address"}],name:"matchAssetsTest",outputs:[{internalType:"address",name:"baseToken",type:"address"}],stateMutability:"pure",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/tests/ERC1271.sol:ERC1271":{source:"contracts/tests/ERC1271.sol",name:"ERC1271",methods:{"ERC1271_INTERFACE_ID()":{inputs:[],name:"ERC1271_INTERFACE_ID",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"},"ERC1271_RETURN_INVALID_SIGNATURE()":{inputs:[],name:"ERC1271_RETURN_INVALID_SIGNATURE",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"},"ERC1271_RETURN_VALID_SIGNATURE()":{inputs:[],name:"ERC1271_RETURN_VALID_SIGNATURE",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"},"isValidSignature(bytes32,bytes)":{inputs:[{internalType:"bytes32",name:"_hash",type:"bytes32"},{internalType:"bytes",name:"_signature",type:"bytes"}],name:"isValidSignature",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function",details:"Function must be implemented by deriving contract",params:{_hash:"Arbitrary length data signed on the behalf of address(this)",_signature:"Signature byte array associated with _data"},returns:{_0:"A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls"}}}},"contracts/tests/ERC1271Test.sol:ERC1271Test":{source:"contracts/tests/ERC1271Test.sol",name:"ERC1271Test",methods:{"ERC1271_INTERFACE_ID()":{inputs:[],name:"ERC1271_INTERFACE_ID",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"},"ERC1271_RETURN_INVALID_SIGNATURE()":{inputs:[],name:"ERC1271_RETURN_INVALID_SIGNATURE",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"},"ERC1271_RETURN_VALID_SIGNATURE()":{inputs:[],name:"ERC1271_RETURN_VALID_SIGNATURE",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"},"getAllowance(address,address)":{inputs:[{internalType:"address",name:"_addr",type:"address"},{internalType:"address",name:"_virtualTokenAddr",type:"address"}],name:"getAllowance",outputs:[],stateMutability:"nonpayable",type:"function"},"isValidSignature(bytes32,bytes)":{inputs:[{internalType:"bytes32",name:"",type:"bytes32"},{internalType:"bytes",name:"",type:"bytes"}],name:"isValidSignature",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"view",type:"function"},"setReturnSuccessfulValidSignature(bool)":{inputs:[{internalType:"bool",name:"value",type:"bool"}],name:"setReturnSuccessfulValidSignature",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/tests/ERC20TransferProxyTest.sol:ERC20TransferProxyTest":{source:"contracts/tests/ERC20TransferProxyTest.sol",name:"ERC20TransferProxyTest",methods:{"erc20SafeTransferFrom(address,address,address,uint256)":{inputs:[{internalType:"contract IERC20Upgradeable",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"erc20SafeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/tests/ExchangeTest.sol:ExchangeTest":{source:"contracts/tests/ExchangeTest.sol",name:"ExchangeTest",methods:{"addObservation(uint256,uint64)":{inputs:[{internalType:"uint256",name:"_priceCumulative",type:"uint256"},{internalType:"uint64",name:"_index",type:"uint64"}],name:"addObservation",outputs:[],stateMutability:"nonpayable",type:"function"},"markPriceOracle()":{inputs:[],name:"markPriceOracle",outputs:[{internalType:"contract MarkPriceOracle",name:"",type:"address"}],stateMutability:"view",type:"function"},"setMarkPriceOracle(address)":{inputs:[{internalType:"contract MarkPriceOracle",name:"_markPriceOracle",type:"address"}],name:"setMarkPriceOracle",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/tests/LibOrderTest.sol:LibOrderTest":{source:"contracts/tests/LibOrderTest.sol",name:"LibOrderTest",methods:{"calculateRemaining((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),uint256)":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"},{internalType:"uint256",name:"fill",type:"uint256"}],name:"calculateRemaining",outputs:[{internalType:"uint256",name:"baseValue",type:"uint256"},{internalType:"uint256",name:"quoteValue",type:"uint256"}],stateMutability:"pure",type:"function"},"hash((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"hash",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"pure",type:"function"},"hashKey((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"hashKey",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"pure",type:"function"},"validate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"validate",outputs:[],stateMutability:"view",type:"function"}}},"contracts/tests/MatchingEngineTest.sol:MatchingEngineTest":{source:"contracts/tests/MatchingEngineTest.sol",name:"MatchingEngineTest",events:{"Canceled(bytes32,address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"hash",type:"bytes32"},{indexed:!1,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"salt",type:"uint256"}],name:"Canceled",type:"event"},"CanceledAll(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!1,internalType:"uint256",name:"minSalt",type:"uint256"}],name:"CanceledAll",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"Matched(address[2],uint64[2],uint256[2],uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address[2]",name:"traders",type:"address[2]"},{indexed:!1,internalType:"uint64[2]",name:"deadline",type:"uint64[2]"},{indexed:!1,internalType:"uint256[2]",name:"salt",type:"uint256[2]"},{indexed:!1,internalType:"uint256",name:"newLeftFill",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newRightFill",type:"uint256"}],name:"Matched",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"CAN_MATCH_ORDERS()":{inputs:[],name:"CAN_MATCH_ORDERS",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MATCHING_ENGINE_CORE_ADMIN()":{inputs:[],name:"MATCHING_ENGINE_CORE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"__MatchingEngineTest_init(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"contract IMarkPriceOracle",name:"markPriceOracle",type:"address"}],name:"__MatchingEngineTest_init",outputs:[],stateMutability:"nonpayable",type:"function"},"addAssets(uint256[],address[])":{inputs:[{internalType:"uint256[]",name:"_priceCumulative",type:"uint256[]"},{internalType:"address[]",name:"_asset",type:"address[]"}],name:"addAssets",outputs:[],stateMutability:"nonpayable",type:"function"},"addObservation(uint256,uint64)":{inputs:[{internalType:"uint256",name:"_priceCumulative",type:"uint256"},{internalType:"uint64",name:"_index",type:"uint64"}],name:"addObservation",outputs:[],stateMutability:"nonpayable",type:"function"},"cancelAllOrders(uint256)":{inputs:[{internalType:"uint256",name:"minSalt",type:"uint256"}],name:"cancelAllOrders",outputs:[],stateMutability:"nonpayable",type:"function",params:{minSalt:"salt in minimum of all orders"},notice:"Cancels all orders"},"cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"cancelOrder",outputs:[],stateMutability:"nonpayable",type:"function",params:{order:"the order to be cancelled"},notice:"Cancels a given order"},"cancelOrdersInBatch((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[])":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"orders",type:"tuple[]"}],name:"cancelOrdersInBatch",outputs:[],stateMutability:"nonpayable",type:"function",params:{orders:"Array or orders to be cancelled"},notice:"Cancels multiple orders in batch"},"fills(bytes32)":{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"fills",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantMatchOrders(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"grantMatchOrders",outputs:[],stateMutability:"nonpayable",type:"function"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address,address)":{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"contract IMarkPriceOracle",name:"_markPriceOracle",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",params:{_markPriceOracle:"Address of mark price oracle",_owner:"Owner address"},notice:"Initialize the contract"},"makerMinSalt(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"makerMinSalt",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"markPriceOracle()":{inputs:[],name:"markPriceOracle",outputs:[{internalType:"contract IMarkPriceOracle",name:"",type:"address"}],stateMutability:"view",type:"function"},"matchOrderInBatch((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[],(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool)[])":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"ordersLeft",type:"tuple[]"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order[]",name:"ordersRight",type:"tuple[]"}],name:"matchOrderInBatch",outputs:[],stateMutability:"nonpayable",type:"function"},"matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderLeft",type:"tuple"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderRight",type:"tuple"}],name:"matchOrders",outputs:[{components:[{internalType:"uint256",name:"leftValue",type:"uint256"},{internalType:"uint256",name:"rightValue",type:"uint256"}],internalType:"struct LibFill.FillResult",name:"",type:"tuple"}],stateMutability:"nonpayable",type:"function",params:{orderLeft:"the left side of order",orderRight:"the right side of order"},notice:"Will match two orders & transfers assets"},"matchOrdersTest((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderLeft",type:"tuple"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderRight",type:"tuple"}],name:"matchOrdersTest",outputs:[],stateMutability:"payable",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMakerMinSalt(uint256)":{inputs:[{internalType:"uint256",name:"_val",type:"uint256"}],name:"setMakerMinSalt",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/tests/PositioningTest.sol:PositioningTest":{source:"contracts/tests/PositioningTest.sol",name:"PositioningTest",events:{"DefaultFeeReceiverChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"defaultFeeReceiver",type:"address"}],name:"DefaultFeeReceiverChanged",type:"event",notice:"Emitted when defualt fee receiver is changed"},"FundingIntervalSet(int256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"int256",name:"fundingInterval",type:"int256"}],name:"FundingIntervalSet",type:"event"},"FundingPaymentSettled(address,address,int256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"fundingPayment",type:"int256"}],name:"FundingPaymentSettled",type:"event",notice:"Emitted when settling a trader's funding payment"},"FundingUpdated(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"markTwap",type:"uint256"},{indexed:!1,internalType:"uint256",name:"indexTwap",type:"uint256"}],name:"FundingUpdated",type:"event",notice:"event to emit after funding updated"},"IndexPriceSet(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"indexPriceOracle",type:"address"}],name:"IndexPriceSet",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LiquidatorWhitelisted(address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"liquidator",type:"address"},{indexed:!1,internalType:"bool",name:"isWhitelist",type:"bool"}],name:"LiquidatorWhitelisted",type:"event",notice:"Emitted when liquidator is whitelisted or removed"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"PositionChanged(address,address,int256,int256,uint256,uint256,bytes4,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"int256",name:"exchangedPositionSize",type:"int256"},{indexed:!1,internalType:"int256",name:"exchangedPositionNotional",type:"int256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"orderIndexPrice",type:"uint256"},{indexed:!1,internalType:"bytes4",name:"orderType",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isShort",type:"bool"}],name:"PositionChanged",type:"event",notice:"Emitted when taker's position is being changed"},"PositionLiquidated(address,address,uint256,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"trader",type:"address"},{indexed:!0,internalType:"address",name:"baseToken",type:"address"},{indexed:!1,internalType:"uint256",name:"positionNotional",type:"uint256"},{indexed:!1,internalType:"uint256",name:"positionSize",type:"uint256"},{indexed:!1,internalType:"uint256",name:"liquidationFee",type:"uint256"},{indexed:!1,internalType:"address",name:"liquidator",type:"address"}],name:"PositionLiquidated",type:"event",notice:"Emitted when taker position is being liquidated"},"PositioningCalleeChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"positioningCallee",type:"address"}],name:"PositioningCalleeChanged",type:"event"},"ReferredPositionChanged(bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"referralCode",type:"bytes32"}],name:"ReferredPositionChanged",type:"event",notice:"Emitted when open position with non-zero referral code"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"TrustedForwarderChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"forwarder",type:"address"}],name:"TrustedForwarderChanged",type:"event",notice:"Emitted when trusted forwarder address changed"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_ADMIN()":{inputs:[],name:"POSITIONING_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"POSITIONING_CALLEE_ADMIN()":{inputs:[],name:"POSITIONING_CALLEE_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"defaultFeeReceiver()":{inputs:[],name:"defaultFeeReceiver",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getAccountBalance()":{inputs:[],name:"getAccountBalance",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"`AccountBalance` address"},notice:"Get AccountBalance address"},"getAccountValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getAccountValue",outputs:[{internalType:"int256",name:"accountValue",type:"int256"}],stateMutability:"view",type:"function",details:"Used to fetch account value of a trader"},"getAllPendingFundingPayment(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getAllPendingFundingPayment",outputs:[{internalType:"int256",name:"pendingFundingPayment",type:"int256"}],stateMutability:"view",type:"function",details:"this function calculates total pending funding payment of a trader"},"getIndexPrice(address)":{inputs:[{internalType:"address",name:"baseToken",type:"address"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"indexPrice",type:"uint256"}],stateMutability:"view",type:"function",details:"this function is used to fetch index price of base token"},"getLiquidatablePosition(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getLiquidatablePosition",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{baseToken:"The address of baseToken",trader:"The address of trader"},notice:"Get position size of a trader to be liquidated"},"getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"order",type:"tuple"}],name:"getOrderValidate",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"getPendingFundingPayment(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"getPendingFundingPayment",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"this function calculates pending funding payment of a trader respective to basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"}},"getPnlToBeRealized((address,address,int256,int256))":{inputs:[{components:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"base",type:"int256"},{internalType:"int256",name:"quote",type:"int256"}],internalType:"struct IPositioning.RealizePnlParams",name:"params",type:"tuple"}],name:"getPnlToBeRealized",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function",details:"This function normally won't be needed by traders, but it might be useful for 3rd party",params:{params:"The params needed to do the query, encoded as `RealizePnlParams` in calldata"},returns:{_0:"The pnl that can be realized if trader reduce position"},notice:"Get the pnl that can be realized if trader reduce position"},"getPositioning()":{inputs:[],name:"getPositioning",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPositioningConfig()":{inputs:[],name:"getPositioningConfig",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"PositioningConfig address"},notice:"Get PositioningConfig address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTotalAbsPositionValue(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"getTotalAbsPositionValue",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getVaultController()":{inputs:[],name:"getVaultController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"`Vault` address"},notice:"Get `Vault` address"},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"initialize(address,address,address,address,address,address,uint64,address[2])":{inputs:[{internalType:"address",name:"positioningConfigArg",type:"address"},{internalType:"address",name:"vaultControllerArg",type:"address"},{internalType:"address",name:"accountBalanceArg",type:"address"},{internalType:"address",name:"matchingEngineArg",type:"address"},{internalType:"address",name:"markPriceArg",type:"address"},{internalType:"address",name:"indexPriceArg",type:"address"},{internalType:"uint64",name:"underlyingPriceIndex",type:"uint64"},{internalType:"address[2]",name:"liquidators",type:"address[2]"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"this function is public for testing"},"isAccountLiquidatable(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"isAccountLiquidatable",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"this function is used to know the trader is liquidateable"},"isLiquidatorWhitelist(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isLiquidatorWhitelist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"liquidate(address,address,int256)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"},{internalType:"int256",name:"positionSize",type:"int256"}],name:"liquidate",outputs:[],stateMutability:"nonpayable",type:"function",details:"If trader has open orders, need to call `cancelAllExcessOrders` firstIf positionSize is greater than maxLiquidatePositionSize, liquidate maxLiquidatePositionSize by defaultIf margin ratio >= 0.5 * mmRatio,         maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1maxLiquidatePositionSize = positionSize * maxLiquidateRatio",params:{baseToken:"The address of baseToken",positionSize:"the position size to be liquidated by liquidator",trader:"The address of trader"},notice:"If trader is underwater, any one can call `liquidate` to liquidate this trader"},"liquidateFullPosition(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"liquidateFullPosition",outputs:[],stateMutability:"nonpayable",type:"function",details:"If margin ratio >= 0.5 * mmRatio, maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1maxLiquidatePositionSize = positionSize * maxLiquidateRatio",params:{baseToken:"The address of baseToken",trader:"The address of trader"},notice:"TODO: Test if this function liquidate full position even with when only partial was needed"},"makerMinSalt(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"makerMinSalt",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)":{inputs:[{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderLeft",type:"tuple"},{internalType:"bytes",name:"signatureLeft",type:"bytes"},{components:[{internalType:"bytes4",name:"orderType",type:"bytes4"},{internalType:"uint64",name:"deadline",type:"uint64"},{internalType:"address",name:"trader",type:"address"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"makeAsset",type:"tuple"},{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"takeAsset",type:"tuple"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint128",name:"triggerPrice",type:"uint128"},{internalType:"bool",name:"isShort",type:"bool"}],internalType:"struct LibOrder.Order",name:"orderRight",type:"tuple"},{internalType:"bytes",name:"signatureRight",type:"bytes"},{internalType:"bytes",name:"liquidator",type:"bytes"}],name:"openPosition",outputs:[],stateMutability:"nonpayable",type:"function",params:{orderLeft:"PositionParams struct",orderRight:"PositionParams struct"},notice:"Trader can call `openPosition` to long/short on baseToken market"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"registerBaseToken(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"token",type:"address"}],name:"registerBaseToken",outputs:[],stateMutability:"nonpayable",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setDefaultFeeReceiver(address)":{inputs:[{internalType:"address",name:"newDefaultFeeReceiver",type:"address"}],name:"setDefaultFeeReceiver",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Function to set fee receiver"},"setFundingInterval(int256)":{inputs:[{internalType:"int256",name:"interval",type:"int256"}],name:"setFundingInterval",outputs:[],stateMutability:"nonpayable",type:"function",params:{interval:"denominator for 24 hours and get interval value, eg 24/3 = 8 hour interval of funding payment"},notice:"Update funding rate inteval"},"setIndexPriceOracle(address)":{inputs:[{internalType:"address",name:"indexPriceOracle",type:"address"}],name:"setIndexPriceOracle",outputs:[],stateMutability:"nonpayable",type:"function"},"setMakerMinSalt(uint256)":{inputs:[{internalType:"uint256",name:"_val",type:"uint256"}],name:"setMakerMinSalt",outputs:[],stateMutability:"nonpayable",type:"function"},"setMarketRegistry(address)":{inputs:[{internalType:"address",name:"marketRegistryArg",type:"address"}],name:"setMarketRegistry",outputs:[],stateMutability:"nonpayable",type:"function"},"setPositioning(address)":{inputs:[{internalType:"address",name:"positioningArg",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"settleAllFunding(address)":{inputs:[{internalType:"address",name:"trader",type:"address"}],name:"settleAllFunding",outputs:[],stateMutability:"nonpayable",type:"function",params:{trader:"The address of trader"},notice:"Settle all markets fundingPayment to owedRealized Pnl"},"settleFunding(address,address)":{inputs:[{internalType:"address",name:"trader",type:"address"},{internalType:"address",name:"baseToken",type:"address"}],name:"settleFunding",outputs:[{internalType:"int256",name:"fundingPayment",type:"int256"}],stateMutability:"nonpayable",type:"function",details:"this function is used to settle funding f a trader on the basis of given basetoken",params:{baseToken:"address of the baseToken",trader:"address of the trader"},returns:{fundingPayment:"pnding funding payment on this basetoken"}},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},"whitelistLiquidator(address,bool)":{inputs:[{internalType:"address",name:"liquidator",type:"address"},{internalType:"bool",name:"isWhitelist",type:"bool"}],name:"whitelistLiquidator",outputs:[],stateMutability:"nonpayable",type:"function",params:{isWhitelist:"if true, whitelist. is false remove whitelist"},notice:"Update whitelist for a liquidator"}}},"contracts/tests/TestERC20.sol:TestERC20":{source:"contracts/tests/TestERC20.sol",name:"TestERC20",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MINTER_ROLE()":{inputs:[],name:"MINTER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"PAUSER_ROLE()":{inputs:[],name:"PAUSER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"__TestERC20_init(string,string,uint8)":{inputs:[{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"},{internalType:"uint8",name:"decimal",type:"uint8"}],name:"__TestERC20_init",outputs:[],stateMutability:"nonpayable",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function",details:"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"burnWithoutApproval(address,uint256)":{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnWithoutApproval",outputs:[],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"uint256",name:"index",type:"uint256"}],name:"getRoleMember",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleMemberCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(string,string)":{inputs:[{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function",details:"Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function",details:"Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMinter(address)":{inputs:[{internalType:"address",name:"minter",type:"address"}],name:"setMinter",outputs:[],stateMutability:"nonpayable",type:"function"},"setTransferFeeRatio(uint256)":{inputs:[{internalType:"uint256",name:"ratio",type:"uint256"}],name:"setTransferFeeRatio",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"success",type:"bool"}],stateMutability:"nonpayable",type:"function"},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function",details:"Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."}}},"contracts/tests/TransferManagerTest.sol:TransferManagerTest":{source:"contracts/tests/TransferManagerTest.sol",name:"TransferManagerTest",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"ProtocolFeeChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"ProtocolFeeChanged",type:"event"},"ProxyChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"proxy",type:"address"}],name:"ProxyChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"TRANSFER_EXECUTOR()":{inputs:[],name:"TRANSFER_EXECUTOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"__TransferManager_init(address,address)":{inputs:[{internalType:"address",name:"_erc20Proxy",type:"address"},{internalType:"address",name:"_owner",type:"address"}],name:"__TransferManager_init",outputs:[],stateMutability:"nonpayable",type:"function"},"checkDoTransfers(((address,uint256),address,address),((address,uint256),address,address))":{inputs:[{components:[{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"asset",type:"tuple"},{internalType:"address",name:"proxy",type:"address"},{internalType:"address",name:"from",type:"address"}],internalType:"struct LibDeal.DealSide",name:"left",type:"tuple"},{components:[{components:[{internalType:"address",name:"virtualToken",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],internalType:"struct LibAsset.Asset",name:"asset",type:"tuple"},{internalType:"address",name:"proxy",type:"address"},{internalType:"address",name:"from",type:"address"}],internalType:"struct LibDeal.DealSide",name:"right",type:"tuple"}],name:"checkDoTransfers",outputs:[],stateMutability:"payable",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setTransferProxy(address)":{inputs:[{internalType:"address",name:"proxy",type:"address"}],name:"setTransferProxy",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/tests/VirtualTokenTest.sol:VirtualTokenTest":{source:"contracts/tests/VirtualTokenTest.sol",name:"VirtualTokenTest",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"WhitelistAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistAdded",type:"event"},"WhitelistRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistRemoved",type:"event"}},methods:{"BURNER()":{inputs:[],name:"BURNER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MINTER()":{inputs:[],name:"MINTER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VIRTUAL_TOKEN_ADMIN()":{inputs:[],name:"VIRTUAL_TOKEN_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"approveTest(address,address,uint256)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approveTest",outputs:[],stateMutability:"nonpayable",type:"function"},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"beforeTokenTransfer(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"beforeTokenTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},"burn(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(string,string,bool)":{inputs:[{internalType:"string",name:"nameArg",type:"string"},{internalType:"string",name:"symbolArg",type:"string"},{internalType:"bool",name:"isBase",type:"bool"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"isBase()":{inputs:[],name:"isBase",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"mintMaximumTo(address)":{inputs:[{internalType:"address",name:"recipient",type:"address"}],name:"mintMaximumTo",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMintBurnRole(address)":{inputs:[{internalType:"address",name:"minterBurner",type:"address"}],name:"setMintBurnRole",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}}},"contracts/tests/libs/LibSignatureTest.sol:LibSignatureTest":{source:"contracts/tests/libs/LibSignatureTest.sol",name:"LibSignatureTest",methods:{"getKeccak(string)":{inputs:[{internalType:"string",name:"message",type:"string"}],name:"getKeccak",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"pure",type:"function"},"recoverFromParamsTest(bytes32,uint8,bytes32,bytes32)":{inputs:[{internalType:"bytes32",name:"hash",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"recoverFromParamsTest",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"recoverFromSigTest(bytes32,bytes)":{inputs:[{internalType:"bytes32",name:"hash",type:"bytes32"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"recoverFromSigTest",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"}}},"contracts/tests/protocol/VolmexPositionToken.sol:VolmexPositionToken":{source:"contracts/tests/protocol/VolmexPositionToken.sol",name:"VolmexPositionToken",title:"Token Contract",author:"volmex.finance [security@volmexlabs.com]",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},"UpdatedTokenMetadata(string,string)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"string",name:"symbol",type:"string"}],name:"UpdatedTokenMetadata",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VOLMEX_PROTOCOL_ROLE()":{inputs:[],name:"VOLMEX_PROTOCOL_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"_from",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function",details:"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(string,string)":{inputs:[{internalType:"string",name:"_name",type:"string"},{internalType:"string",name:"_symbol",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `DEFAULT_ADMIN_ROLE` and `VOLMEX_PROTOCOL_ROLE` to the account that deploys the contract. See {ERC20-constructor}."},"mint(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function",details:"Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `VOLMEX_PROTOCOL_ROLE`."},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function",details:"Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `VOLMEX_PROTOCOL_ROLE`."},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function",details:"Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `VOLMEX_PROTOCOL_ROLE`."},"updateTokenMetadata(string,string)":{inputs:[{internalType:"string",name:"_name",type:"string"},{internalType:"string",name:"_symbol",type:"string"}],name:"updateTokenMetadata",outputs:[],stateMutability:"nonpayable",type:"function",details:"Updates token name & symbol of VIV tokens",params:{_name:"New string name of the VIV token",_symbol:"New string symbol of the VIV token"}}}},"contracts/tests/protocol/VolmexProtocol.sol:VolmexProtocol":{source:"contracts/tests/protocol/VolmexProtocol.sol",name:"VolmexProtocol",title:"Protocol Contract",author:"volmex.finance [security@volmexlabs.com]",events:{"ClaimedFees(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"fees",type:"uint256"}],name:"ClaimedFees",type:"event"},"Collateralized(address,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"collateralLock",type:"uint256"},{indexed:!1,internalType:"uint256",name:"positionTokensMinted",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fees",type:"uint256"}],name:"Collateralized",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Redeemed(address,uint256,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"collateralReleased",type:"uint256"},{indexed:!1,internalType:"uint256",name:"volatilityIndexTokenBurned",type:"uint256"},{indexed:!1,internalType:"uint256",name:"inverseVolatilityIndexTokenBurned",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fees",type:"uint256"}],name:"Redeemed",type:"event"},"Settled(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"settlementPrice",type:"uint256"}],name:"Settled",type:"event"},"ToggleActivated(bool)":{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"isActive",type:"bool"}],name:"ToggleActivated",type:"event"},"ToggledVolatilityTokenPause(bool)":{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"isPause",type:"bool"}],name:"ToggledVolatilityTokenPause",type:"event"},"UpdatedFees(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"issuanceFees",type:"uint256"},{indexed:!1,internalType:"uint256",name:"redeemFees",type:"uint256"}],name:"UpdatedFees",type:"event"},"UpdatedMinimumCollateral(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newMinimumCollateralQty",type:"uint256"}],name:"UpdatedMinimumCollateral",type:"event"},"UpdatedVolatilityToken(address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"positionToken",type:"address"},{indexed:!1,internalType:"bool",name:"isVolatilityIndexToken",type:"bool"}],name:"UpdatedVolatilityToken",type:"event"}},methods:{"accumulatedFees()":{inputs:[],name:"accumulatedFees",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"active()":{inputs:[],name:"active",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"claimAccumulatedFees()":{inputs:[],name:"claimAccumulatedFees",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Safely transfer the accumulated fees to owner"},"collateral()":{inputs:[],name:"collateral",outputs:[{internalType:"contract IERC20Modified",name:"",type:"address"}],stateMutability:"view",type:"function"},"collateralize(uint256)":{inputs:[{internalType:"uint256",name:"_collateralQty",type:"uint256"}],name:"collateralize",outputs:[{internalType:"uint256",name:"qtyToBeMinted",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_collateralQty:"Quantity of the collateral being deposited NOTE: Collateral quantity should be at least required minimum collateral quantity Calculation: Get the quantity for position token Mint the position token for `msg.sender`"},notice:"Add collateral to the protocol and mint the position tokens"},"initialize(address,address,address,uint256,uint256)":{inputs:[{internalType:"contract IERC20Modified",name:"_collateralTokenAddress",type:"address"},{internalType:"contract IERC20Modified",name:"_volatilityToken",type:"address"},{internalType:"contract IERC20Modified",name:"_inverseVolatilityToken",type:"address"},{internalType:"uint256",name:"_minimumCollateralQty",type:"uint256"},{internalType:"uint256",name:"_volatilityCapRatio",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Makes the protocol `active` at deploymentSets the `minimumCollateralQty`Makes the collateral token as `collateral`Assign position tokensSets the `volatilityCapRatio`",params:{_collateralTokenAddress:"is address of collateral token typecasted to IERC20Modified",_inverseVolatilityToken:"is address of inverse volatility index token typecasted to IERC20Modified",_minimumCollateralQty:"is the minimum qty of tokens need to mint 0.1 volatility and inverse volatility tokens",_volatilityCapRatio:"is the cap for volatility",_volatilityToken:"is address of volatility index token typecasted to IERC20Modified"}},"inverseVolatilityToken()":{inputs:[],name:"inverseVolatilityToken",outputs:[{internalType:"contract IERC20Modified",name:"",type:"address"}],stateMutability:"view",type:"function"},"isSettled()":{inputs:[],name:"isSettled",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"issuanceFees()":{inputs:[],name:"issuanceFees",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"minimumCollateralQty()":{inputs:[],name:"minimumCollateralQty",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"recoverTokens(address,address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_toWhom",type:"address"},{internalType:"uint256",name:"_howMuch",type:"uint256"}],name:"recoverTokens",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Recover tokens accidentally sent to this contract"},"redeem(uint256)":{inputs:[{internalType:"uint256",name:"_positionTokenQty",type:"uint256"}],name:"redeem",outputs:[{internalType:"uint256",name:"collateralRedeemed",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_positionTokenQty:"Quantity of the position token that the user is surrendering Amount of collateral is `_positionTokenQty` by the volatilityCapRatio. Burn the position token Safely transfer the collateral to `msg.sender`"},notice:"Redeem the collateral from the protocol by providing the position token"},"redeemFees()":{inputs:[],name:"redeemFees",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"redeemSettled(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_volatilityIndexTokenQty",type:"uint256"},{internalType:"uint256",name:"_inverseVolatilityIndexTokenQty",type:"uint256"}],name:"redeemSettled",outputs:[{internalType:"uint256",name:"collateralRedeemed",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_inverseVolatilityIndexTokenQty:"Quantity of the inverse volatility index token that the user is surrendering Amount of collateral is `_volatilityIndexTokenQty` by the settlementPrice and `_inverseVolatilityIndexTokenQty` by volatilityCapRatio - settlementPrice Burn the position token Safely transfer the collateral to `msg.sender`",_volatilityIndexTokenQty:"Quantity of the volatility index token that the user is surrendering"},notice:"Redeem the collateral from the protocol after settlement"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"settle(uint256)":{inputs:[{internalType:"uint256",name:"_settlementPrice",type:"uint256"}],name:"settle",outputs:[],stateMutability:"nonpayable",type:"function",params:{_settlementPrice:"The price of the volatility index after settlement The inverse volatility index token at settlement is worth volatilityCapRatio - volatility index settlement price"},notice:"Settle the contract, preventing new minting and providing individual token redemption"},"settlementPrice()":{inputs:[],name:"settlementPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"toggleActive()":{inputs:[],name:"toggleActive",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Toggles the active variable. Restricted to only the owner of the contract."},"togglePause(bool)":{inputs:[{internalType:"bool",name:"_isPause",type:"bool"}],name:"togglePause",outputs:[],stateMutability:"nonpayable",type:"function",params:{_isPause:"Boolean value to pause or unpause the position token { true = pause, false = unpause }"},notice:"Pause/unpause volmex position token."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updateFees(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_issuanceFees",type:"uint256"},{internalType:"uint256",name:"_redeemFees",type:"uint256"}],name:"updateFees",outputs:[],stateMutability:"nonpayable",type:"function",params:{_issuanceFees:"Percentage of fees required to collateralize the collateral",_redeemFees:"Percentage of fees required to redeem the collateral"},notice:"Update the percentage of `issuanceFees` and `redeemFees`"},"updateMinimumCollQty(uint256)":{inputs:[{internalType:"uint256",name:"_newMinimumCollQty",type:"uint256"}],name:"updateMinimumCollQty",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newMinimumCollQty:"Provides the new minimum collateral quantity"},notice:"Update the `minimumCollateralQty`"},"updateVolatilityToken(address,bool)":{inputs:[{internalType:"address",name:"_positionToken",type:"address"},{internalType:"bool",name:"_isVolatilityIndexToken",type:"bool"}],name:"updateVolatilityToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{_isVolatilityIndexToken:"Type of the position token, { VolatilityIndexToken: true, InverseVolatilityIndexToken: false }",_positionToken:"Address of the new position token"},notice:"Update the {Volatility Token}"},"volatilityCapRatio()":{inputs:[],name:"volatilityCapRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"volatilityToken()":{inputs:[],name:"volatilityToken",outputs:[{internalType:"contract IERC20Modified",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/tokens/ChainlinkBaseToken.sol:ChainlinkBaseToken":{source:"contracts/tokens/ChainlinkBaseToken.sol",name:"ChainlinkBaseToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"PriceFeedChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"priceFeed",type:"address"}],name:"PriceFeedChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"WhitelistAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistAdded",type:"event"},"WhitelistRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistRemoved",type:"event"}},methods:{"BURNER()":{inputs:[],name:"BURNER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MINTER()":{inputs:[],name:"MINTER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VIRTUAL_TOKEN_ADMIN()":{inputs:[],name:"VIRTUAL_TOKEN_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getIndexPrice(uint256)":{inputs:[{internalType:"uint256",name:"interval",type:"uint256"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getPriceFeed()":{inputs:[],name:"getPriceFeed",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"the current price feed"},notice:"Get the price feed address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(string,string,address,bool)":{inputs:[{internalType:"string",name:"nameArg",type:"string"},{internalType:"string",name:"symbolArg",type:"string"},{internalType:"address",name:"priceFeedArg",type:"address"},{internalType:"bool",name:"isBase",type:"bool"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"isBase()":{inputs:[],name:"isBase",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"mintMaximumTo(address)":{inputs:[{internalType:"address",name:"recipient",type:"address"}],name:"mintMaximumTo",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMintBurnRole(address)":{inputs:[{internalType:"address",name:"minterBurner",type:"address"}],name:"setMintBurnRole",outputs:[],stateMutability:"nonpayable",type:"function"},"setPriceFeed(address)":{inputs:[{internalType:"address",name:"priceFeedArg",type:"address"}],name:"setPriceFeed",outputs:[],stateMutability:"nonpayable",type:"function",details:"This function is only used for emergency shutdown, to set priceFeed to an emergencyPriceFeed"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}}},"contracts/tokens/VirtualToken.sol:VirtualToken":{source:"contracts/tokens/VirtualToken.sol",name:"VirtualToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"WhitelistAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistAdded",type:"event"},"WhitelistRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistRemoved",type:"event"}},methods:{"BURNER()":{inputs:[],name:"BURNER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MINTER()":{inputs:[],name:"MINTER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VIRTUAL_TOKEN_ADMIN()":{inputs:[],name:"VIRTUAL_TOKEN_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"isBase()":{inputs:[],name:"isBase",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"mintMaximumTo(address)":{inputs:[{internalType:"address",name:"recipient",type:"address"}],name:"mintMaximumTo",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMintBurnRole(address)":{inputs:[{internalType:"address",name:"minterBurner",type:"address"}],name:"setMintBurnRole",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}}},"contracts/tokens/VolmexBaseToken.sol:VolmexBaseToken":{source:"contracts/tokens/VolmexBaseToken.sol",name:"VolmexBaseToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"PriceFeedChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"priceFeed",type:"address"}],name:"PriceFeedChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"WhitelistAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistAdded",type:"event"},"WhitelistRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistRemoved",type:"event"}},methods:{"BURNER()":{inputs:[],name:"BURNER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MINTER()":{inputs:[],name:"MINTER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VIRTUAL_TOKEN_ADMIN()":{inputs:[],name:"VIRTUAL_TOKEN_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getIndexPrice(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{interval:"The interval represents twap interval."},returns:{_0:"Twap price with interval"},notice:"Returns the index price of the token."},"getPriceFeed()":{inputs:[],name:"getPriceFeed",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"the current price feed"},notice:"Get the price feed address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(string,string,address,bool)":{inputs:[{internalType:"string",name:"nameArg",type:"string"},{internalType:"string",name:"symbolArg",type:"string"},{internalType:"address",name:"priceFeedArg",type:"address"},{internalType:"bool",name:"isBase",type:"bool"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"isBase()":{inputs:[],name:"isBase",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"mintMaximumTo(address)":{inputs:[{internalType:"address",name:"recipient",type:"address"}],name:"mintMaximumTo",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMintBurnRole(address)":{inputs:[{internalType:"address",name:"minterBurner",type:"address"}],name:"setMintBurnRole",outputs:[],stateMutability:"nonpayable",type:"function"},"setPriceFeed(address)":{inputs:[{internalType:"address",name:"priceFeedArg",type:"address"}],name:"setPriceFeed",outputs:[],stateMutability:"nonpayable",type:"function",details:"This function is only used for emergency shutdown, to set priceFeed to an emergencyPriceFeed"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}}},"contracts/tokens/VolmexQuoteToken.sol:VolmexQuoteToken":{source:"contracts/tokens/VolmexQuoteToken.sol",name:"VolmexQuoteToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"WhitelistAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistAdded",type:"event"},"WhitelistRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistRemoved",type:"event"}},methods:{"BURNER()":{inputs:[],name:"BURNER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MINTER()":{inputs:[],name:"MINTER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VIRTUAL_TOKEN_ADMIN()":{inputs:[],name:"VIRTUAL_TOKEN_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(string,string,bool)":{inputs:[{internalType:"string",name:"nameArg",type:"string"},{internalType:"string",name:"symbolArg",type:"string"},{internalType:"bool",name:"isBaseArg",type:"bool"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"isBase()":{inputs:[],name:"isBase",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"mintMaximumTo(address)":{inputs:[{internalType:"address",name:"recipient",type:"address"}],name:"mintMaximumTo",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMintBurnRole(address)":{inputs:[{internalType:"address",name:"minterBurner",type:"address"}],name:"setMintBurnRole",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}}},"contracts/tokens/base/ParentToken.sol:ParentToken":{source:"contracts/tokens/base/ParentToken.sol",name:"ParentToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"PriceFeedChanged(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"priceFeed",type:"address"}],name:"PriceFeedChanged",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"WhitelistAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistAdded",type:"event"},"WhitelistRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"WhitelistRemoved",type:"event"}},methods:{"BURNER()":{inputs:[],name:"BURNER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MINTER()":{inputs:[],name:"MINTER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VIRTUAL_TOKEN_ADMIN()":{inputs:[],name:"VIRTUAL_TOKEN_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getIndexPrice(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"getIndexPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{interval:"The interval represents twap interval."},returns:{_0:"Twap price with interval"},notice:"Returns the index price of the token."},"getPriceFeed()":{inputs:[],name:"getPriceFeed",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"the current price feed"},notice:"Get the price feed address"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(string,string,address,bool)":{inputs:[{internalType:"string",name:"nameArg",type:"string"},{internalType:"string",name:"symbolArg",type:"string"},{internalType:"address",name:"priceFeedArg",type:"address"},{internalType:"bool",name:"isBase",type:"bool"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"isBase()":{inputs:[],name:"isBase",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"mintMaximumTo(address)":{inputs:[{internalType:"address",name:"recipient",type:"address"}],name:"mintMaximumTo",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setMintBurnRole(address)":{inputs:[{internalType:"address",name:"minterBurner",type:"address"}],name:"setMintBurnRole",outputs:[],stateMutability:"nonpayable",type:"function"},"setPriceFeed(address)":{inputs:[{internalType:"address",name:"priceFeedArg",type:"address"}],name:"setPriceFeed",outputs:[],stateMutability:"nonpayable",type:"function",details:"This function is only used for emergency shutdown, to set priceFeed to an emergencyPriceFeed"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}}},"contracts/transfer-proxies/ERC20TransferProxy.sol:ERC20TransferProxy":{source:"contracts/transfer-proxies/ERC20TransferProxy.sol",name:"ERC20TransferProxy",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"TRANSFER_PROXY_ADMIN()":{inputs:[],name:"TRANSFER_PROXY_ADMIN",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"TRANSFER_PROXY_CALLER()":{inputs:[],name:"TRANSFER_PROXY_CALLER",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"addTransferProxyRole(address)":{inputs:[{internalType:"address",name:"exchange",type:"address"}],name:"addTransferProxyRole",outputs:[],stateMutability:"nonpayable",type:"function"},"erc20SafeTransferFrom(address,address,address,uint256)":{inputs:[{internalType:"contract IERC20Upgradeable",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"erc20SafeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},"erc20TransferProxyInit()":{inputs:[],name:"erc20TransferProxyInit",outputs:[],stateMutability:"nonpayable",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."}}},"contracts/view/VolmexPerpView.sol:VolmexPerpView":{source:"contracts/view/VolmexPerpView.sol",name:"VolmexPerpView",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"PERP_VIEW_STATES()":{inputs:[],name:"PERP_VIEW_STATES",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"VOLMEX_PERP_VIEW()":{inputs:[],name:"VOLMEX_PERP_VIEW",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"accounts(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"accounts",outputs:[{internalType:"contract IAccountBalance",name:"",type:"address"}],stateMutability:"view",type:"function"},"baseTokenIndexCount()":{inputs:[],name:"baseTokenIndexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"baseTokens(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"baseTokens",outputs:[{internalType:"contract IVolmexBaseToken",name:"",type:"address"}],stateMutability:"view",type:"function"},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"grantViewStatesRole(address)":{inputs:[{internalType:"address",name:"_viewStateRole",type:"address"}],name:"grantViewStatesRole",outputs:[],stateMutability:"nonpayable",type:"function"},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"incrementPerpIndex()":{inputs:[],name:"incrementPerpIndex",outputs:[],stateMutability:"nonpayable",type:"function"},"incrementVaultIndex()":{inputs:[],name:"incrementVaultIndex",outputs:[],stateMutability:"nonpayable",type:"function"},"initialize(address)":{inputs:[{internalType:"address",name:"_viewRole",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"marketRegistries(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"marketRegistries",outputs:[{internalType:"contract IMarketRegistry",name:"",type:"address"}],stateMutability:"view",type:"function"},"perpIndexCount()":{inputs:[],name:"perpIndexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"positionings(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"positionings",outputs:[{internalType:"contract IPositioning",name:"",type:"address"}],stateMutability:"view",type:"function"},"quoteTokenIndexCount()":{inputs:[],name:"quoteTokenIndexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"quoteTokens(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"quoteTokens",outputs:[{internalType:"contract IVolmexQuoteToken",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setAccount(address)":{inputs:[{internalType:"contract IAccountBalance",name:"_account",type:"address"}],name:"setAccount",outputs:[],stateMutability:"nonpayable",type:"function"},"setBaseToken(address)":{inputs:[{internalType:"contract IVolmexBaseToken",name:"_baseToken",type:"address"}],name:"setBaseToken",outputs:[],stateMutability:"nonpayable",type:"function"},"setMarketRegistry(address)":{inputs:[{internalType:"contract IMarketRegistry",name:"_marketRegistry",type:"address"}],name:"setMarketRegistry",outputs:[],stateMutability:"nonpayable",type:"function"},"setPositioning(address)":{inputs:[{internalType:"contract IPositioning",name:"_positioning",type:"address"}],name:"setPositioning",outputs:[],stateMutability:"nonpayable",type:"function"},"setQuoteToken(address)":{inputs:[{internalType:"contract IVolmexQuoteToken",name:"_quoteToken",type:"address"}],name:"setQuoteToken",outputs:[],stateMutability:"nonpayable",type:"function"},"setVaultController(address)":{inputs:[{internalType:"contract IVaultController",name:"_vaultController",type:"address"}],name:"setVaultController",outputs:[],stateMutability:"nonpayable",type:"function"},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"vaultControllers(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"vaultControllers",outputs:[{internalType:"contract IVaultController",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaultIndexCount()":{inputs:[],name:"vaultIndexCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}}};new Qn({el:"#app",router:new Ml({routes:[{path:"/",component:jl,props:()=>({json:Wl})},{path:"*",component:Bl,props:e=>({json:Wl[e.path.slice(1)]})}]}),mounted(){document.dispatchEvent(new Event("render-event"))},render:e=>e(Il)})})()})();