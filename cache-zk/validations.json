{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "withoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "linkedWithoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:29",
        "version": {
          "withMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "withoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "linkedWithoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "withoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "linkedWithoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "withoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "linkedWithoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "withoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "linkedWithoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "withoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "linkedWithoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "withoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "linkedWithoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:41",
        "version": {
          "withMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "withoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "linkedWithoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "withoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "linkedWithoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "withoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "linkedWithoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "withoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "linkedWithoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "withoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "linkedWithoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "withoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "linkedWithoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "withoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "linkedWithoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "withoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "linkedWithoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/funding-rate/FundingRate.sol:FundingRate": {
        "src": "contracts/funding-rate/FundingRate.sol:17",
        "version": {
          "withMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "withoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "linkedWithoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d"
        },
        "inherit": [
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/BlockContext.sol:BlockContext": {
        "src": "contracts/helpers/BlockContext.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/MarketRegistry.sol:MarketRegistry": {
        "src": "contracts/helpers/MarketRegistry.sol:15",
        "version": {
          "withMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "withoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "linkedWithoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99"
        },
        "inherit": [
          "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "setMaxOrdersPerMarket(uint8)",
          "addBaseToken(address)",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "checkBaseToken(address)",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/OwnerPausable.sol:OwnerPausable": {
        "src": "contracts/helpers/OwnerPausable.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/PositioningCallee.sol:PositioningCallee": {
        "src": "contracts/helpers/PositioningCallee.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setPositioning(address)",
          "getPositioning()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAccountBalance.sol:IAccountBalance": {
        "src": "contracts/interfaces/IAccountBalance.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "settleOwedRealizedPnl(address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "getLiquidatablePositionSize(address,address,int256)",
          "registerBaseToken(address,address)",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getMarginRequirementForLiquidation(address)",
          "getPnlAndPendingFee(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "getNLiquidate(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAssetMatcher.sol:IAssetMatcher": {
        "src": "contracts/interfaces/IAssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_matchAssets(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/IERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Metadata.sol:IERC20Metadata": {
        "src": "contracts/interfaces/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Modified.sol:IERC20Modified": {
        "src": "contracts/interfaces/IERC20Modified.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "symbol()",
          "name()",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "grantRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy": {
        "src": "contracts/interfaces/IERC20TransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IFundingRate.sol:IFundingRate": {
        "src": "contracts/interfaces/IFundingRate.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IGnosisSafe.sol:IGnosisSafe": {
        "src": "contracts/interfaces/IGnosisSafe.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThreshold()",
          "getOwners()",
          "isOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund": {
        "src": "contracts/interfaces/IInsuranceFund.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry": {
        "src": "contracts/interfaces/IMarketRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMaxOrdersPerMarket(uint8)",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "addBaseToken(address)",
          "checkBaseToken(address)",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine": {
        "src": "contracts/interfaces/IMatchingEngine.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "grantMatchOrders(address)",
          "fills(bytes32)",
          "makerMinSalt(address)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle": {
        "src": "contracts/interfaces/IPerpetualOracle.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestMarkPrice(uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "latestIndexSMA(uint256,uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)",
          "indexByBaseToken(address)",
          "initialTimestamps(uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioning.sol:IPositioning": {
        "src": "contracts/interfaces/IPositioning.sol:7",
        "inherit": [
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "toggleLiquidatorWhitelist()",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "getLiquidatablePosition(address,address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getAllPendingFundingPayment(address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "isStaleIndexOracle(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig": {
        "src": "contracts/interfaces/IPositioningConfig.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()",
          "getPartialLiquidationRatio()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ISlashing.sol:ISlashing": {
        "src": "contracts/interfaces/ISlashing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "slash(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferExecutor.sol:ITransferExecutor": {
        "src": "contracts/interfaces/ITransferExecutor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferManager.sol:ITransferManager": {
        "src": "contracts/interfaces/ITransferManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferProxy.sol:ITransferProxy": {
        "src": "contracts/interfaces/ITransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVaultController.sol:IVaultController": {
        "src": "contracts/interfaces/IVaultController.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "registerVault(address,address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getVault(address)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "setPositioning(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVirtualToken.sol:IVirtualToken": {
        "src": "contracts/interfaces/IVirtualToken.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "isBase()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken": {
        "src": "contracts/interfaces/IVolmexBaseToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery": {
        "src": "contracts/interfaces/IVolmexPerpPeriphery.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "transferToVault(address,address,uint256)",
          "whitelistTrader(address,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView": {
        "src": "contracts/interfaces/IVolmexPerpView.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "perpIndexCount()",
          "vaultIndexCount()",
          "baseTokenIndexCount()",
          "quoteTokenIndexCount()",
          "positionings(uint256)",
          "vaultControllers(uint256)",
          "baseTokens(uint256)",
          "quoteTokens(uint256)",
          "accounts(uint256)",
          "marketRegistries(uint256)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexProtocol.sol:IVolmexProtocol": {
        "src": "contracts/interfaces/IVolmexProtocol.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "minimumCollateralQty()",
          "active()",
          "isSettled()",
          "volatilityToken()",
          "inverseVolatilityToken()",
          "collateral()",
          "issuanceFees()",
          "redeemFees()",
          "accumulatedFees()",
          "volatilityCapRatio()",
          "settlementPrice()",
          "precisionRatio()",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updatePositionToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken": {
        "src": "contracts/interfaces/IVolmexQuoteToken.sol:6",
        "inherit": [
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAccountMarket.sol:LibAccountMarket": {
        "src": "contracts/libs/LibAccountMarket.sol:4",
        "version": {
          "withMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "withoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "linkedWithoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAsset.sol:LibAsset": {
        "src": "contracts/libs/LibAsset.sol:4",
        "version": {
          "withMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "withoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "linkedWithoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibDeal.sol:LibDeal": {
        "src": "contracts/libs/LibDeal.sol:6",
        "version": {
          "withMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "withoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "linkedWithoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFill.sol:LibFill": {
        "src": "contracts/libs/LibFill.sol:7",
        "version": {
          "withMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "withoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "linkedWithoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFullMath.sol:LibFullMath": {
        "src": "contracts/libs/LibFullMath.sol:7",
        "version": {
          "withMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "withoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "linkedWithoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibMath.sol:LibMath": {
        "src": "contracts/libs/LibMath.sol:5",
        "version": {
          "withMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "withoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "linkedWithoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibOrder.sol:LibOrder": {
        "src": "contracts/libs/LibOrder.sol:9",
        "version": {
          "withMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "withoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "linkedWithoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibPerpMath.sol:LibPerpMath": {
        "src": "contracts/libs/LibPerpMath.sol:8",
        "version": {
          "withMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "withoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "linkedWithoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastInt.sol:LibSafeCastInt": {
        "src": "contracts/libs/LibSafeCastInt.sol:8",
        "version": {
          "withMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "withoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "linkedWithoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastUint.sol:LibSafeCastUint": {
        "src": "contracts/libs/LibSafeCastUint.sol:8",
        "version": {
          "withMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "withoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "linkedWithoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSettlementTokenMath.sol:LibSettlementTokenMath": {
        "src": "contracts/libs/LibSettlementTokenMath.sol:5",
        "version": {
          "withMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "withoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "linkedWithoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSignature.sol:LibSignature": {
        "src": "contracts/libs/LibSignature.sol:5",
        "version": {
          "withMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "withoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "linkedWithoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/AssetMatcher.sol:AssetMatcher": {
        "src": "contracts/matching-engine/AssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngine.sol:MatchingEngine": {
        "src": "contracts/matching-engine/MatchingEngine.sol:7",
        "version": {
          "withMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "withoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "linkedWithoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore": {
        "src": "contracts/matching-engine/MatchingEngineCore.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "grantMatchOrders(address)",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrderInBatch(struct LibOrder.Order[],struct LibOrder.Order[])",
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "updateOrderSizeInterval(uint256)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferExecutor.sol:TransferExecutor": {
        "src": "contracts/matching-engine/TransferExecutor.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTransferProxy(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferManager.sol:TransferManager": {
        "src": "contracts/matching-engine/TransferManager.sol:11",
        "inherit": [
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/AccountBalanceMock.sol:AccountBalanceMock": {
        "src": "contracts/mocks/AccountBalanceMock.sol:12",
        "version": {
          "withMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "withoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "linkedWithoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "mock_setOwedRealisedPnlX10_18(int256)",
          "mock_setUnrealizedPnlX10_18(int256)",
          "mock_setPendingFeeX10_18(uint256)",
          "registerBaseToken(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/PositioningMock.sol:PositioningMock": {
        "src": "contracts/mocks/PositioningMock.sol:8",
        "version": {
          "withMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "withoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "linkedWithoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "mock_setFundingPaymentX10_18(int256)",
          "getAllPendingFundingPayment(address)",
          "settleAllFunding(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/oracles/PerpetualOracle.sol:PerpetualOracle": {
        "src": "contracts/oracles/PerpetualOracle.sol:11",
        "version": {
          "withMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "withoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "linkedWithoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e"
        },
        "inherit": [
          "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestIndexSMA(uint256,uint256)",
          "latestMarkPrice(uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/AccountBalance.sol:AccountBalance": {
        "src": "contracts/orderbook/AccountBalance.sol:23",
        "version": {
          "withMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "withoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "linkedWithoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22"
        },
        "inherit": [
          "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "contracts/interfaces/IAccountBalance.sol:IAccountBalance"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "grantSettleRealizedPnlRole(address)",
          "setUnderlyingPriceIndex(address,uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setMinTimeBound(uint256)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleOwedRealizedPnl(address)",
          "registerBaseToken(address,address)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "updateSigmaVolmexIvs(uint256[],uint256[])",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getLiquidatablePositionSize(address,address,int256)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getPnlAndPendingFee(address)",
          "getIndexPrice(address,uint256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "getMarginRequirementForLiquidation(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getNLiquidate(uint256,uint256,uint256)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/OrderValidator.sol:OrderValidator": {
        "src": "contracts/orderbook/OrderValidator.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Positioning.sol:Positioning": {
        "src": "contracts/orderbook/Positioning.sol:30",
        "version": {
          "withMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "withoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "linkedWithoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f"
        },
        "inherit": [
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "setMarketRegistry(address)",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "setPerpetualOracle(address)",
          "setMinPositionSize(uint256,address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setIndexOracleInterval(uint256)",
          "toggleLiquidatorWhitelist()",
          "pause()",
          "unpause()",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "getLiquidatablePosition(address,address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "getAllPendingFundingPayment(address)",
          "isStaleIndexOracle(address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getIndexPrice(address,uint256)",
          "getAccountValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/PositioningConfig.sol:PositioningConfig": {
        "src": "contracts/orderbook/PositioningConfig.sol:12",
        "version": {
          "withMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "withoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "linkedWithoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1",
          "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setLiquidationPenaltyRatio(uint24)",
          "setLiquidatorFeeRatio(uint24)",
          "setPartialCloseRatio(uint24)",
          "setTwapInterval(uint32)",
          "setTwapIntervalLiquidation(uint32)",
          "setMaxMarketsPerAccount(uint8)",
          "setSettlementTokenBalanceCap(uint256)",
          "setMaxFundingRate(uint24)",
          "setImRatio(uint24)",
          "setMmRatio(uint24)",
          "setPartialLiquidationRatio(uint24)",
          "setPerpetualOracle(address)",
          "setPositioning(address)",
          "setAccountBalance(address)",
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialLiquidationRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Vault.sol:Vault": {
        "src": "contracts/orderbook/Vault.sol:24",
        "version": {
          "withMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "withoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "linkedWithoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/storage/VaultStorage.sol:VaultStorageV1",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVault.sol:IVault"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/VaultController.sol:VaultController": {
        "src": "contracts/orderbook/VaultController.sol:23",
        "version": {
          "withMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "withoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "linkedWithoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/interfaces/IVaultController.sol:IVaultController",
          "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "registerVault(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "setPositioning(address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "getVault(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/periphery/VolmexPerpPeriphery.sol:VolmexPerpPeriphery": {
        "src": "contracts/periphery/VolmexPerpPeriphery.sol:15",
        "version": {
          "withMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "withoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "linkedWithoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e"
        },
        "inherit": [
          "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address[2],address,address)",
          "setPerpetualOracle(address)",
          "setRelayer(address)",
          "toggleTraderWhitelistEnabled()",
          "whitelistVault(address,bool)",
          "whitelistTrader(address,bool)",
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "batchOpenPosition(uint256,struct LibOrder.Order[],bytes[],struct LibOrder.Order[],bytes[],bytes)",
          "transferToVault(address,address,uint256)",
          "batchOrderValidate(struct LibOrder.Order[],uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Slashing.sol:Slashing": {
        "src": "contracts/relayer-staking/Slashing.sol:10",
        "version": {
          "withMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "withoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "linkedWithoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811"
        },
        "inherit": [
          "contracts/relayer-staking/Staking.sol:Staking",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "Slashing_init(address,address,address,address,uint256,address)",
          "slash(address)",
          "updateSlashPenalty(uint256)",
          "setSlashingReceiver(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Staking.sol:Staking": {
        "src": "contracts/relayer-staking/Staking.sol:12",
        "version": {
          "withMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "withoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "linkedWithoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79"
        },
        "inherit": [
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "cooldown(uint256)",
          "toggleStaking()",
          "updateMinStakeRequired(uint256)",
          "updateRelayerMultisig(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1": {
        "src": "contracts/storage/AccountBalanceStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1": {
        "src": "contracts/storage/BaseTokenStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/FundingRateStorage.sol:FundingRateStorage": {
        "src": "contracts/storage/FundingRateStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1": {
        "src": "contracts/storage/MarketRegistryStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1": {
        "src": "contracts/storage/PositioningConfigStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningStorage.sol:PositioningStorageV1": {
        "src": "contracts/storage/PositioningStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage": {
        "src": "contracts/storage/VaultControllerStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultStorage.sol:VaultStorageV1": {
        "src": "contracts/storage/VaultStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/AssetMatcherTest.sol:AssetMatcherTest": {
        "src": "contracts/tests/AssetMatcherTest.sol:10",
        "version": {
          "withMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "withoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "linkedWithoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d"
        },
        "inherit": [
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AssetMatcherTest_init()",
          "matchAssetsTest(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/DevilERC20.sol:DevilTestERC20": {
        "src": "contracts/tests/DevilERC20.sol:9",
        "version": {
          "withMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "withoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "linkedWithoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271.sol:ERC1271": {
        "src": "contracts/tests/ERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271Test.sol:ERC1271Test": {
        "src": "contracts/tests/ERC1271Test.sol:8",
        "version": {
          "withMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "withoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "linkedWithoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947"
        },
        "inherit": [
          "contracts/tests/ERC1271.sol:ERC1271"
        ],
        "libraries": [],
        "methods": [
          "setReturnSuccessfulValidSignature(bool)",
          "isValidSignature(bytes32,bytes)",
          "getAllowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC20TransferProxyTest.sol:ERC20TransferProxyTest": {
        "src": "contracts/tests/ERC20TransferProxyTest.sol:7",
        "version": {
          "withMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "withoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "linkedWithoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c"
        },
        "inherit": [
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ExchangeTest.sol:ExchangeTest": {
        "src": "contracts/tests/ExchangeTest.sol:6",
        "version": {
          "withMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "withoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "linkedWithoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPerpetualOracle(address)",
          "addObservation(uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MatchingEngineTest.sol:MatchingEngineTest": {
        "src": "contracts/tests/MatchingEngineTest.sol:7",
        "version": {
          "withMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "withoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "linkedWithoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngine.sol:MatchingEngine",
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "__MatchingEngineTest_init(address,address)",
          "matchOrdersTest((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "setMakerMinSalt(uint256)",
          "addObservation(uint256,uint256)",
          "pause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MockERC20.sol:SlashERC20": {
        "src": "contracts/tests/MockERC20.sol:8",
        "version": {
          "withMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "withoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "linkedWithoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/PositioningTest.sol:PositioningTest": {
        "src": "contracts/tests/PositioningTest.sol:9",
        "version": {
          "withMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "withoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "linkedWithoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "registerBaseToken(address,address)",
          "getTotalAbsPositionValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/Safe.sol:Safe": {
        "src": "contracts/tests/Safe.sol:4",
        "version": {
          "withMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "withoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "linkedWithoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/SlashERC20.sol:UnStakeERC20": {
        "src": "contracts/tests/SlashERC20.sol:8",
        "version": {
          "withMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "withoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "linkedWithoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20.sol:TestERC20": {
        "src": "contracts/tests/TestERC20.sol:7",
        "version": {
          "withMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "withoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "linkedWithoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transferFrom(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20Relayer.sol:StakeERC20": {
        "src": "contracts/tests/TestERC20Relayer.sol:8",
        "version": {
          "withMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "withoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "linkedWithoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TransferManagerTest.sol:TransferManagerTest": {
        "src": "contracts/tests/TransferManagerTest.sol:11",
        "version": {
          "withMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "withoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "linkedWithoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f"
        },
        "inherit": [
          "contracts/matching-engine/TransferManager.sol:TransferManager",
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "checkDoTransfers(((address,uint256),address,address),((address,uint256),address,address))",
          "__TransferManager_init(address,address)",
          "transferManager_init(address,address)",
          "transferPayouts(address,uint256,address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultControllerTest.sol:VaultControllerTest": {
        "src": "contracts/tests/VaultControllerTest.sol:7",
        "version": {
          "withMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "withoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "linkedWithoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256,address,address)",
          "deposit(address,address,uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultERC20.sol:VaultTestERC20": {
        "src": "contracts/tests/VaultERC20.sol:9",
        "version": {
          "withMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "withoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "linkedWithoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultTest.sol:VaultMock": {
        "src": "contracts/tests/VaultTest.sol:8",
        "version": {
          "withMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "withoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "linkedWithoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VirtualTokenTest.sol:VirtualTokenTest": {
        "src": "contracts/tests/VirtualTokenTest.sol:6",
        "version": {
          "withMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "withoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "linkedWithoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)",
          "beforeTokenTransfer(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/insurance/InsuranceFund.sol:InsuranceFund": {
        "src": "contracts/tests/insurance/InsuranceFund.sol:12",
        "version": {
          "withMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "withoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "linkedWithoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25"
        },
        "inherit": [
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setBorrower(address)",
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibPerpMathTest.sol:TestPerpMath": {
        "src": "contracts/tests/libs/LibPerpMathTest.sol:6",
        "version": {
          "withMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "withoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "linkedWithoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testMax(int256,int256)",
          "testMin(int256,int256)",
          "testAbs(int256)",
          "neg128(int128)",
          "uintNeg128(uint128)",
          "testMulRatio(uint256,uint24)",
          "testMulDiv(int256,int256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSafeCastTest.sol:TestPerpSafeCast": {
        "src": "contracts/tests/libs/LibSafeCastTest.sol:8",
        "version": {
          "withMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "withoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "linkedWithoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testToUint128(uint256)",
          "testToUint64(uint256)",
          "testToUint32(uint256)",
          "testToUint16(uint256)",
          "testToUint8(uint256)",
          "testToInt128(int256)",
          "testToInt64(int256)",
          "testToInt32(int256)",
          "testToInt24(int256)",
          "testToInt16(int256)",
          "testToInt8(int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSettlementTokenMathTest.sol:TestSettlementTokenMath": {
        "src": "contracts/tests/libs/LibSettlementTokenMathTest.sol:6",
        "version": {
          "withMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "withoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "linkedWithoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testParseSettlementToken(uint256,uint8)",
          "testParseSettlementToken(int256,uint8)",
          "testFormatSettlementToken(uint256,uint8)",
          "testFormatSettlementToken(int256,uint8)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSignatureTest.sol:LibSignatureTest": {
        "src": "contracts/tests/libs/LibSignatureTest.sol:8",
        "version": {
          "withMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "withoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "linkedWithoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "recoverFromSigTest(bytes32,bytes)",
          "recoverFromParamsTest(bytes32,uint8,bytes32,bytes32)",
          "getKeccak(string)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexPositionToken.sol:VolmexPositionToken": {
        "src": "contracts/tests/protocol/VolmexPositionToken.sol:13",
        "version": {
          "withMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "withoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "linkedWithoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "updateTokenMetadata(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()",
          "name()",
          "symbol()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexProtocol.sol:VolmexProtocol": {
        "src": "contracts/tests/protocol/VolmexProtocol.sol:15",
        "version": {
          "withMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "withoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "linkedWithoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updateVolatilityToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VirtualToken.sol:VirtualToken": {
        "src": "contracts/tokens/VirtualToken.sol:9",
        "version": {
          "withMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "withoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "linkedWithoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setMintBurnRole(address)",
          "toggleTransferEnable()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexBaseToken.sol:VolmexBaseToken": {
        "src": "contracts/tokens/VolmexBaseToken.sol:9",
        "version": {
          "withMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "withoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "linkedWithoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c"
        },
        "inherit": [
          "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1",
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexQuoteToken.sol:VolmexQuoteToken": {
        "src": "contracts/tokens/VolmexQuoteToken.sol:7",
        "version": {
          "withMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "withoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "linkedWithoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/transfer-proxies/ERC20TransferProxy.sol:ERC20TransferProxy": {
        "src": "contracts/transfer-proxies/ERC20TransferProxy.sol:8",
        "version": {
          "withMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "withoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "linkedWithoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20TransferProxyInit()",
          "addTransferProxyRole(address)",
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/view/VolmexPerpView.sol:VolmexPerpView": {
        "src": "contracts/view/VolmexPerpView.sol:9",
        "version": {
          "withMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "withoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "linkedWithoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "grantViewStatesRole(address)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "withoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "linkedWithoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "withoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "linkedWithoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:29",
        "version": {
          "withMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "withoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "linkedWithoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "withoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "linkedWithoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "withoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "linkedWithoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "withoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "linkedWithoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "withoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "linkedWithoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "withoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "linkedWithoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:41",
        "version": {
          "withMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "withoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "linkedWithoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "withoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "linkedWithoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "withoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "linkedWithoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "withoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "linkedWithoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "withoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "linkedWithoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "withoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "linkedWithoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "withoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "linkedWithoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "withoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "linkedWithoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/funding-rate/FundingRate.sol:FundingRate": {
        "src": "contracts/funding-rate/FundingRate.sol:17",
        "version": {
          "withMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "withoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "linkedWithoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d"
        },
        "inherit": [
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/BlockContext.sol:BlockContext": {
        "src": "contracts/helpers/BlockContext.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/MarketRegistry.sol:MarketRegistry": {
        "src": "contracts/helpers/MarketRegistry.sol:15",
        "version": {
          "withMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "withoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "linkedWithoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99"
        },
        "inherit": [
          "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "setMaxOrdersPerMarket(uint8)",
          "addBaseToken(address)",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "checkBaseToken(address)",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/OwnerPausable.sol:OwnerPausable": {
        "src": "contracts/helpers/OwnerPausable.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/PositioningCallee.sol:PositioningCallee": {
        "src": "contracts/helpers/PositioningCallee.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setPositioning(address)",
          "getPositioning()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAccountBalance.sol:IAccountBalance": {
        "src": "contracts/interfaces/IAccountBalance.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "settleOwedRealizedPnl(address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "getLiquidatablePositionSize(address,address,int256)",
          "registerBaseToken(address,address)",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getMarginRequirementForLiquidation(address)",
          "getPnlAndPendingFee(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "getNLiquidate(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAssetMatcher.sol:IAssetMatcher": {
        "src": "contracts/interfaces/IAssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_matchAssets(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/IERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Metadata.sol:IERC20Metadata": {
        "src": "contracts/interfaces/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Modified.sol:IERC20Modified": {
        "src": "contracts/interfaces/IERC20Modified.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "symbol()",
          "name()",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "grantRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy": {
        "src": "contracts/interfaces/IERC20TransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IFundingRate.sol:IFundingRate": {
        "src": "contracts/interfaces/IFundingRate.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IGnosisSafe.sol:IGnosisSafe": {
        "src": "contracts/interfaces/IGnosisSafe.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThreshold()",
          "getOwners()",
          "isOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund": {
        "src": "contracts/interfaces/IInsuranceFund.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry": {
        "src": "contracts/interfaces/IMarketRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMaxOrdersPerMarket(uint8)",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "addBaseToken(address)",
          "checkBaseToken(address)",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine": {
        "src": "contracts/interfaces/IMatchingEngine.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "grantMatchOrders(address)",
          "fills(bytes32)",
          "makerMinSalt(address)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle": {
        "src": "contracts/interfaces/IPerpetualOracle.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestMarkPrice(uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "latestIndexSMA(uint256,uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)",
          "indexByBaseToken(address)",
          "initialTimestamps(uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioning.sol:IPositioning": {
        "src": "contracts/interfaces/IPositioning.sol:7",
        "inherit": [
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "toggleLiquidatorWhitelist()",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "getLiquidatablePosition(address,address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getAllPendingFundingPayment(address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "isStaleIndexOracle(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig": {
        "src": "contracts/interfaces/IPositioningConfig.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()",
          "getPartialLiquidationRatio()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ISlashing.sol:ISlashing": {
        "src": "contracts/interfaces/ISlashing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "slash(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferExecutor.sol:ITransferExecutor": {
        "src": "contracts/interfaces/ITransferExecutor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferManager.sol:ITransferManager": {
        "src": "contracts/interfaces/ITransferManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferProxy.sol:ITransferProxy": {
        "src": "contracts/interfaces/ITransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVaultController.sol:IVaultController": {
        "src": "contracts/interfaces/IVaultController.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "registerVault(address,address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getVault(address)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "setPositioning(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVirtualToken.sol:IVirtualToken": {
        "src": "contracts/interfaces/IVirtualToken.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "isBase()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken": {
        "src": "contracts/interfaces/IVolmexBaseToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery": {
        "src": "contracts/interfaces/IVolmexPerpPeriphery.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "transferToVault(address,address,uint256)",
          "whitelistTrader(address,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView": {
        "src": "contracts/interfaces/IVolmexPerpView.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "perpIndexCount()",
          "vaultIndexCount()",
          "baseTokenIndexCount()",
          "quoteTokenIndexCount()",
          "positionings(uint256)",
          "vaultControllers(uint256)",
          "baseTokens(uint256)",
          "quoteTokens(uint256)",
          "accounts(uint256)",
          "marketRegistries(uint256)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexProtocol.sol:IVolmexProtocol": {
        "src": "contracts/interfaces/IVolmexProtocol.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "minimumCollateralQty()",
          "active()",
          "isSettled()",
          "volatilityToken()",
          "inverseVolatilityToken()",
          "collateral()",
          "issuanceFees()",
          "redeemFees()",
          "accumulatedFees()",
          "volatilityCapRatio()",
          "settlementPrice()",
          "precisionRatio()",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updatePositionToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken": {
        "src": "contracts/interfaces/IVolmexQuoteToken.sol:6",
        "inherit": [
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAccountMarket.sol:LibAccountMarket": {
        "src": "contracts/libs/LibAccountMarket.sol:4",
        "version": {
          "withMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "withoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "linkedWithoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAsset.sol:LibAsset": {
        "src": "contracts/libs/LibAsset.sol:4",
        "version": {
          "withMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "withoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "linkedWithoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibDeal.sol:LibDeal": {
        "src": "contracts/libs/LibDeal.sol:6",
        "version": {
          "withMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "withoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "linkedWithoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFill.sol:LibFill": {
        "src": "contracts/libs/LibFill.sol:7",
        "version": {
          "withMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "withoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "linkedWithoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFullMath.sol:LibFullMath": {
        "src": "contracts/libs/LibFullMath.sol:7",
        "version": {
          "withMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "withoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "linkedWithoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibMath.sol:LibMath": {
        "src": "contracts/libs/LibMath.sol:5",
        "version": {
          "withMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "withoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "linkedWithoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibOrder.sol:LibOrder": {
        "src": "contracts/libs/LibOrder.sol:9",
        "version": {
          "withMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "withoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "linkedWithoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibPerpMath.sol:LibPerpMath": {
        "src": "contracts/libs/LibPerpMath.sol:8",
        "version": {
          "withMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "withoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "linkedWithoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastInt.sol:LibSafeCastInt": {
        "src": "contracts/libs/LibSafeCastInt.sol:8",
        "version": {
          "withMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "withoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "linkedWithoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastUint.sol:LibSafeCastUint": {
        "src": "contracts/libs/LibSafeCastUint.sol:8",
        "version": {
          "withMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "withoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "linkedWithoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSettlementTokenMath.sol:LibSettlementTokenMath": {
        "src": "contracts/libs/LibSettlementTokenMath.sol:5",
        "version": {
          "withMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "withoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "linkedWithoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSignature.sol:LibSignature": {
        "src": "contracts/libs/LibSignature.sol:5",
        "version": {
          "withMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "withoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "linkedWithoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/AssetMatcher.sol:AssetMatcher": {
        "src": "contracts/matching-engine/AssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngine.sol:MatchingEngine": {
        "src": "contracts/matching-engine/MatchingEngine.sol:7",
        "version": {
          "withMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "withoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "linkedWithoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore": {
        "src": "contracts/matching-engine/MatchingEngineCore.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "grantMatchOrders(address)",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrderInBatch(struct LibOrder.Order[],struct LibOrder.Order[])",
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "updateOrderSizeInterval(uint256)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferExecutor.sol:TransferExecutor": {
        "src": "contracts/matching-engine/TransferExecutor.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTransferProxy(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferManager.sol:TransferManager": {
        "src": "contracts/matching-engine/TransferManager.sol:11",
        "inherit": [
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/AccountBalanceMock.sol:AccountBalanceMock": {
        "src": "contracts/mocks/AccountBalanceMock.sol:12",
        "version": {
          "withMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "withoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "linkedWithoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "mock_setOwedRealisedPnlX10_18(int256)",
          "mock_setUnrealizedPnlX10_18(int256)",
          "mock_setPendingFeeX10_18(uint256)",
          "registerBaseToken(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/PositioningMock.sol:PositioningMock": {
        "src": "contracts/mocks/PositioningMock.sol:8",
        "version": {
          "withMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "withoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "linkedWithoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "mock_setFundingPaymentX10_18(int256)",
          "getAllPendingFundingPayment(address)",
          "settleAllFunding(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/oracles/PerpetualOracle.sol:PerpetualOracle": {
        "src": "contracts/oracles/PerpetualOracle.sol:11",
        "version": {
          "withMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "withoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "linkedWithoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e"
        },
        "inherit": [
          "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestIndexSMA(uint256,uint256)",
          "latestMarkPrice(uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/AccountBalance.sol:AccountBalance": {
        "src": "contracts/orderbook/AccountBalance.sol:23",
        "version": {
          "withMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "withoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "linkedWithoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22"
        },
        "inherit": [
          "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "contracts/interfaces/IAccountBalance.sol:IAccountBalance"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "grantSettleRealizedPnlRole(address)",
          "setUnderlyingPriceIndex(address,uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setMinTimeBound(uint256)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleOwedRealizedPnl(address)",
          "registerBaseToken(address,address)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "updateSigmaVolmexIvs(uint256[],uint256[])",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getLiquidatablePositionSize(address,address,int256)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getPnlAndPendingFee(address)",
          "getIndexPrice(address,uint256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "getMarginRequirementForLiquidation(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getNLiquidate(uint256,uint256,uint256)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/OrderValidator.sol:OrderValidator": {
        "src": "contracts/orderbook/OrderValidator.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Positioning.sol:Positioning": {
        "src": "contracts/orderbook/Positioning.sol:30",
        "version": {
          "withMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "withoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "linkedWithoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f"
        },
        "inherit": [
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "setMarketRegistry(address)",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "setPerpetualOracle(address)",
          "setMinPositionSize(uint256,address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setIndexOracleInterval(uint256)",
          "toggleLiquidatorWhitelist()",
          "pause()",
          "unpause()",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "getLiquidatablePosition(address,address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "getAllPendingFundingPayment(address)",
          "isStaleIndexOracle(address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getIndexPrice(address,uint256)",
          "getAccountValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/PositioningConfig.sol:PositioningConfig": {
        "src": "contracts/orderbook/PositioningConfig.sol:12",
        "version": {
          "withMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "withoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "linkedWithoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1",
          "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setLiquidationPenaltyRatio(uint24)",
          "setLiquidatorFeeRatio(uint24)",
          "setPartialCloseRatio(uint24)",
          "setTwapInterval(uint32)",
          "setTwapIntervalLiquidation(uint32)",
          "setMaxMarketsPerAccount(uint8)",
          "setSettlementTokenBalanceCap(uint256)",
          "setMaxFundingRate(uint24)",
          "setImRatio(uint24)",
          "setMmRatio(uint24)",
          "setPartialLiquidationRatio(uint24)",
          "setPerpetualOracle(address)",
          "setPositioning(address)",
          "setAccountBalance(address)",
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialLiquidationRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Vault.sol:Vault": {
        "src": "contracts/orderbook/Vault.sol:24",
        "version": {
          "withMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "withoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "linkedWithoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/storage/VaultStorage.sol:VaultStorageV1",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVault.sol:IVault"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/VaultController.sol:VaultController": {
        "src": "contracts/orderbook/VaultController.sol:23",
        "version": {
          "withMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "withoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "linkedWithoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/interfaces/IVaultController.sol:IVaultController",
          "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "registerVault(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "setPositioning(address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "getVault(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/periphery/VolmexPerpPeriphery.sol:VolmexPerpPeriphery": {
        "src": "contracts/periphery/VolmexPerpPeriphery.sol:15",
        "version": {
          "withMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "withoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "linkedWithoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e"
        },
        "inherit": [
          "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address[2],address,address)",
          "setPerpetualOracle(address)",
          "setRelayer(address)",
          "toggleTraderWhitelistEnabled()",
          "whitelistVault(address,bool)",
          "whitelistTrader(address,bool)",
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "batchOpenPosition(uint256,struct LibOrder.Order[],bytes[],struct LibOrder.Order[],bytes[],bytes)",
          "transferToVault(address,address,uint256)",
          "batchOrderValidate(struct LibOrder.Order[],uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Slashing.sol:Slashing": {
        "src": "contracts/relayer-staking/Slashing.sol:10",
        "version": {
          "withMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "withoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "linkedWithoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811"
        },
        "inherit": [
          "contracts/relayer-staking/Staking.sol:Staking",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "Slashing_init(address,address,address,address,uint256,address)",
          "slash(address)",
          "updateSlashPenalty(uint256)",
          "setSlashingReceiver(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Staking.sol:Staking": {
        "src": "contracts/relayer-staking/Staking.sol:12",
        "version": {
          "withMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "withoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "linkedWithoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79"
        },
        "inherit": [
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "cooldown(uint256)",
          "toggleStaking()",
          "updateMinStakeRequired(uint256)",
          "updateRelayerMultisig(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1": {
        "src": "contracts/storage/AccountBalanceStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1": {
        "src": "contracts/storage/BaseTokenStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/FundingRateStorage.sol:FundingRateStorage": {
        "src": "contracts/storage/FundingRateStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1": {
        "src": "contracts/storage/MarketRegistryStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1": {
        "src": "contracts/storage/PositioningConfigStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningStorage.sol:PositioningStorageV1": {
        "src": "contracts/storage/PositioningStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage": {
        "src": "contracts/storage/VaultControllerStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultStorage.sol:VaultStorageV1": {
        "src": "contracts/storage/VaultStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/AssetMatcherTest.sol:AssetMatcherTest": {
        "src": "contracts/tests/AssetMatcherTest.sol:10",
        "version": {
          "withMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "withoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "linkedWithoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d"
        },
        "inherit": [
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AssetMatcherTest_init()",
          "matchAssetsTest(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/DevilERC20.sol:DevilTestERC20": {
        "src": "contracts/tests/DevilERC20.sol:9",
        "version": {
          "withMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "withoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "linkedWithoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271.sol:ERC1271": {
        "src": "contracts/tests/ERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271Test.sol:ERC1271Test": {
        "src": "contracts/tests/ERC1271Test.sol:8",
        "version": {
          "withMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "withoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "linkedWithoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947"
        },
        "inherit": [
          "contracts/tests/ERC1271.sol:ERC1271"
        ],
        "libraries": [],
        "methods": [
          "setReturnSuccessfulValidSignature(bool)",
          "isValidSignature(bytes32,bytes)",
          "getAllowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC20TransferProxyTest.sol:ERC20TransferProxyTest": {
        "src": "contracts/tests/ERC20TransferProxyTest.sol:7",
        "version": {
          "withMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "withoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "linkedWithoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c"
        },
        "inherit": [
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ExchangeTest.sol:ExchangeTest": {
        "src": "contracts/tests/ExchangeTest.sol:6",
        "version": {
          "withMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "withoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "linkedWithoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPerpetualOracle(address)",
          "addObservation(uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MatchingEngineTest.sol:MatchingEngineTest": {
        "src": "contracts/tests/MatchingEngineTest.sol:7",
        "version": {
          "withMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "withoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "linkedWithoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngine.sol:MatchingEngine",
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "__MatchingEngineTest_init(address,address)",
          "matchOrdersTest((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "setMakerMinSalt(uint256)",
          "addObservation(uint256,uint256)",
          "pause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MockERC20.sol:SlashERC20": {
        "src": "contracts/tests/MockERC20.sol:8",
        "version": {
          "withMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "withoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "linkedWithoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/PositioningTest.sol:PositioningTest": {
        "src": "contracts/tests/PositioningTest.sol:9",
        "version": {
          "withMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "withoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "linkedWithoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "registerBaseToken(address,address)",
          "getTotalAbsPositionValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/Safe.sol:Safe": {
        "src": "contracts/tests/Safe.sol:4",
        "version": {
          "withMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "withoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "linkedWithoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/SlashERC20.sol:UnStakeERC20": {
        "src": "contracts/tests/SlashERC20.sol:8",
        "version": {
          "withMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "withoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "linkedWithoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20.sol:TestERC20": {
        "src": "contracts/tests/TestERC20.sol:7",
        "version": {
          "withMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "withoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "linkedWithoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transferFrom(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20Relayer.sol:StakeERC20": {
        "src": "contracts/tests/TestERC20Relayer.sol:8",
        "version": {
          "withMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "withoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "linkedWithoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TransferManagerTest.sol:TransferManagerTest": {
        "src": "contracts/tests/TransferManagerTest.sol:11",
        "version": {
          "withMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "withoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "linkedWithoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f"
        },
        "inherit": [
          "contracts/matching-engine/TransferManager.sol:TransferManager",
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "checkDoTransfers(((address,uint256),address,address),((address,uint256),address,address))",
          "__TransferManager_init(address,address)",
          "transferManager_init(address,address)",
          "transferPayouts(address,uint256,address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultControllerTest.sol:VaultControllerTest": {
        "src": "contracts/tests/VaultControllerTest.sol:7",
        "version": {
          "withMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "withoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "linkedWithoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256,address,address)",
          "deposit(address,address,uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultERC20.sol:VaultTestERC20": {
        "src": "contracts/tests/VaultERC20.sol:9",
        "version": {
          "withMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "withoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "linkedWithoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultTest.sol:VaultMock": {
        "src": "contracts/tests/VaultTest.sol:8",
        "version": {
          "withMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "withoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "linkedWithoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VirtualTokenTest.sol:VirtualTokenTest": {
        "src": "contracts/tests/VirtualTokenTest.sol:6",
        "version": {
          "withMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "withoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "linkedWithoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)",
          "beforeTokenTransfer(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/insurance/InsuranceFund.sol:InsuranceFund": {
        "src": "contracts/tests/insurance/InsuranceFund.sol:12",
        "version": {
          "withMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "withoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "linkedWithoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25"
        },
        "inherit": [
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setBorrower(address)",
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibPerpMathTest.sol:TestPerpMath": {
        "src": "contracts/tests/libs/LibPerpMathTest.sol:6",
        "version": {
          "withMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "withoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "linkedWithoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testMax(int256,int256)",
          "testMin(int256,int256)",
          "testAbs(int256)",
          "neg128(int128)",
          "uintNeg128(uint128)",
          "testMulRatio(uint256,uint24)",
          "testMulDiv(int256,int256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSafeCastTest.sol:TestPerpSafeCast": {
        "src": "contracts/tests/libs/LibSafeCastTest.sol:8",
        "version": {
          "withMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "withoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "linkedWithoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testToUint128(uint256)",
          "testToUint64(uint256)",
          "testToUint32(uint256)",
          "testToUint16(uint256)",
          "testToUint8(uint256)",
          "testToInt128(int256)",
          "testToInt64(int256)",
          "testToInt32(int256)",
          "testToInt24(int256)",
          "testToInt16(int256)",
          "testToInt8(int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSettlementTokenMathTest.sol:TestSettlementTokenMath": {
        "src": "contracts/tests/libs/LibSettlementTokenMathTest.sol:6",
        "version": {
          "withMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "withoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "linkedWithoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testParseSettlementToken(uint256,uint8)",
          "testParseSettlementToken(int256,uint8)",
          "testFormatSettlementToken(uint256,uint8)",
          "testFormatSettlementToken(int256,uint8)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSignatureTest.sol:LibSignatureTest": {
        "src": "contracts/tests/libs/LibSignatureTest.sol:8",
        "version": {
          "withMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "withoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "linkedWithoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "recoverFromSigTest(bytes32,bytes)",
          "recoverFromParamsTest(bytes32,uint8,bytes32,bytes32)",
          "getKeccak(string)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexPositionToken.sol:VolmexPositionToken": {
        "src": "contracts/tests/protocol/VolmexPositionToken.sol:13",
        "version": {
          "withMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "withoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "linkedWithoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "updateTokenMetadata(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()",
          "name()",
          "symbol()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexProtocol.sol:VolmexProtocol": {
        "src": "contracts/tests/protocol/VolmexProtocol.sol:15",
        "version": {
          "withMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "withoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "linkedWithoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updateVolatilityToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VirtualToken.sol:VirtualToken": {
        "src": "contracts/tokens/VirtualToken.sol:9",
        "version": {
          "withMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "withoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "linkedWithoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setMintBurnRole(address)",
          "toggleTransferEnable()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexBaseToken.sol:VolmexBaseToken": {
        "src": "contracts/tokens/VolmexBaseToken.sol:9",
        "version": {
          "withMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "withoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "linkedWithoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c"
        },
        "inherit": [
          "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1",
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexQuoteToken.sol:VolmexQuoteToken": {
        "src": "contracts/tokens/VolmexQuoteToken.sol:7",
        "version": {
          "withMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "withoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "linkedWithoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/transfer-proxies/ERC20TransferProxy.sol:ERC20TransferProxy": {
        "src": "contracts/transfer-proxies/ERC20TransferProxy.sol:8",
        "version": {
          "withMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "withoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "linkedWithoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20TransferProxyInit()",
          "addTransferProxyRole(address)",
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/view/VolmexPerpView.sol:VolmexPerpView": {
        "src": "contracts/view/VolmexPerpView.sol:9",
        "version": {
          "withMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "withoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "linkedWithoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "grantViewStatesRole(address)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "withoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "linkedWithoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "withoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "linkedWithoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:29",
        "version": {
          "withMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "withoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "linkedWithoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "withoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "linkedWithoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "withoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "linkedWithoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "withoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "linkedWithoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "withoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "linkedWithoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "withoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "linkedWithoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:41",
        "version": {
          "withMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "withoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "linkedWithoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "withoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "linkedWithoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "withoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "linkedWithoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "withoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "linkedWithoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "withoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "linkedWithoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "withoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "linkedWithoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "withoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "linkedWithoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "withoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "linkedWithoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/funding-rate/FundingRate.sol:FundingRate": {
        "src": "contracts/funding-rate/FundingRate.sol:17",
        "version": {
          "withMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "withoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "linkedWithoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d"
        },
        "inherit": [
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/BlockContext.sol:BlockContext": {
        "src": "contracts/helpers/BlockContext.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/MarketRegistry.sol:MarketRegistry": {
        "src": "contracts/helpers/MarketRegistry.sol:15",
        "version": {
          "withMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "withoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "linkedWithoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99"
        },
        "inherit": [
          "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "setMaxOrdersPerMarket(uint8)",
          "addBaseToken(address)",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "checkBaseToken(address)",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/OwnerPausable.sol:OwnerPausable": {
        "src": "contracts/helpers/OwnerPausable.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/PositioningCallee.sol:PositioningCallee": {
        "src": "contracts/helpers/PositioningCallee.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setPositioning(address)",
          "getPositioning()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAccountBalance.sol:IAccountBalance": {
        "src": "contracts/interfaces/IAccountBalance.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "settleOwedRealizedPnl(address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "getLiquidatablePositionSize(address,address,int256)",
          "registerBaseToken(address,address)",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getMarginRequirementForLiquidation(address)",
          "getPnlAndPendingFee(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "getNLiquidate(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAssetMatcher.sol:IAssetMatcher": {
        "src": "contracts/interfaces/IAssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_matchAssets(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/IERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Metadata.sol:IERC20Metadata": {
        "src": "contracts/interfaces/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Modified.sol:IERC20Modified": {
        "src": "contracts/interfaces/IERC20Modified.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "symbol()",
          "name()",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "grantRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy": {
        "src": "contracts/interfaces/IERC20TransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IFundingRate.sol:IFundingRate": {
        "src": "contracts/interfaces/IFundingRate.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IGnosisSafe.sol:IGnosisSafe": {
        "src": "contracts/interfaces/IGnosisSafe.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThreshold()",
          "getOwners()",
          "isOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund": {
        "src": "contracts/interfaces/IInsuranceFund.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry": {
        "src": "contracts/interfaces/IMarketRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMaxOrdersPerMarket(uint8)",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "addBaseToken(address)",
          "checkBaseToken(address)",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine": {
        "src": "contracts/interfaces/IMatchingEngine.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "grantMatchOrders(address)",
          "fills(bytes32)",
          "makerMinSalt(address)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle": {
        "src": "contracts/interfaces/IPerpetualOracle.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestMarkPrice(uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "latestIndexSMA(uint256,uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)",
          "indexByBaseToken(address)",
          "initialTimestamps(uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioning.sol:IPositioning": {
        "src": "contracts/interfaces/IPositioning.sol:7",
        "inherit": [
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "toggleLiquidatorWhitelist()",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "getLiquidatablePosition(address,address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getAllPendingFundingPayment(address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "isStaleIndexOracle(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig": {
        "src": "contracts/interfaces/IPositioningConfig.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()",
          "getPartialLiquidationRatio()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ISlashing.sol:ISlashing": {
        "src": "contracts/interfaces/ISlashing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "slash(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferExecutor.sol:ITransferExecutor": {
        "src": "contracts/interfaces/ITransferExecutor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferManager.sol:ITransferManager": {
        "src": "contracts/interfaces/ITransferManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferProxy.sol:ITransferProxy": {
        "src": "contracts/interfaces/ITransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVaultController.sol:IVaultController": {
        "src": "contracts/interfaces/IVaultController.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "registerVault(address,address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getVault(address)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "setPositioning(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVirtualToken.sol:IVirtualToken": {
        "src": "contracts/interfaces/IVirtualToken.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "isBase()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken": {
        "src": "contracts/interfaces/IVolmexBaseToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery": {
        "src": "contracts/interfaces/IVolmexPerpPeriphery.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "transferToVault(address,address,uint256)",
          "whitelistTrader(address,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView": {
        "src": "contracts/interfaces/IVolmexPerpView.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "perpIndexCount()",
          "vaultIndexCount()",
          "baseTokenIndexCount()",
          "quoteTokenIndexCount()",
          "positionings(uint256)",
          "vaultControllers(uint256)",
          "baseTokens(uint256)",
          "quoteTokens(uint256)",
          "accounts(uint256)",
          "marketRegistries(uint256)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexProtocol.sol:IVolmexProtocol": {
        "src": "contracts/interfaces/IVolmexProtocol.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "minimumCollateralQty()",
          "active()",
          "isSettled()",
          "volatilityToken()",
          "inverseVolatilityToken()",
          "collateral()",
          "issuanceFees()",
          "redeemFees()",
          "accumulatedFees()",
          "volatilityCapRatio()",
          "settlementPrice()",
          "precisionRatio()",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updatePositionToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken": {
        "src": "contracts/interfaces/IVolmexQuoteToken.sol:6",
        "inherit": [
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAccountMarket.sol:LibAccountMarket": {
        "src": "contracts/libs/LibAccountMarket.sol:4",
        "version": {
          "withMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "withoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "linkedWithoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAsset.sol:LibAsset": {
        "src": "contracts/libs/LibAsset.sol:4",
        "version": {
          "withMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "withoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "linkedWithoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibDeal.sol:LibDeal": {
        "src": "contracts/libs/LibDeal.sol:6",
        "version": {
          "withMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "withoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "linkedWithoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFill.sol:LibFill": {
        "src": "contracts/libs/LibFill.sol:7",
        "version": {
          "withMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "withoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "linkedWithoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFullMath.sol:LibFullMath": {
        "src": "contracts/libs/LibFullMath.sol:7",
        "version": {
          "withMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "withoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "linkedWithoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibMath.sol:LibMath": {
        "src": "contracts/libs/LibMath.sol:5",
        "version": {
          "withMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "withoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "linkedWithoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibOrder.sol:LibOrder": {
        "src": "contracts/libs/LibOrder.sol:9",
        "version": {
          "withMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "withoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "linkedWithoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibPerpMath.sol:LibPerpMath": {
        "src": "contracts/libs/LibPerpMath.sol:8",
        "version": {
          "withMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "withoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "linkedWithoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastInt.sol:LibSafeCastInt": {
        "src": "contracts/libs/LibSafeCastInt.sol:8",
        "version": {
          "withMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "withoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "linkedWithoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastUint.sol:LibSafeCastUint": {
        "src": "contracts/libs/LibSafeCastUint.sol:8",
        "version": {
          "withMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "withoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "linkedWithoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSettlementTokenMath.sol:LibSettlementTokenMath": {
        "src": "contracts/libs/LibSettlementTokenMath.sol:5",
        "version": {
          "withMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "withoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "linkedWithoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSignature.sol:LibSignature": {
        "src": "contracts/libs/LibSignature.sol:5",
        "version": {
          "withMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "withoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "linkedWithoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/AssetMatcher.sol:AssetMatcher": {
        "src": "contracts/matching-engine/AssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngine.sol:MatchingEngine": {
        "src": "contracts/matching-engine/MatchingEngine.sol:7",
        "version": {
          "withMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "withoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "linkedWithoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore": {
        "src": "contracts/matching-engine/MatchingEngineCore.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "grantMatchOrders(address)",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrderInBatch(struct LibOrder.Order[],struct LibOrder.Order[])",
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "updateOrderSizeInterval(uint256)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferExecutor.sol:TransferExecutor": {
        "src": "contracts/matching-engine/TransferExecutor.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTransferProxy(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferManager.sol:TransferManager": {
        "src": "contracts/matching-engine/TransferManager.sol:11",
        "inherit": [
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/AccountBalanceMock.sol:AccountBalanceMock": {
        "src": "contracts/mocks/AccountBalanceMock.sol:12",
        "version": {
          "withMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "withoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "linkedWithoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "mock_setOwedRealisedPnlX10_18(int256)",
          "mock_setUnrealizedPnlX10_18(int256)",
          "mock_setPendingFeeX10_18(uint256)",
          "registerBaseToken(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/PositioningMock.sol:PositioningMock": {
        "src": "contracts/mocks/PositioningMock.sol:8",
        "version": {
          "withMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "withoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "linkedWithoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "mock_setFundingPaymentX10_18(int256)",
          "getAllPendingFundingPayment(address)",
          "settleAllFunding(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/oracles/PerpetualOracle.sol:PerpetualOracle": {
        "src": "contracts/oracles/PerpetualOracle.sol:11",
        "version": {
          "withMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "withoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "linkedWithoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e"
        },
        "inherit": [
          "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestIndexSMA(uint256,uint256)",
          "latestMarkPrice(uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/AccountBalance.sol:AccountBalance": {
        "src": "contracts/orderbook/AccountBalance.sol:23",
        "version": {
          "withMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "withoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "linkedWithoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22"
        },
        "inherit": [
          "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "contracts/interfaces/IAccountBalance.sol:IAccountBalance"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "grantSettleRealizedPnlRole(address)",
          "setUnderlyingPriceIndex(address,uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setMinTimeBound(uint256)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleOwedRealizedPnl(address)",
          "registerBaseToken(address,address)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "updateSigmaVolmexIvs(uint256[],uint256[])",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getLiquidatablePositionSize(address,address,int256)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getPnlAndPendingFee(address)",
          "getIndexPrice(address,uint256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "getMarginRequirementForLiquidation(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getNLiquidate(uint256,uint256,uint256)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/OrderValidator.sol:OrderValidator": {
        "src": "contracts/orderbook/OrderValidator.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Positioning.sol:Positioning": {
        "src": "contracts/orderbook/Positioning.sol:30",
        "version": {
          "withMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "withoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "linkedWithoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f"
        },
        "inherit": [
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "setMarketRegistry(address)",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "setPerpetualOracle(address)",
          "setMinPositionSize(uint256,address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setIndexOracleInterval(uint256)",
          "toggleLiquidatorWhitelist()",
          "pause()",
          "unpause()",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "getLiquidatablePosition(address,address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "getAllPendingFundingPayment(address)",
          "isStaleIndexOracle(address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getIndexPrice(address,uint256)",
          "getAccountValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/PositioningConfig.sol:PositioningConfig": {
        "src": "contracts/orderbook/PositioningConfig.sol:12",
        "version": {
          "withMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "withoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "linkedWithoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1",
          "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setLiquidationPenaltyRatio(uint24)",
          "setLiquidatorFeeRatio(uint24)",
          "setPartialCloseRatio(uint24)",
          "setTwapInterval(uint32)",
          "setTwapIntervalLiquidation(uint32)",
          "setMaxMarketsPerAccount(uint8)",
          "setSettlementTokenBalanceCap(uint256)",
          "setMaxFundingRate(uint24)",
          "setImRatio(uint24)",
          "setMmRatio(uint24)",
          "setPartialLiquidationRatio(uint24)",
          "setPerpetualOracle(address)",
          "setPositioning(address)",
          "setAccountBalance(address)",
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialLiquidationRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Vault.sol:Vault": {
        "src": "contracts/orderbook/Vault.sol:24",
        "version": {
          "withMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "withoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "linkedWithoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/storage/VaultStorage.sol:VaultStorageV1",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVault.sol:IVault"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/VaultController.sol:VaultController": {
        "src": "contracts/orderbook/VaultController.sol:23",
        "version": {
          "withMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "withoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "linkedWithoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/interfaces/IVaultController.sol:IVaultController",
          "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "registerVault(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "setPositioning(address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "getVault(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/periphery/VolmexPerpPeriphery.sol:VolmexPerpPeriphery": {
        "src": "contracts/periphery/VolmexPerpPeriphery.sol:15",
        "version": {
          "withMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "withoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "linkedWithoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e"
        },
        "inherit": [
          "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address[2],address,address)",
          "setPerpetualOracle(address)",
          "setRelayer(address)",
          "toggleTraderWhitelistEnabled()",
          "whitelistVault(address,bool)",
          "whitelistTrader(address,bool)",
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "batchOpenPosition(uint256,struct LibOrder.Order[],bytes[],struct LibOrder.Order[],bytes[],bytes)",
          "transferToVault(address,address,uint256)",
          "batchOrderValidate(struct LibOrder.Order[],uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Slashing.sol:Slashing": {
        "src": "contracts/relayer-staking/Slashing.sol:10",
        "version": {
          "withMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "withoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "linkedWithoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811"
        },
        "inherit": [
          "contracts/relayer-staking/Staking.sol:Staking",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "Slashing_init(address,address,address,address,uint256,address)",
          "slash(address)",
          "updateSlashPenalty(uint256)",
          "setSlashingReceiver(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Staking.sol:Staking": {
        "src": "contracts/relayer-staking/Staking.sol:12",
        "version": {
          "withMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "withoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "linkedWithoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79"
        },
        "inherit": [
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "cooldown(uint256)",
          "toggleStaking()",
          "updateMinStakeRequired(uint256)",
          "updateRelayerMultisig(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1": {
        "src": "contracts/storage/AccountBalanceStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1": {
        "src": "contracts/storage/BaseTokenStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/FundingRateStorage.sol:FundingRateStorage": {
        "src": "contracts/storage/FundingRateStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1": {
        "src": "contracts/storage/MarketRegistryStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1": {
        "src": "contracts/storage/PositioningConfigStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningStorage.sol:PositioningStorageV1": {
        "src": "contracts/storage/PositioningStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage": {
        "src": "contracts/storage/VaultControllerStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultStorage.sol:VaultStorageV1": {
        "src": "contracts/storage/VaultStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/AssetMatcherTest.sol:AssetMatcherTest": {
        "src": "contracts/tests/AssetMatcherTest.sol:10",
        "version": {
          "withMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "withoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "linkedWithoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d"
        },
        "inherit": [
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AssetMatcherTest_init()",
          "matchAssetsTest(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/DevilERC20.sol:DevilTestERC20": {
        "src": "contracts/tests/DevilERC20.sol:9",
        "version": {
          "withMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "withoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "linkedWithoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271.sol:ERC1271": {
        "src": "contracts/tests/ERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271Test.sol:ERC1271Test": {
        "src": "contracts/tests/ERC1271Test.sol:8",
        "version": {
          "withMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "withoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "linkedWithoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947"
        },
        "inherit": [
          "contracts/tests/ERC1271.sol:ERC1271"
        ],
        "libraries": [],
        "methods": [
          "setReturnSuccessfulValidSignature(bool)",
          "isValidSignature(bytes32,bytes)",
          "getAllowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC20TransferProxyTest.sol:ERC20TransferProxyTest": {
        "src": "contracts/tests/ERC20TransferProxyTest.sol:7",
        "version": {
          "withMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "withoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "linkedWithoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c"
        },
        "inherit": [
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ExchangeTest.sol:ExchangeTest": {
        "src": "contracts/tests/ExchangeTest.sol:6",
        "version": {
          "withMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "withoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "linkedWithoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPerpetualOracle(address)",
          "addObservation(uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MatchingEngineTest.sol:MatchingEngineTest": {
        "src": "contracts/tests/MatchingEngineTest.sol:7",
        "version": {
          "withMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "withoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "linkedWithoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngine.sol:MatchingEngine",
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "__MatchingEngineTest_init(address,address)",
          "matchOrdersTest((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "setMakerMinSalt(uint256)",
          "addObservation(uint256,uint256)",
          "pause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MockERC20.sol:SlashERC20": {
        "src": "contracts/tests/MockERC20.sol:8",
        "version": {
          "withMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "withoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "linkedWithoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/PositioningTest.sol:PositioningTest": {
        "src": "contracts/tests/PositioningTest.sol:9",
        "version": {
          "withMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "withoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "linkedWithoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "registerBaseToken(address,address)",
          "getTotalAbsPositionValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/Safe.sol:Safe": {
        "src": "contracts/tests/Safe.sol:4",
        "version": {
          "withMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "withoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "linkedWithoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/SlashERC20.sol:UnStakeERC20": {
        "src": "contracts/tests/SlashERC20.sol:8",
        "version": {
          "withMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "withoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "linkedWithoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20.sol:TestERC20": {
        "src": "contracts/tests/TestERC20.sol:7",
        "version": {
          "withMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "withoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "linkedWithoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transferFrom(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20Relayer.sol:StakeERC20": {
        "src": "contracts/tests/TestERC20Relayer.sol:8",
        "version": {
          "withMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "withoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "linkedWithoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TransferManagerTest.sol:TransferManagerTest": {
        "src": "contracts/tests/TransferManagerTest.sol:11",
        "version": {
          "withMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "withoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "linkedWithoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f"
        },
        "inherit": [
          "contracts/matching-engine/TransferManager.sol:TransferManager",
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "checkDoTransfers(((address,uint256),address,address),((address,uint256),address,address))",
          "__TransferManager_init(address,address)",
          "transferManager_init(address,address)",
          "transferPayouts(address,uint256,address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultControllerTest.sol:VaultControllerTest": {
        "src": "contracts/tests/VaultControllerTest.sol:7",
        "version": {
          "withMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "withoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "linkedWithoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256,address,address)",
          "deposit(address,address,uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultERC20.sol:VaultTestERC20": {
        "src": "contracts/tests/VaultERC20.sol:9",
        "version": {
          "withMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "withoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "linkedWithoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultTest.sol:VaultMock": {
        "src": "contracts/tests/VaultTest.sol:8",
        "version": {
          "withMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "withoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "linkedWithoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VirtualTokenTest.sol:VirtualTokenTest": {
        "src": "contracts/tests/VirtualTokenTest.sol:6",
        "version": {
          "withMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "withoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "linkedWithoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)",
          "beforeTokenTransfer(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/insurance/InsuranceFund.sol:InsuranceFund": {
        "src": "contracts/tests/insurance/InsuranceFund.sol:12",
        "version": {
          "withMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "withoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "linkedWithoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25"
        },
        "inherit": [
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setBorrower(address)",
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibPerpMathTest.sol:TestPerpMath": {
        "src": "contracts/tests/libs/LibPerpMathTest.sol:6",
        "version": {
          "withMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "withoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "linkedWithoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testMax(int256,int256)",
          "testMin(int256,int256)",
          "testAbs(int256)",
          "neg128(int128)",
          "uintNeg128(uint128)",
          "testMulRatio(uint256,uint24)",
          "testMulDiv(int256,int256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSafeCastTest.sol:TestPerpSafeCast": {
        "src": "contracts/tests/libs/LibSafeCastTest.sol:8",
        "version": {
          "withMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "withoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "linkedWithoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testToUint128(uint256)",
          "testToUint64(uint256)",
          "testToUint32(uint256)",
          "testToUint16(uint256)",
          "testToUint8(uint256)",
          "testToInt128(int256)",
          "testToInt64(int256)",
          "testToInt32(int256)",
          "testToInt24(int256)",
          "testToInt16(int256)",
          "testToInt8(int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSettlementTokenMathTest.sol:TestSettlementTokenMath": {
        "src": "contracts/tests/libs/LibSettlementTokenMathTest.sol:6",
        "version": {
          "withMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "withoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "linkedWithoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testParseSettlementToken(uint256,uint8)",
          "testParseSettlementToken(int256,uint8)",
          "testFormatSettlementToken(uint256,uint8)",
          "testFormatSettlementToken(int256,uint8)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSignatureTest.sol:LibSignatureTest": {
        "src": "contracts/tests/libs/LibSignatureTest.sol:8",
        "version": {
          "withMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "withoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "linkedWithoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "recoverFromSigTest(bytes32,bytes)",
          "recoverFromParamsTest(bytes32,uint8,bytes32,bytes32)",
          "getKeccak(string)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexPositionToken.sol:VolmexPositionToken": {
        "src": "contracts/tests/protocol/VolmexPositionToken.sol:13",
        "version": {
          "withMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "withoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "linkedWithoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "updateTokenMetadata(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()",
          "name()",
          "symbol()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexProtocol.sol:VolmexProtocol": {
        "src": "contracts/tests/protocol/VolmexProtocol.sol:15",
        "version": {
          "withMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "withoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "linkedWithoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updateVolatilityToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VirtualToken.sol:VirtualToken": {
        "src": "contracts/tokens/VirtualToken.sol:9",
        "version": {
          "withMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "withoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "linkedWithoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setMintBurnRole(address)",
          "toggleTransferEnable()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexBaseToken.sol:VolmexBaseToken": {
        "src": "contracts/tokens/VolmexBaseToken.sol:9",
        "version": {
          "withMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "withoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "linkedWithoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c"
        },
        "inherit": [
          "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1",
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexQuoteToken.sol:VolmexQuoteToken": {
        "src": "contracts/tokens/VolmexQuoteToken.sol:7",
        "version": {
          "withMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "withoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "linkedWithoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/transfer-proxies/ERC20TransferProxy.sol:ERC20TransferProxy": {
        "src": "contracts/transfer-proxies/ERC20TransferProxy.sol:8",
        "version": {
          "withMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "withoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "linkedWithoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20TransferProxyInit()",
          "addTransferProxyRole(address)",
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/view/VolmexPerpView.sol:VolmexPerpView": {
        "src": "contracts/view/VolmexPerpView.sol:9",
        "version": {
          "withMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "withoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "linkedWithoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "grantViewStatesRole(address)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "withoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "linkedWithoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "withoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "linkedWithoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:29",
        "version": {
          "withMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "withoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "linkedWithoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "withoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "linkedWithoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "withoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "linkedWithoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "withoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "linkedWithoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "withoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "linkedWithoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "withoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "linkedWithoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:41",
        "version": {
          "withMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "withoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "linkedWithoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "withoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "linkedWithoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "withoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "linkedWithoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "withoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "linkedWithoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "withoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "linkedWithoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "withoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "linkedWithoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "withoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "linkedWithoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "withoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "linkedWithoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/funding-rate/FundingRate.sol:FundingRate": {
        "src": "contracts/funding-rate/FundingRate.sol:17",
        "version": {
          "withMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "withoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "linkedWithoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d"
        },
        "inherit": [
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/BlockContext.sol:BlockContext": {
        "src": "contracts/helpers/BlockContext.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/MarketRegistry.sol:MarketRegistry": {
        "src": "contracts/helpers/MarketRegistry.sol:15",
        "version": {
          "withMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "withoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "linkedWithoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99"
        },
        "inherit": [
          "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "setMaxOrdersPerMarket(uint8)",
          "addBaseToken(address)",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "checkBaseToken(address)",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/OwnerPausable.sol:OwnerPausable": {
        "src": "contracts/helpers/OwnerPausable.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/PositioningCallee.sol:PositioningCallee": {
        "src": "contracts/helpers/PositioningCallee.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setPositioning(address)",
          "getPositioning()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAccountBalance.sol:IAccountBalance": {
        "src": "contracts/interfaces/IAccountBalance.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "settleOwedRealizedPnl(address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "getLiquidatablePositionSize(address,address,int256)",
          "registerBaseToken(address,address)",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getMarginRequirementForLiquidation(address)",
          "getPnlAndPendingFee(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "getNLiquidate(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAssetMatcher.sol:IAssetMatcher": {
        "src": "contracts/interfaces/IAssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_matchAssets(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/IERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Metadata.sol:IERC20Metadata": {
        "src": "contracts/interfaces/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Modified.sol:IERC20Modified": {
        "src": "contracts/interfaces/IERC20Modified.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "symbol()",
          "name()",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "grantRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy": {
        "src": "contracts/interfaces/IERC20TransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IFundingRate.sol:IFundingRate": {
        "src": "contracts/interfaces/IFundingRate.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IGnosisSafe.sol:IGnosisSafe": {
        "src": "contracts/interfaces/IGnosisSafe.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThreshold()",
          "getOwners()",
          "isOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund": {
        "src": "contracts/interfaces/IInsuranceFund.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry": {
        "src": "contracts/interfaces/IMarketRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMaxOrdersPerMarket(uint8)",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "addBaseToken(address)",
          "checkBaseToken(address)",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine": {
        "src": "contracts/interfaces/IMatchingEngine.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "grantMatchOrders(address)",
          "fills(bytes32)",
          "makerMinSalt(address)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle": {
        "src": "contracts/interfaces/IPerpetualOracle.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestMarkPrice(uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "latestIndexSMA(uint256,uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)",
          "indexByBaseToken(address)",
          "initialTimestamps(uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioning.sol:IPositioning": {
        "src": "contracts/interfaces/IPositioning.sol:7",
        "inherit": [
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "toggleLiquidatorWhitelist()",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "getLiquidatablePosition(address,address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getAllPendingFundingPayment(address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "isStaleIndexOracle(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig": {
        "src": "contracts/interfaces/IPositioningConfig.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()",
          "getPartialLiquidationRatio()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ISlashing.sol:ISlashing": {
        "src": "contracts/interfaces/ISlashing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "slash(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferExecutor.sol:ITransferExecutor": {
        "src": "contracts/interfaces/ITransferExecutor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferManager.sol:ITransferManager": {
        "src": "contracts/interfaces/ITransferManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferProxy.sol:ITransferProxy": {
        "src": "contracts/interfaces/ITransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVaultController.sol:IVaultController": {
        "src": "contracts/interfaces/IVaultController.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "registerVault(address,address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getVault(address)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "setPositioning(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVirtualToken.sol:IVirtualToken": {
        "src": "contracts/interfaces/IVirtualToken.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "isBase()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken": {
        "src": "contracts/interfaces/IVolmexBaseToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery": {
        "src": "contracts/interfaces/IVolmexPerpPeriphery.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "transferToVault(address,address,uint256)",
          "whitelistTrader(address,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView": {
        "src": "contracts/interfaces/IVolmexPerpView.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "perpIndexCount()",
          "vaultIndexCount()",
          "baseTokenIndexCount()",
          "quoteTokenIndexCount()",
          "positionings(uint256)",
          "vaultControllers(uint256)",
          "baseTokens(uint256)",
          "quoteTokens(uint256)",
          "accounts(uint256)",
          "marketRegistries(uint256)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexProtocol.sol:IVolmexProtocol": {
        "src": "contracts/interfaces/IVolmexProtocol.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "minimumCollateralQty()",
          "active()",
          "isSettled()",
          "volatilityToken()",
          "inverseVolatilityToken()",
          "collateral()",
          "issuanceFees()",
          "redeemFees()",
          "accumulatedFees()",
          "volatilityCapRatio()",
          "settlementPrice()",
          "precisionRatio()",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updatePositionToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken": {
        "src": "contracts/interfaces/IVolmexQuoteToken.sol:6",
        "inherit": [
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAccountMarket.sol:LibAccountMarket": {
        "src": "contracts/libs/LibAccountMarket.sol:4",
        "version": {
          "withMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "withoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "linkedWithoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAsset.sol:LibAsset": {
        "src": "contracts/libs/LibAsset.sol:4",
        "version": {
          "withMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "withoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "linkedWithoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibDeal.sol:LibDeal": {
        "src": "contracts/libs/LibDeal.sol:6",
        "version": {
          "withMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "withoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "linkedWithoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFill.sol:LibFill": {
        "src": "contracts/libs/LibFill.sol:7",
        "version": {
          "withMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "withoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "linkedWithoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFullMath.sol:LibFullMath": {
        "src": "contracts/libs/LibFullMath.sol:7",
        "version": {
          "withMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "withoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "linkedWithoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibMath.sol:LibMath": {
        "src": "contracts/libs/LibMath.sol:5",
        "version": {
          "withMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "withoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "linkedWithoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibOrder.sol:LibOrder": {
        "src": "contracts/libs/LibOrder.sol:9",
        "version": {
          "withMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "withoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "linkedWithoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibPerpMath.sol:LibPerpMath": {
        "src": "contracts/libs/LibPerpMath.sol:8",
        "version": {
          "withMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "withoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "linkedWithoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastInt.sol:LibSafeCastInt": {
        "src": "contracts/libs/LibSafeCastInt.sol:8",
        "version": {
          "withMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "withoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "linkedWithoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastUint.sol:LibSafeCastUint": {
        "src": "contracts/libs/LibSafeCastUint.sol:8",
        "version": {
          "withMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "withoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "linkedWithoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSettlementTokenMath.sol:LibSettlementTokenMath": {
        "src": "contracts/libs/LibSettlementTokenMath.sol:5",
        "version": {
          "withMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "withoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "linkedWithoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSignature.sol:LibSignature": {
        "src": "contracts/libs/LibSignature.sol:5",
        "version": {
          "withMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "withoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "linkedWithoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/AssetMatcher.sol:AssetMatcher": {
        "src": "contracts/matching-engine/AssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngine.sol:MatchingEngine": {
        "src": "contracts/matching-engine/MatchingEngine.sol:7",
        "version": {
          "withMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "withoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "linkedWithoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore": {
        "src": "contracts/matching-engine/MatchingEngineCore.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "grantMatchOrders(address)",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrderInBatch(struct LibOrder.Order[],struct LibOrder.Order[])",
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "updateOrderSizeInterval(uint256)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferExecutor.sol:TransferExecutor": {
        "src": "contracts/matching-engine/TransferExecutor.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTransferProxy(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferManager.sol:TransferManager": {
        "src": "contracts/matching-engine/TransferManager.sol:11",
        "inherit": [
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/AccountBalanceMock.sol:AccountBalanceMock": {
        "src": "contracts/mocks/AccountBalanceMock.sol:12",
        "version": {
          "withMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "withoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "linkedWithoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "mock_setOwedRealisedPnlX10_18(int256)",
          "mock_setUnrealizedPnlX10_18(int256)",
          "mock_setPendingFeeX10_18(uint256)",
          "registerBaseToken(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/PositioningMock.sol:PositioningMock": {
        "src": "contracts/mocks/PositioningMock.sol:8",
        "version": {
          "withMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "withoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "linkedWithoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "mock_setFundingPaymentX10_18(int256)",
          "getAllPendingFundingPayment(address)",
          "settleAllFunding(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/oracles/PerpetualOracle.sol:PerpetualOracle": {
        "src": "contracts/oracles/PerpetualOracle.sol:11",
        "version": {
          "withMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "withoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "linkedWithoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e"
        },
        "inherit": [
          "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestIndexSMA(uint256,uint256)",
          "latestMarkPrice(uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/AccountBalance.sol:AccountBalance": {
        "src": "contracts/orderbook/AccountBalance.sol:23",
        "version": {
          "withMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "withoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "linkedWithoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22"
        },
        "inherit": [
          "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "contracts/interfaces/IAccountBalance.sol:IAccountBalance"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "grantSettleRealizedPnlRole(address)",
          "setUnderlyingPriceIndex(address,uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setMinTimeBound(uint256)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleOwedRealizedPnl(address)",
          "registerBaseToken(address,address)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "updateSigmaVolmexIvs(uint256[],uint256[])",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getLiquidatablePositionSize(address,address,int256)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getPnlAndPendingFee(address)",
          "getIndexPrice(address,uint256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "getMarginRequirementForLiquidation(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getNLiquidate(uint256,uint256,uint256)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/OrderValidator.sol:OrderValidator": {
        "src": "contracts/orderbook/OrderValidator.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Positioning.sol:Positioning": {
        "src": "contracts/orderbook/Positioning.sol:30",
        "version": {
          "withMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "withoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "linkedWithoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f"
        },
        "inherit": [
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "setMarketRegistry(address)",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "setPerpetualOracle(address)",
          "setMinPositionSize(uint256,address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setIndexOracleInterval(uint256)",
          "toggleLiquidatorWhitelist()",
          "pause()",
          "unpause()",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "getLiquidatablePosition(address,address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "getAllPendingFundingPayment(address)",
          "isStaleIndexOracle(address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getIndexPrice(address,uint256)",
          "getAccountValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/PositioningConfig.sol:PositioningConfig": {
        "src": "contracts/orderbook/PositioningConfig.sol:12",
        "version": {
          "withMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "withoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "linkedWithoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1",
          "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setLiquidationPenaltyRatio(uint24)",
          "setLiquidatorFeeRatio(uint24)",
          "setPartialCloseRatio(uint24)",
          "setTwapInterval(uint32)",
          "setTwapIntervalLiquidation(uint32)",
          "setMaxMarketsPerAccount(uint8)",
          "setSettlementTokenBalanceCap(uint256)",
          "setMaxFundingRate(uint24)",
          "setImRatio(uint24)",
          "setMmRatio(uint24)",
          "setPartialLiquidationRatio(uint24)",
          "setPerpetualOracle(address)",
          "setPositioning(address)",
          "setAccountBalance(address)",
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialLiquidationRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Vault.sol:Vault": {
        "src": "contracts/orderbook/Vault.sol:24",
        "version": {
          "withMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "withoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "linkedWithoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/storage/VaultStorage.sol:VaultStorageV1",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVault.sol:IVault"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/VaultController.sol:VaultController": {
        "src": "contracts/orderbook/VaultController.sol:23",
        "version": {
          "withMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "withoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "linkedWithoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/interfaces/IVaultController.sol:IVaultController",
          "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "registerVault(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "setPositioning(address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "getVault(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/periphery/VolmexPerpPeriphery.sol:VolmexPerpPeriphery": {
        "src": "contracts/periphery/VolmexPerpPeriphery.sol:15",
        "version": {
          "withMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "withoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "linkedWithoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e"
        },
        "inherit": [
          "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address[2],address,address)",
          "setPerpetualOracle(address)",
          "setRelayer(address)",
          "toggleTraderWhitelistEnabled()",
          "whitelistVault(address,bool)",
          "whitelistTrader(address,bool)",
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "batchOpenPosition(uint256,struct LibOrder.Order[],bytes[],struct LibOrder.Order[],bytes[],bytes)",
          "transferToVault(address,address,uint256)",
          "batchOrderValidate(struct LibOrder.Order[],uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Slashing.sol:Slashing": {
        "src": "contracts/relayer-staking/Slashing.sol:10",
        "version": {
          "withMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "withoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "linkedWithoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811"
        },
        "inherit": [
          "contracts/relayer-staking/Staking.sol:Staking",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "Slashing_init(address,address,address,address,uint256,address)",
          "slash(address)",
          "updateSlashPenalty(uint256)",
          "setSlashingReceiver(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Staking.sol:Staking": {
        "src": "contracts/relayer-staking/Staking.sol:12",
        "version": {
          "withMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "withoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "linkedWithoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79"
        },
        "inherit": [
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "cooldown(uint256)",
          "toggleStaking()",
          "updateMinStakeRequired(uint256)",
          "updateRelayerMultisig(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1": {
        "src": "contracts/storage/AccountBalanceStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1": {
        "src": "contracts/storage/BaseTokenStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/FundingRateStorage.sol:FundingRateStorage": {
        "src": "contracts/storage/FundingRateStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1": {
        "src": "contracts/storage/MarketRegistryStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1": {
        "src": "contracts/storage/PositioningConfigStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningStorage.sol:PositioningStorageV1": {
        "src": "contracts/storage/PositioningStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage": {
        "src": "contracts/storage/VaultControllerStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultStorage.sol:VaultStorageV1": {
        "src": "contracts/storage/VaultStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/AssetMatcherTest.sol:AssetMatcherTest": {
        "src": "contracts/tests/AssetMatcherTest.sol:10",
        "version": {
          "withMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "withoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "linkedWithoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d"
        },
        "inherit": [
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AssetMatcherTest_init()",
          "matchAssetsTest(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/DevilERC20.sol:DevilTestERC20": {
        "src": "contracts/tests/DevilERC20.sol:9",
        "version": {
          "withMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "withoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "linkedWithoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271.sol:ERC1271": {
        "src": "contracts/tests/ERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271Test.sol:ERC1271Test": {
        "src": "contracts/tests/ERC1271Test.sol:8",
        "version": {
          "withMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "withoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "linkedWithoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947"
        },
        "inherit": [
          "contracts/tests/ERC1271.sol:ERC1271"
        ],
        "libraries": [],
        "methods": [
          "setReturnSuccessfulValidSignature(bool)",
          "isValidSignature(bytes32,bytes)",
          "getAllowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC20TransferProxyTest.sol:ERC20TransferProxyTest": {
        "src": "contracts/tests/ERC20TransferProxyTest.sol:7",
        "version": {
          "withMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "withoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "linkedWithoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c"
        },
        "inherit": [
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ExchangeTest.sol:ExchangeTest": {
        "src": "contracts/tests/ExchangeTest.sol:6",
        "version": {
          "withMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "withoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "linkedWithoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPerpetualOracle(address)",
          "addObservation(uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MatchingEngineTest.sol:MatchingEngineTest": {
        "src": "contracts/tests/MatchingEngineTest.sol:7",
        "version": {
          "withMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "withoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "linkedWithoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngine.sol:MatchingEngine",
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "__MatchingEngineTest_init(address,address)",
          "matchOrdersTest((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "setMakerMinSalt(uint256)",
          "addObservation(uint256,uint256)",
          "pause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MockERC20.sol:SlashERC20": {
        "src": "contracts/tests/MockERC20.sol:8",
        "version": {
          "withMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "withoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "linkedWithoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/PositioningTest.sol:PositioningTest": {
        "src": "contracts/tests/PositioningTest.sol:9",
        "version": {
          "withMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "withoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "linkedWithoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "registerBaseToken(address,address)",
          "getTotalAbsPositionValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/Safe.sol:Safe": {
        "src": "contracts/tests/Safe.sol:4",
        "version": {
          "withMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "withoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "linkedWithoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/SlashERC20.sol:UnStakeERC20": {
        "src": "contracts/tests/SlashERC20.sol:8",
        "version": {
          "withMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "withoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "linkedWithoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20.sol:TestERC20": {
        "src": "contracts/tests/TestERC20.sol:7",
        "version": {
          "withMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "withoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "linkedWithoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transferFrom(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20Relayer.sol:StakeERC20": {
        "src": "contracts/tests/TestERC20Relayer.sol:8",
        "version": {
          "withMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "withoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "linkedWithoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TransferManagerTest.sol:TransferManagerTest": {
        "src": "contracts/tests/TransferManagerTest.sol:11",
        "version": {
          "withMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "withoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "linkedWithoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f"
        },
        "inherit": [
          "contracts/matching-engine/TransferManager.sol:TransferManager",
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "checkDoTransfers(((address,uint256),address,address),((address,uint256),address,address))",
          "__TransferManager_init(address,address)",
          "transferManager_init(address,address)",
          "transferPayouts(address,uint256,address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultControllerTest.sol:VaultControllerTest": {
        "src": "contracts/tests/VaultControllerTest.sol:7",
        "version": {
          "withMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "withoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "linkedWithoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256,address,address)",
          "deposit(address,address,uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultERC20.sol:VaultTestERC20": {
        "src": "contracts/tests/VaultERC20.sol:9",
        "version": {
          "withMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "withoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "linkedWithoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultTest.sol:VaultMock": {
        "src": "contracts/tests/VaultTest.sol:8",
        "version": {
          "withMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "withoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "linkedWithoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VirtualTokenTest.sol:VirtualTokenTest": {
        "src": "contracts/tests/VirtualTokenTest.sol:6",
        "version": {
          "withMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "withoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "linkedWithoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)",
          "beforeTokenTransfer(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/insurance/InsuranceFund.sol:InsuranceFund": {
        "src": "contracts/tests/insurance/InsuranceFund.sol:12",
        "version": {
          "withMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "withoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "linkedWithoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25"
        },
        "inherit": [
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setBorrower(address)",
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibPerpMathTest.sol:TestPerpMath": {
        "src": "contracts/tests/libs/LibPerpMathTest.sol:6",
        "version": {
          "withMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "withoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "linkedWithoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testMax(int256,int256)",
          "testMin(int256,int256)",
          "testAbs(int256)",
          "neg128(int128)",
          "uintNeg128(uint128)",
          "testMulRatio(uint256,uint24)",
          "testMulDiv(int256,int256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSafeCastTest.sol:TestPerpSafeCast": {
        "src": "contracts/tests/libs/LibSafeCastTest.sol:8",
        "version": {
          "withMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "withoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "linkedWithoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testToUint128(uint256)",
          "testToUint64(uint256)",
          "testToUint32(uint256)",
          "testToUint16(uint256)",
          "testToUint8(uint256)",
          "testToInt128(int256)",
          "testToInt64(int256)",
          "testToInt32(int256)",
          "testToInt24(int256)",
          "testToInt16(int256)",
          "testToInt8(int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSettlementTokenMathTest.sol:TestSettlementTokenMath": {
        "src": "contracts/tests/libs/LibSettlementTokenMathTest.sol:6",
        "version": {
          "withMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "withoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "linkedWithoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testParseSettlementToken(uint256,uint8)",
          "testParseSettlementToken(int256,uint8)",
          "testFormatSettlementToken(uint256,uint8)",
          "testFormatSettlementToken(int256,uint8)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSignatureTest.sol:LibSignatureTest": {
        "src": "contracts/tests/libs/LibSignatureTest.sol:8",
        "version": {
          "withMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "withoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "linkedWithoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "recoverFromSigTest(bytes32,bytes)",
          "recoverFromParamsTest(bytes32,uint8,bytes32,bytes32)",
          "getKeccak(string)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexPositionToken.sol:VolmexPositionToken": {
        "src": "contracts/tests/protocol/VolmexPositionToken.sol:13",
        "version": {
          "withMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "withoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "linkedWithoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "updateTokenMetadata(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()",
          "name()",
          "symbol()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexProtocol.sol:VolmexProtocol": {
        "src": "contracts/tests/protocol/VolmexProtocol.sol:15",
        "version": {
          "withMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "withoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "linkedWithoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updateVolatilityToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VirtualToken.sol:VirtualToken": {
        "src": "contracts/tokens/VirtualToken.sol:9",
        "version": {
          "withMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "withoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "linkedWithoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setMintBurnRole(address)",
          "toggleTransferEnable()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexBaseToken.sol:VolmexBaseToken": {
        "src": "contracts/tokens/VolmexBaseToken.sol:9",
        "version": {
          "withMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "withoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "linkedWithoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c"
        },
        "inherit": [
          "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1",
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexQuoteToken.sol:VolmexQuoteToken": {
        "src": "contracts/tokens/VolmexQuoteToken.sol:7",
        "version": {
          "withMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "withoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "linkedWithoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/transfer-proxies/ERC20TransferProxy.sol:ERC20TransferProxy": {
        "src": "contracts/transfer-proxies/ERC20TransferProxy.sol:8",
        "version": {
          "withMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "withoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "linkedWithoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20TransferProxyInit()",
          "addTransferProxyRole(address)",
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/view/VolmexPerpView.sol:VolmexPerpView": {
        "src": "contracts/view/VolmexPerpView.sol:9",
        "version": {
          "withMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "withoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "linkedWithoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "grantViewStatesRole(address)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "withoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "linkedWithoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "withoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "linkedWithoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:29",
        "version": {
          "withMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "withoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "linkedWithoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "withoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "linkedWithoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "withoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "linkedWithoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "withoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "linkedWithoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "withoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "linkedWithoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "withoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "linkedWithoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:41",
        "version": {
          "withMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "withoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "linkedWithoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "withoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "linkedWithoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "withoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "linkedWithoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "withoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "linkedWithoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "withoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "linkedWithoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "withoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "linkedWithoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "withoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "linkedWithoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "withoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "linkedWithoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/funding-rate/FundingRate.sol:FundingRate": {
        "src": "contracts/funding-rate/FundingRate.sol:17",
        "version": {
          "withMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "withoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "linkedWithoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d"
        },
        "inherit": [
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/BlockContext.sol:BlockContext": {
        "src": "contracts/helpers/BlockContext.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/MarketRegistry.sol:MarketRegistry": {
        "src": "contracts/helpers/MarketRegistry.sol:15",
        "version": {
          "withMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "withoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "linkedWithoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99"
        },
        "inherit": [
          "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "setMaxOrdersPerMarket(uint8)",
          "addBaseToken(address)",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "checkBaseToken(address)",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/OwnerPausable.sol:OwnerPausable": {
        "src": "contracts/helpers/OwnerPausable.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/PositioningCallee.sol:PositioningCallee": {
        "src": "contracts/helpers/PositioningCallee.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setPositioning(address)",
          "getPositioning()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAccountBalance.sol:IAccountBalance": {
        "src": "contracts/interfaces/IAccountBalance.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "settleOwedRealizedPnl(address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "getLiquidatablePositionSize(address,address,int256)",
          "registerBaseToken(address,address)",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getMarginRequirementForLiquidation(address)",
          "getPnlAndPendingFee(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "getNLiquidate(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAssetMatcher.sol:IAssetMatcher": {
        "src": "contracts/interfaces/IAssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_matchAssets(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/IERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Metadata.sol:IERC20Metadata": {
        "src": "contracts/interfaces/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Modified.sol:IERC20Modified": {
        "src": "contracts/interfaces/IERC20Modified.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "symbol()",
          "name()",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "grantRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy": {
        "src": "contracts/interfaces/IERC20TransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IFundingRate.sol:IFundingRate": {
        "src": "contracts/interfaces/IFundingRate.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IGnosisSafe.sol:IGnosisSafe": {
        "src": "contracts/interfaces/IGnosisSafe.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThreshold()",
          "getOwners()",
          "isOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund": {
        "src": "contracts/interfaces/IInsuranceFund.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry": {
        "src": "contracts/interfaces/IMarketRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMaxOrdersPerMarket(uint8)",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "addBaseToken(address)",
          "checkBaseToken(address)",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine": {
        "src": "contracts/interfaces/IMatchingEngine.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "grantMatchOrders(address)",
          "fills(bytes32)",
          "makerMinSalt(address)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle": {
        "src": "contracts/interfaces/IPerpetualOracle.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestMarkPrice(uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "latestIndexSMA(uint256,uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)",
          "indexByBaseToken(address)",
          "initialTimestamps(uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioning.sol:IPositioning": {
        "src": "contracts/interfaces/IPositioning.sol:7",
        "inherit": [
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "toggleLiquidatorWhitelist()",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "getLiquidatablePosition(address,address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getAllPendingFundingPayment(address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "isStaleIndexOracle(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig": {
        "src": "contracts/interfaces/IPositioningConfig.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()",
          "getPartialLiquidationRatio()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ISlashing.sol:ISlashing": {
        "src": "contracts/interfaces/ISlashing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "slash(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferExecutor.sol:ITransferExecutor": {
        "src": "contracts/interfaces/ITransferExecutor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferManager.sol:ITransferManager": {
        "src": "contracts/interfaces/ITransferManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferProxy.sol:ITransferProxy": {
        "src": "contracts/interfaces/ITransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVaultController.sol:IVaultController": {
        "src": "contracts/interfaces/IVaultController.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "registerVault(address,address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getVault(address)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "setPositioning(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVirtualToken.sol:IVirtualToken": {
        "src": "contracts/interfaces/IVirtualToken.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "isBase()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken": {
        "src": "contracts/interfaces/IVolmexBaseToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery": {
        "src": "contracts/interfaces/IVolmexPerpPeriphery.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "transferToVault(address,address,uint256)",
          "whitelistTrader(address,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView": {
        "src": "contracts/interfaces/IVolmexPerpView.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "perpIndexCount()",
          "vaultIndexCount()",
          "baseTokenIndexCount()",
          "quoteTokenIndexCount()",
          "positionings(uint256)",
          "vaultControllers(uint256)",
          "baseTokens(uint256)",
          "quoteTokens(uint256)",
          "accounts(uint256)",
          "marketRegistries(uint256)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexProtocol.sol:IVolmexProtocol": {
        "src": "contracts/interfaces/IVolmexProtocol.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "minimumCollateralQty()",
          "active()",
          "isSettled()",
          "volatilityToken()",
          "inverseVolatilityToken()",
          "collateral()",
          "issuanceFees()",
          "redeemFees()",
          "accumulatedFees()",
          "volatilityCapRatio()",
          "settlementPrice()",
          "precisionRatio()",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updatePositionToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken": {
        "src": "contracts/interfaces/IVolmexQuoteToken.sol:6",
        "inherit": [
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAccountMarket.sol:LibAccountMarket": {
        "src": "contracts/libs/LibAccountMarket.sol:4",
        "version": {
          "withMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "withoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "linkedWithoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAsset.sol:LibAsset": {
        "src": "contracts/libs/LibAsset.sol:4",
        "version": {
          "withMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "withoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "linkedWithoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibDeal.sol:LibDeal": {
        "src": "contracts/libs/LibDeal.sol:6",
        "version": {
          "withMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "withoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "linkedWithoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFill.sol:LibFill": {
        "src": "contracts/libs/LibFill.sol:7",
        "version": {
          "withMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "withoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "linkedWithoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFullMath.sol:LibFullMath": {
        "src": "contracts/libs/LibFullMath.sol:7",
        "version": {
          "withMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "withoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "linkedWithoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibMath.sol:LibMath": {
        "src": "contracts/libs/LibMath.sol:5",
        "version": {
          "withMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "withoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "linkedWithoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibOrder.sol:LibOrder": {
        "src": "contracts/libs/LibOrder.sol:9",
        "version": {
          "withMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "withoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "linkedWithoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibPerpMath.sol:LibPerpMath": {
        "src": "contracts/libs/LibPerpMath.sol:8",
        "version": {
          "withMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "withoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "linkedWithoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastInt.sol:LibSafeCastInt": {
        "src": "contracts/libs/LibSafeCastInt.sol:8",
        "version": {
          "withMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "withoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "linkedWithoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastUint.sol:LibSafeCastUint": {
        "src": "contracts/libs/LibSafeCastUint.sol:8",
        "version": {
          "withMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "withoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "linkedWithoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSettlementTokenMath.sol:LibSettlementTokenMath": {
        "src": "contracts/libs/LibSettlementTokenMath.sol:5",
        "version": {
          "withMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "withoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "linkedWithoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSignature.sol:LibSignature": {
        "src": "contracts/libs/LibSignature.sol:5",
        "version": {
          "withMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "withoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "linkedWithoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/AssetMatcher.sol:AssetMatcher": {
        "src": "contracts/matching-engine/AssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngine.sol:MatchingEngine": {
        "src": "contracts/matching-engine/MatchingEngine.sol:7",
        "version": {
          "withMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "withoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "linkedWithoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore": {
        "src": "contracts/matching-engine/MatchingEngineCore.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "grantMatchOrders(address)",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrderInBatch(struct LibOrder.Order[],struct LibOrder.Order[])",
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "updateOrderSizeInterval(uint256)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferExecutor.sol:TransferExecutor": {
        "src": "contracts/matching-engine/TransferExecutor.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTransferProxy(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferManager.sol:TransferManager": {
        "src": "contracts/matching-engine/TransferManager.sol:11",
        "inherit": [
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/AccountBalanceMock.sol:AccountBalanceMock": {
        "src": "contracts/mocks/AccountBalanceMock.sol:12",
        "version": {
          "withMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "withoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "linkedWithoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "mock_setOwedRealisedPnlX10_18(int256)",
          "mock_setUnrealizedPnlX10_18(int256)",
          "mock_setPendingFeeX10_18(uint256)",
          "registerBaseToken(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/PositioningMock.sol:PositioningMock": {
        "src": "contracts/mocks/PositioningMock.sol:8",
        "version": {
          "withMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "withoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "linkedWithoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "mock_setFundingPaymentX10_18(int256)",
          "getAllPendingFundingPayment(address)",
          "settleAllFunding(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/oracles/PerpetualOracle.sol:PerpetualOracle": {
        "src": "contracts/oracles/PerpetualOracle.sol:11",
        "version": {
          "withMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "withoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "linkedWithoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e"
        },
        "inherit": [
          "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestIndexSMA(uint256,uint256)",
          "latestMarkPrice(uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/AccountBalance.sol:AccountBalance": {
        "src": "contracts/orderbook/AccountBalance.sol:23",
        "version": {
          "withMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "withoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "linkedWithoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22"
        },
        "inherit": [
          "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "contracts/interfaces/IAccountBalance.sol:IAccountBalance"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "grantSettleRealizedPnlRole(address)",
          "setUnderlyingPriceIndex(address,uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setMinTimeBound(uint256)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleOwedRealizedPnl(address)",
          "registerBaseToken(address,address)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "updateSigmaVolmexIvs(uint256[],uint256[])",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getLiquidatablePositionSize(address,address,int256)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getPnlAndPendingFee(address)",
          "getIndexPrice(address,uint256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "getMarginRequirementForLiquidation(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getNLiquidate(uint256,uint256,uint256)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/OrderValidator.sol:OrderValidator": {
        "src": "contracts/orderbook/OrderValidator.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Positioning.sol:Positioning": {
        "src": "contracts/orderbook/Positioning.sol:30",
        "version": {
          "withMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "withoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "linkedWithoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f"
        },
        "inherit": [
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "setMarketRegistry(address)",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "setPerpetualOracle(address)",
          "setMinPositionSize(uint256,address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setIndexOracleInterval(uint256)",
          "toggleLiquidatorWhitelist()",
          "pause()",
          "unpause()",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "getLiquidatablePosition(address,address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "getAllPendingFundingPayment(address)",
          "isStaleIndexOracle(address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getIndexPrice(address,uint256)",
          "getAccountValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/PositioningConfig.sol:PositioningConfig": {
        "src": "contracts/orderbook/PositioningConfig.sol:12",
        "version": {
          "withMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "withoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "linkedWithoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1",
          "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setLiquidationPenaltyRatio(uint24)",
          "setLiquidatorFeeRatio(uint24)",
          "setPartialCloseRatio(uint24)",
          "setTwapInterval(uint32)",
          "setTwapIntervalLiquidation(uint32)",
          "setMaxMarketsPerAccount(uint8)",
          "setSettlementTokenBalanceCap(uint256)",
          "setMaxFundingRate(uint24)",
          "setImRatio(uint24)",
          "setMmRatio(uint24)",
          "setPartialLiquidationRatio(uint24)",
          "setPerpetualOracle(address)",
          "setPositioning(address)",
          "setAccountBalance(address)",
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialLiquidationRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Vault.sol:Vault": {
        "src": "contracts/orderbook/Vault.sol:24",
        "version": {
          "withMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "withoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "linkedWithoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/storage/VaultStorage.sol:VaultStorageV1",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVault.sol:IVault"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/VaultController.sol:VaultController": {
        "src": "contracts/orderbook/VaultController.sol:23",
        "version": {
          "withMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "withoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "linkedWithoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/interfaces/IVaultController.sol:IVaultController",
          "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "registerVault(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "setPositioning(address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "getVault(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/periphery/VolmexPerpPeriphery.sol:VolmexPerpPeriphery": {
        "src": "contracts/periphery/VolmexPerpPeriphery.sol:15",
        "version": {
          "withMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "withoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "linkedWithoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e"
        },
        "inherit": [
          "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address[2],address,address)",
          "setPerpetualOracle(address)",
          "setRelayer(address)",
          "toggleTraderWhitelistEnabled()",
          "whitelistVault(address,bool)",
          "whitelistTrader(address,bool)",
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "batchOpenPosition(uint256,struct LibOrder.Order[],bytes[],struct LibOrder.Order[],bytes[],bytes)",
          "transferToVault(address,address,uint256)",
          "batchOrderValidate(struct LibOrder.Order[],uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Slashing.sol:Slashing": {
        "src": "contracts/relayer-staking/Slashing.sol:10",
        "version": {
          "withMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "withoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "linkedWithoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811"
        },
        "inherit": [
          "contracts/relayer-staking/Staking.sol:Staking",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "Slashing_init(address,address,address,address,uint256,address)",
          "slash(address)",
          "updateSlashPenalty(uint256)",
          "setSlashingReceiver(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Staking.sol:Staking": {
        "src": "contracts/relayer-staking/Staking.sol:12",
        "version": {
          "withMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "withoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "linkedWithoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79"
        },
        "inherit": [
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "cooldown(uint256)",
          "toggleStaking()",
          "updateMinStakeRequired(uint256)",
          "updateRelayerMultisig(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1": {
        "src": "contracts/storage/AccountBalanceStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1": {
        "src": "contracts/storage/BaseTokenStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/FundingRateStorage.sol:FundingRateStorage": {
        "src": "contracts/storage/FundingRateStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1": {
        "src": "contracts/storage/MarketRegistryStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1": {
        "src": "contracts/storage/PositioningConfigStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningStorage.sol:PositioningStorageV1": {
        "src": "contracts/storage/PositioningStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage": {
        "src": "contracts/storage/VaultControllerStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultStorage.sol:VaultStorageV1": {
        "src": "contracts/storage/VaultStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/AssetMatcherTest.sol:AssetMatcherTest": {
        "src": "contracts/tests/AssetMatcherTest.sol:10",
        "version": {
          "withMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "withoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "linkedWithoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d"
        },
        "inherit": [
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AssetMatcherTest_init()",
          "matchAssetsTest(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/DevilERC20.sol:DevilTestERC20": {
        "src": "contracts/tests/DevilERC20.sol:9",
        "version": {
          "withMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "withoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "linkedWithoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271.sol:ERC1271": {
        "src": "contracts/tests/ERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271Test.sol:ERC1271Test": {
        "src": "contracts/tests/ERC1271Test.sol:8",
        "version": {
          "withMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "withoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "linkedWithoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947"
        },
        "inherit": [
          "contracts/tests/ERC1271.sol:ERC1271"
        ],
        "libraries": [],
        "methods": [
          "setReturnSuccessfulValidSignature(bool)",
          "isValidSignature(bytes32,bytes)",
          "getAllowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC20TransferProxyTest.sol:ERC20TransferProxyTest": {
        "src": "contracts/tests/ERC20TransferProxyTest.sol:7",
        "version": {
          "withMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "withoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "linkedWithoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c"
        },
        "inherit": [
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ExchangeTest.sol:ExchangeTest": {
        "src": "contracts/tests/ExchangeTest.sol:6",
        "version": {
          "withMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "withoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "linkedWithoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPerpetualOracle(address)",
          "addObservation(uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MatchingEngineTest.sol:MatchingEngineTest": {
        "src": "contracts/tests/MatchingEngineTest.sol:7",
        "version": {
          "withMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "withoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "linkedWithoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngine.sol:MatchingEngine",
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "__MatchingEngineTest_init(address,address)",
          "matchOrdersTest((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "setMakerMinSalt(uint256)",
          "addObservation(uint256,uint256)",
          "pause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MockERC20.sol:SlashERC20": {
        "src": "contracts/tests/MockERC20.sol:8",
        "version": {
          "withMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "withoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "linkedWithoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/PositioningTest.sol:PositioningTest": {
        "src": "contracts/tests/PositioningTest.sol:9",
        "version": {
          "withMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "withoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "linkedWithoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "registerBaseToken(address,address)",
          "getTotalAbsPositionValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/Safe.sol:Safe": {
        "src": "contracts/tests/Safe.sol:4",
        "version": {
          "withMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "withoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "linkedWithoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/SlashERC20.sol:UnStakeERC20": {
        "src": "contracts/tests/SlashERC20.sol:8",
        "version": {
          "withMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "withoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "linkedWithoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20.sol:TestERC20": {
        "src": "contracts/tests/TestERC20.sol:7",
        "version": {
          "withMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "withoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "linkedWithoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transferFrom(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20Relayer.sol:StakeERC20": {
        "src": "contracts/tests/TestERC20Relayer.sol:8",
        "version": {
          "withMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "withoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "linkedWithoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TransferManagerTest.sol:TransferManagerTest": {
        "src": "contracts/tests/TransferManagerTest.sol:11",
        "version": {
          "withMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "withoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "linkedWithoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f"
        },
        "inherit": [
          "contracts/matching-engine/TransferManager.sol:TransferManager",
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "checkDoTransfers(((address,uint256),address,address),((address,uint256),address,address))",
          "__TransferManager_init(address,address)",
          "transferManager_init(address,address)",
          "transferPayouts(address,uint256,address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultControllerTest.sol:VaultControllerTest": {
        "src": "contracts/tests/VaultControllerTest.sol:7",
        "version": {
          "withMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "withoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "linkedWithoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256,address,address)",
          "deposit(address,address,uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultERC20.sol:VaultTestERC20": {
        "src": "contracts/tests/VaultERC20.sol:9",
        "version": {
          "withMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "withoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "linkedWithoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultTest.sol:VaultMock": {
        "src": "contracts/tests/VaultTest.sol:8",
        "version": {
          "withMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "withoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "linkedWithoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VirtualTokenTest.sol:VirtualTokenTest": {
        "src": "contracts/tests/VirtualTokenTest.sol:6",
        "version": {
          "withMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "withoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "linkedWithoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)",
          "beforeTokenTransfer(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/insurance/InsuranceFund.sol:InsuranceFund": {
        "src": "contracts/tests/insurance/InsuranceFund.sol:12",
        "version": {
          "withMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "withoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "linkedWithoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25"
        },
        "inherit": [
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setBorrower(address)",
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibPerpMathTest.sol:TestPerpMath": {
        "src": "contracts/tests/libs/LibPerpMathTest.sol:6",
        "version": {
          "withMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "withoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "linkedWithoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testMax(int256,int256)",
          "testMin(int256,int256)",
          "testAbs(int256)",
          "neg128(int128)",
          "uintNeg128(uint128)",
          "testMulRatio(uint256,uint24)",
          "testMulDiv(int256,int256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSafeCastTest.sol:TestPerpSafeCast": {
        "src": "contracts/tests/libs/LibSafeCastTest.sol:8",
        "version": {
          "withMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "withoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "linkedWithoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testToUint128(uint256)",
          "testToUint64(uint256)",
          "testToUint32(uint256)",
          "testToUint16(uint256)",
          "testToUint8(uint256)",
          "testToInt128(int256)",
          "testToInt64(int256)",
          "testToInt32(int256)",
          "testToInt24(int256)",
          "testToInt16(int256)",
          "testToInt8(int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSettlementTokenMathTest.sol:TestSettlementTokenMath": {
        "src": "contracts/tests/libs/LibSettlementTokenMathTest.sol:6",
        "version": {
          "withMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "withoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "linkedWithoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testParseSettlementToken(uint256,uint8)",
          "testParseSettlementToken(int256,uint8)",
          "testFormatSettlementToken(uint256,uint8)",
          "testFormatSettlementToken(int256,uint8)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSignatureTest.sol:LibSignatureTest": {
        "src": "contracts/tests/libs/LibSignatureTest.sol:8",
        "version": {
          "withMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "withoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "linkedWithoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "recoverFromSigTest(bytes32,bytes)",
          "recoverFromParamsTest(bytes32,uint8,bytes32,bytes32)",
          "getKeccak(string)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexPositionToken.sol:VolmexPositionToken": {
        "src": "contracts/tests/protocol/VolmexPositionToken.sol:13",
        "version": {
          "withMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "withoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "linkedWithoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "updateTokenMetadata(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()",
          "name()",
          "symbol()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexProtocol.sol:VolmexProtocol": {
        "src": "contracts/tests/protocol/VolmexProtocol.sol:15",
        "version": {
          "withMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "withoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "linkedWithoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updateVolatilityToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VirtualToken.sol:VirtualToken": {
        "src": "contracts/tokens/VirtualToken.sol:9",
        "version": {
          "withMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "withoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "linkedWithoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setMintBurnRole(address)",
          "toggleTransferEnable()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexBaseToken.sol:VolmexBaseToken": {
        "src": "contracts/tokens/VolmexBaseToken.sol:9",
        "version": {
          "withMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "withoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "linkedWithoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c"
        },
        "inherit": [
          "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1",
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexQuoteToken.sol:VolmexQuoteToken": {
        "src": "contracts/tokens/VolmexQuoteToken.sol:7",
        "version": {
          "withMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "withoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "linkedWithoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/transfer-proxies/ERC20TransferProxy.sol:ERC20TransferProxy": {
        "src": "contracts/transfer-proxies/ERC20TransferProxy.sol:8",
        "version": {
          "withMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "withoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "linkedWithoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20TransferProxyInit()",
          "addTransferProxyRole(address)",
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/view/VolmexPerpView.sol:VolmexPerpView": {
        "src": "contracts/view/VolmexPerpView.sol:9",
        "version": {
          "withMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "withoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "linkedWithoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "grantViewStatesRole(address)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "withoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "linkedWithoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "withoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "linkedWithoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:29",
        "version": {
          "withMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "withoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "linkedWithoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "withoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "linkedWithoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "withoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "linkedWithoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "withoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "linkedWithoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "withoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "linkedWithoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "withoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "linkedWithoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:41",
        "version": {
          "withMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "withoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "linkedWithoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "withoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "linkedWithoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "withoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "linkedWithoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "withoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "linkedWithoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "withoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "linkedWithoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "withoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "linkedWithoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "withoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "linkedWithoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "withoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "linkedWithoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/funding-rate/FundingRate.sol:FundingRate": {
        "src": "contracts/funding-rate/FundingRate.sol:17",
        "version": {
          "withMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "withoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "linkedWithoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d"
        },
        "inherit": [
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/BlockContext.sol:BlockContext": {
        "src": "contracts/helpers/BlockContext.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/MarketRegistry.sol:MarketRegistry": {
        "src": "contracts/helpers/MarketRegistry.sol:15",
        "version": {
          "withMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "withoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "linkedWithoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99"
        },
        "inherit": [
          "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "setMaxOrdersPerMarket(uint8)",
          "addBaseToken(address)",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "checkBaseToken(address)",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/OwnerPausable.sol:OwnerPausable": {
        "src": "contracts/helpers/OwnerPausable.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/PositioningCallee.sol:PositioningCallee": {
        "src": "contracts/helpers/PositioningCallee.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setPositioning(address)",
          "getPositioning()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAccountBalance.sol:IAccountBalance": {
        "src": "contracts/interfaces/IAccountBalance.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "settleOwedRealizedPnl(address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "getLiquidatablePositionSize(address,address,int256)",
          "registerBaseToken(address,address)",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getMarginRequirementForLiquidation(address)",
          "getPnlAndPendingFee(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "getNLiquidate(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAssetMatcher.sol:IAssetMatcher": {
        "src": "contracts/interfaces/IAssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_matchAssets(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/IERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Metadata.sol:IERC20Metadata": {
        "src": "contracts/interfaces/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Modified.sol:IERC20Modified": {
        "src": "contracts/interfaces/IERC20Modified.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "symbol()",
          "name()",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "grantRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy": {
        "src": "contracts/interfaces/IERC20TransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IFundingRate.sol:IFundingRate": {
        "src": "contracts/interfaces/IFundingRate.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IGnosisSafe.sol:IGnosisSafe": {
        "src": "contracts/interfaces/IGnosisSafe.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThreshold()",
          "getOwners()",
          "isOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund": {
        "src": "contracts/interfaces/IInsuranceFund.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry": {
        "src": "contracts/interfaces/IMarketRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMaxOrdersPerMarket(uint8)",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "addBaseToken(address)",
          "checkBaseToken(address)",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine": {
        "src": "contracts/interfaces/IMatchingEngine.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "grantMatchOrders(address)",
          "fills(bytes32)",
          "makerMinSalt(address)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle": {
        "src": "contracts/interfaces/IPerpetualOracle.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestMarkPrice(uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "latestIndexSMA(uint256,uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)",
          "indexByBaseToken(address)",
          "initialTimestamps(uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioning.sol:IPositioning": {
        "src": "contracts/interfaces/IPositioning.sol:7",
        "inherit": [
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "toggleLiquidatorWhitelist()",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "getLiquidatablePosition(address,address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getAllPendingFundingPayment(address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "isStaleIndexOracle(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig": {
        "src": "contracts/interfaces/IPositioningConfig.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()",
          "getPartialLiquidationRatio()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ISlashing.sol:ISlashing": {
        "src": "contracts/interfaces/ISlashing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "slash(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferExecutor.sol:ITransferExecutor": {
        "src": "contracts/interfaces/ITransferExecutor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferManager.sol:ITransferManager": {
        "src": "contracts/interfaces/ITransferManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferProxy.sol:ITransferProxy": {
        "src": "contracts/interfaces/ITransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVaultController.sol:IVaultController": {
        "src": "contracts/interfaces/IVaultController.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "registerVault(address,address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getVault(address)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "setPositioning(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVirtualToken.sol:IVirtualToken": {
        "src": "contracts/interfaces/IVirtualToken.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "isBase()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken": {
        "src": "contracts/interfaces/IVolmexBaseToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery": {
        "src": "contracts/interfaces/IVolmexPerpPeriphery.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "transferToVault(address,address,uint256)",
          "whitelistTrader(address,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView": {
        "src": "contracts/interfaces/IVolmexPerpView.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "perpIndexCount()",
          "vaultIndexCount()",
          "baseTokenIndexCount()",
          "quoteTokenIndexCount()",
          "positionings(uint256)",
          "vaultControllers(uint256)",
          "baseTokens(uint256)",
          "quoteTokens(uint256)",
          "accounts(uint256)",
          "marketRegistries(uint256)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexProtocol.sol:IVolmexProtocol": {
        "src": "contracts/interfaces/IVolmexProtocol.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "minimumCollateralQty()",
          "active()",
          "isSettled()",
          "volatilityToken()",
          "inverseVolatilityToken()",
          "collateral()",
          "issuanceFees()",
          "redeemFees()",
          "accumulatedFees()",
          "volatilityCapRatio()",
          "settlementPrice()",
          "precisionRatio()",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updatePositionToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken": {
        "src": "contracts/interfaces/IVolmexQuoteToken.sol:6",
        "inherit": [
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAccountMarket.sol:LibAccountMarket": {
        "src": "contracts/libs/LibAccountMarket.sol:4",
        "version": {
          "withMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "withoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "linkedWithoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAsset.sol:LibAsset": {
        "src": "contracts/libs/LibAsset.sol:4",
        "version": {
          "withMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "withoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "linkedWithoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibDeal.sol:LibDeal": {
        "src": "contracts/libs/LibDeal.sol:6",
        "version": {
          "withMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "withoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "linkedWithoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFill.sol:LibFill": {
        "src": "contracts/libs/LibFill.sol:7",
        "version": {
          "withMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "withoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "linkedWithoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFullMath.sol:LibFullMath": {
        "src": "contracts/libs/LibFullMath.sol:7",
        "version": {
          "withMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "withoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "linkedWithoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibMath.sol:LibMath": {
        "src": "contracts/libs/LibMath.sol:5",
        "version": {
          "withMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "withoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "linkedWithoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibOrder.sol:LibOrder": {
        "src": "contracts/libs/LibOrder.sol:9",
        "version": {
          "withMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "withoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "linkedWithoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibPerpMath.sol:LibPerpMath": {
        "src": "contracts/libs/LibPerpMath.sol:8",
        "version": {
          "withMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "withoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "linkedWithoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastInt.sol:LibSafeCastInt": {
        "src": "contracts/libs/LibSafeCastInt.sol:8",
        "version": {
          "withMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "withoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "linkedWithoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastUint.sol:LibSafeCastUint": {
        "src": "contracts/libs/LibSafeCastUint.sol:8",
        "version": {
          "withMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "withoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "linkedWithoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSettlementTokenMath.sol:LibSettlementTokenMath": {
        "src": "contracts/libs/LibSettlementTokenMath.sol:5",
        "version": {
          "withMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "withoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "linkedWithoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSignature.sol:LibSignature": {
        "src": "contracts/libs/LibSignature.sol:5",
        "version": {
          "withMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "withoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "linkedWithoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/AssetMatcher.sol:AssetMatcher": {
        "src": "contracts/matching-engine/AssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngine.sol:MatchingEngine": {
        "src": "contracts/matching-engine/MatchingEngine.sol:7",
        "version": {
          "withMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "withoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "linkedWithoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore": {
        "src": "contracts/matching-engine/MatchingEngineCore.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "grantMatchOrders(address)",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrderInBatch(struct LibOrder.Order[],struct LibOrder.Order[])",
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "updateOrderSizeInterval(uint256)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferExecutor.sol:TransferExecutor": {
        "src": "contracts/matching-engine/TransferExecutor.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTransferProxy(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferManager.sol:TransferManager": {
        "src": "contracts/matching-engine/TransferManager.sol:11",
        "inherit": [
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/AccountBalanceMock.sol:AccountBalanceMock": {
        "src": "contracts/mocks/AccountBalanceMock.sol:12",
        "version": {
          "withMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "withoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "linkedWithoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "mock_setOwedRealisedPnlX10_18(int256)",
          "mock_setUnrealizedPnlX10_18(int256)",
          "mock_setPendingFeeX10_18(uint256)",
          "registerBaseToken(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/PositioningMock.sol:PositioningMock": {
        "src": "contracts/mocks/PositioningMock.sol:8",
        "version": {
          "withMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "withoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "linkedWithoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "mock_setFundingPaymentX10_18(int256)",
          "getAllPendingFundingPayment(address)",
          "settleAllFunding(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/oracles/PerpetualOracle.sol:PerpetualOracle": {
        "src": "contracts/oracles/PerpetualOracle.sol:11",
        "version": {
          "withMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "withoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "linkedWithoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e"
        },
        "inherit": [
          "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestIndexSMA(uint256,uint256)",
          "latestMarkPrice(uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/AccountBalance.sol:AccountBalance": {
        "src": "contracts/orderbook/AccountBalance.sol:23",
        "version": {
          "withMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "withoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "linkedWithoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22"
        },
        "inherit": [
          "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "contracts/interfaces/IAccountBalance.sol:IAccountBalance"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "grantSettleRealizedPnlRole(address)",
          "setUnderlyingPriceIndex(address,uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setMinTimeBound(uint256)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleOwedRealizedPnl(address)",
          "registerBaseToken(address,address)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "updateSigmaVolmexIvs(uint256[],uint256[])",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getLiquidatablePositionSize(address,address,int256)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getPnlAndPendingFee(address)",
          "getIndexPrice(address,uint256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "getMarginRequirementForLiquidation(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getNLiquidate(uint256,uint256,uint256)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/OrderValidator.sol:OrderValidator": {
        "src": "contracts/orderbook/OrderValidator.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Positioning.sol:Positioning": {
        "src": "contracts/orderbook/Positioning.sol:30",
        "version": {
          "withMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "withoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "linkedWithoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f"
        },
        "inherit": [
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "setMarketRegistry(address)",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "setPerpetualOracle(address)",
          "setMinPositionSize(uint256,address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setIndexOracleInterval(uint256)",
          "toggleLiquidatorWhitelist()",
          "pause()",
          "unpause()",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "getLiquidatablePosition(address,address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "getAllPendingFundingPayment(address)",
          "isStaleIndexOracle(address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getIndexPrice(address,uint256)",
          "getAccountValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/PositioningConfig.sol:PositioningConfig": {
        "src": "contracts/orderbook/PositioningConfig.sol:12",
        "version": {
          "withMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "withoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "linkedWithoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1",
          "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setLiquidationPenaltyRatio(uint24)",
          "setLiquidatorFeeRatio(uint24)",
          "setPartialCloseRatio(uint24)",
          "setTwapInterval(uint32)",
          "setTwapIntervalLiquidation(uint32)",
          "setMaxMarketsPerAccount(uint8)",
          "setSettlementTokenBalanceCap(uint256)",
          "setMaxFundingRate(uint24)",
          "setImRatio(uint24)",
          "setMmRatio(uint24)",
          "setPartialLiquidationRatio(uint24)",
          "setPerpetualOracle(address)",
          "setPositioning(address)",
          "setAccountBalance(address)",
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialLiquidationRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Vault.sol:Vault": {
        "src": "contracts/orderbook/Vault.sol:24",
        "version": {
          "withMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "withoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "linkedWithoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/storage/VaultStorage.sol:VaultStorageV1",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVault.sol:IVault"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/VaultController.sol:VaultController": {
        "src": "contracts/orderbook/VaultController.sol:23",
        "version": {
          "withMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "withoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "linkedWithoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/interfaces/IVaultController.sol:IVaultController",
          "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "registerVault(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "setPositioning(address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "getVault(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/periphery/VolmexPerpPeriphery.sol:VolmexPerpPeriphery": {
        "src": "contracts/periphery/VolmexPerpPeriphery.sol:15",
        "version": {
          "withMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "withoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "linkedWithoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e"
        },
        "inherit": [
          "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address[2],address,address)",
          "setPerpetualOracle(address)",
          "setRelayer(address)",
          "toggleTraderWhitelistEnabled()",
          "whitelistVault(address,bool)",
          "whitelistTrader(address,bool)",
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "batchOpenPosition(uint256,struct LibOrder.Order[],bytes[],struct LibOrder.Order[],bytes[],bytes)",
          "transferToVault(address,address,uint256)",
          "batchOrderValidate(struct LibOrder.Order[],uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Slashing.sol:Slashing": {
        "src": "contracts/relayer-staking/Slashing.sol:10",
        "version": {
          "withMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "withoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "linkedWithoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811"
        },
        "inherit": [
          "contracts/relayer-staking/Staking.sol:Staking",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "Slashing_init(address,address,address,address,uint256,address)",
          "slash(address)",
          "updateSlashPenalty(uint256)",
          "setSlashingReceiver(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Staking.sol:Staking": {
        "src": "contracts/relayer-staking/Staking.sol:12",
        "version": {
          "withMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "withoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "linkedWithoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79"
        },
        "inherit": [
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "cooldown(uint256)",
          "toggleStaking()",
          "updateMinStakeRequired(uint256)",
          "updateRelayerMultisig(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1": {
        "src": "contracts/storage/AccountBalanceStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1": {
        "src": "contracts/storage/BaseTokenStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/FundingRateStorage.sol:FundingRateStorage": {
        "src": "contracts/storage/FundingRateStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1": {
        "src": "contracts/storage/MarketRegistryStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1": {
        "src": "contracts/storage/PositioningConfigStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningStorage.sol:PositioningStorageV1": {
        "src": "contracts/storage/PositioningStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage": {
        "src": "contracts/storage/VaultControllerStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultStorage.sol:VaultStorageV1": {
        "src": "contracts/storage/VaultStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/AssetMatcherTest.sol:AssetMatcherTest": {
        "src": "contracts/tests/AssetMatcherTest.sol:10",
        "version": {
          "withMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "withoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "linkedWithoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d"
        },
        "inherit": [
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AssetMatcherTest_init()",
          "matchAssetsTest(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/DevilERC20.sol:DevilTestERC20": {
        "src": "contracts/tests/DevilERC20.sol:9",
        "version": {
          "withMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "withoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "linkedWithoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271.sol:ERC1271": {
        "src": "contracts/tests/ERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271Test.sol:ERC1271Test": {
        "src": "contracts/tests/ERC1271Test.sol:8",
        "version": {
          "withMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "withoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "linkedWithoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947"
        },
        "inherit": [
          "contracts/tests/ERC1271.sol:ERC1271"
        ],
        "libraries": [],
        "methods": [
          "setReturnSuccessfulValidSignature(bool)",
          "isValidSignature(bytes32,bytes)",
          "getAllowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC20TransferProxyTest.sol:ERC20TransferProxyTest": {
        "src": "contracts/tests/ERC20TransferProxyTest.sol:7",
        "version": {
          "withMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "withoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "linkedWithoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c"
        },
        "inherit": [
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ExchangeTest.sol:ExchangeTest": {
        "src": "contracts/tests/ExchangeTest.sol:6",
        "version": {
          "withMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "withoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "linkedWithoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPerpetualOracle(address)",
          "addObservation(uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MatchingEngineTest.sol:MatchingEngineTest": {
        "src": "contracts/tests/MatchingEngineTest.sol:7",
        "version": {
          "withMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "withoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "linkedWithoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngine.sol:MatchingEngine",
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "__MatchingEngineTest_init(address,address)",
          "matchOrdersTest((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "setMakerMinSalt(uint256)",
          "addObservation(uint256,uint256)",
          "pause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MockERC20.sol:SlashERC20": {
        "src": "contracts/tests/MockERC20.sol:8",
        "version": {
          "withMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "withoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "linkedWithoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/PositioningTest.sol:PositioningTest": {
        "src": "contracts/tests/PositioningTest.sol:9",
        "version": {
          "withMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "withoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "linkedWithoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "registerBaseToken(address,address)",
          "getTotalAbsPositionValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/Safe.sol:Safe": {
        "src": "contracts/tests/Safe.sol:4",
        "version": {
          "withMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "withoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "linkedWithoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/SlashERC20.sol:UnStakeERC20": {
        "src": "contracts/tests/SlashERC20.sol:8",
        "version": {
          "withMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "withoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "linkedWithoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20.sol:TestERC20": {
        "src": "contracts/tests/TestERC20.sol:7",
        "version": {
          "withMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "withoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "linkedWithoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transferFrom(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20Relayer.sol:StakeERC20": {
        "src": "contracts/tests/TestERC20Relayer.sol:8",
        "version": {
          "withMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "withoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "linkedWithoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TransferManagerTest.sol:TransferManagerTest": {
        "src": "contracts/tests/TransferManagerTest.sol:11",
        "version": {
          "withMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "withoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "linkedWithoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f"
        },
        "inherit": [
          "contracts/matching-engine/TransferManager.sol:TransferManager",
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "checkDoTransfers(((address,uint256),address,address),((address,uint256),address,address))",
          "__TransferManager_init(address,address)",
          "transferManager_init(address,address)",
          "transferPayouts(address,uint256,address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultControllerTest.sol:VaultControllerTest": {
        "src": "contracts/tests/VaultControllerTest.sol:7",
        "version": {
          "withMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "withoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "linkedWithoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256,address,address)",
          "deposit(address,address,uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultERC20.sol:VaultTestERC20": {
        "src": "contracts/tests/VaultERC20.sol:9",
        "version": {
          "withMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "withoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "linkedWithoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultTest.sol:VaultMock": {
        "src": "contracts/tests/VaultTest.sol:8",
        "version": {
          "withMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "withoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "linkedWithoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VirtualTokenTest.sol:VirtualTokenTest": {
        "src": "contracts/tests/VirtualTokenTest.sol:6",
        "version": {
          "withMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "withoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "linkedWithoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)",
          "beforeTokenTransfer(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/insurance/InsuranceFund.sol:InsuranceFund": {
        "src": "contracts/tests/insurance/InsuranceFund.sol:12",
        "version": {
          "withMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "withoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "linkedWithoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25"
        },
        "inherit": [
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setBorrower(address)",
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibPerpMathTest.sol:TestPerpMath": {
        "src": "contracts/tests/libs/LibPerpMathTest.sol:6",
        "version": {
          "withMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "withoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "linkedWithoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testMax(int256,int256)",
          "testMin(int256,int256)",
          "testAbs(int256)",
          "neg128(int128)",
          "uintNeg128(uint128)",
          "testMulRatio(uint256,uint24)",
          "testMulDiv(int256,int256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSafeCastTest.sol:TestPerpSafeCast": {
        "src": "contracts/tests/libs/LibSafeCastTest.sol:8",
        "version": {
          "withMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "withoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "linkedWithoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testToUint128(uint256)",
          "testToUint64(uint256)",
          "testToUint32(uint256)",
          "testToUint16(uint256)",
          "testToUint8(uint256)",
          "testToInt128(int256)",
          "testToInt64(int256)",
          "testToInt32(int256)",
          "testToInt24(int256)",
          "testToInt16(int256)",
          "testToInt8(int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSettlementTokenMathTest.sol:TestSettlementTokenMath": {
        "src": "contracts/tests/libs/LibSettlementTokenMathTest.sol:6",
        "version": {
          "withMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "withoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "linkedWithoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testParseSettlementToken(uint256,uint8)",
          "testParseSettlementToken(int256,uint8)",
          "testFormatSettlementToken(uint256,uint8)",
          "testFormatSettlementToken(int256,uint8)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSignatureTest.sol:LibSignatureTest": {
        "src": "contracts/tests/libs/LibSignatureTest.sol:8",
        "version": {
          "withMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "withoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "linkedWithoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "recoverFromSigTest(bytes32,bytes)",
          "recoverFromParamsTest(bytes32,uint8,bytes32,bytes32)",
          "getKeccak(string)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexPositionToken.sol:VolmexPositionToken": {
        "src": "contracts/tests/protocol/VolmexPositionToken.sol:13",
        "version": {
          "withMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "withoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "linkedWithoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "updateTokenMetadata(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()",
          "name()",
          "symbol()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexProtocol.sol:VolmexProtocol": {
        "src": "contracts/tests/protocol/VolmexProtocol.sol:15",
        "version": {
          "withMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "withoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "linkedWithoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updateVolatilityToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VirtualToken.sol:VirtualToken": {
        "src": "contracts/tokens/VirtualToken.sol:9",
        "version": {
          "withMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "withoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "linkedWithoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setMintBurnRole(address)",
          "toggleTransferEnable()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexBaseToken.sol:VolmexBaseToken": {
        "src": "contracts/tokens/VolmexBaseToken.sol:9",
        "version": {
          "withMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "withoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "linkedWithoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c"
        },
        "inherit": [
          "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1",
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexQuoteToken.sol:VolmexQuoteToken": {
        "src": "contracts/tokens/VolmexQuoteToken.sol:7",
        "version": {
          "withMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "withoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "linkedWithoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/transfer-proxies/ERC20TransferProxy.sol:ERC20TransferProxy": {
        "src": "contracts/transfer-proxies/ERC20TransferProxy.sol:8",
        "version": {
          "withMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "withoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "linkedWithoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20TransferProxyInit()",
          "addTransferProxyRole(address)",
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/view/VolmexPerpView.sol:VolmexPerpView": {
        "src": "contracts/view/VolmexPerpView.sol:9",
        "version": {
          "withMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "withoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "linkedWithoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "grantViewStatesRole(address)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "withoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "linkedWithoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "withoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f",
          "linkedWithoutMetadata": "0a3695c19ef3a177000c0c093dcda6abeb1a9e39d7d7a0b1ef2b0389fc1d771f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:29",
        "version": {
          "withMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "withoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457",
          "linkedWithoutMetadata": "aadf5f1fb71c8764d1a995bd4d08ee9bdd5b4a83c08f27324a603e1c7ebe5457"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "withoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc",
          "linkedWithoutMetadata": "4ce61dc11312d9d4ff903480b8de03c050003e4537b197b0a174112058c15cbc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "withoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953",
          "linkedWithoutMetadata": "6684e36b1847f8b584b5b47447a7ece800a84aaddd8616c377bc2df853af6953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "withoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04",
          "linkedWithoutMetadata": "ef8f2e15e6ebd7fe1ea008964037fc924b9ea6425cc5b794afcfd5d163b5fd04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "withoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42",
          "linkedWithoutMetadata": "55671705f63e2a63ad5aac38a4dbdd52eb818c062d681464bf43f4cd7b98ba42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "withoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548",
          "linkedWithoutMetadata": "cba989be3908f6cb3f96bdf58932f05cbb37145178e244c7e4c28699e77e5548"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:41",
        "version": {
          "withMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "withoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df",
          "linkedWithoutMetadata": "e97f1890b34291f5ce89817285f9afe0496b72761be5633cacbe1da72a8e07df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "withoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590",
          "linkedWithoutMetadata": "92b0449346b0bbc14e9a5285ca9b1ef1a13476c981b425feb23994fad6dc1590"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "withoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9",
          "linkedWithoutMetadata": "36568ec9baa7e12d3c12c4845774f3a1db34202fc6362f5f94337c28236a96d9"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "withoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4",
          "linkedWithoutMetadata": "eb40cfa0738b4ebd48989a3873ea88e3ee5429297ac5cd8c40e78837610627a4"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "withoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42",
          "linkedWithoutMetadata": "9813f553574ce66a6066d98fd3718034f69ec45cb59d65f73ebc33e7aebbfe42"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "withoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5",
          "linkedWithoutMetadata": "ea1e8a8e71f8838fe6425140827540179d2102b7add0a55726c21d8ca3334fe5"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "withoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd",
          "linkedWithoutMetadata": "c263345061ae640ee597bbcb1f81d283445c025311e3492e5fb39e2e40a639fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "withoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f",
          "linkedWithoutMetadata": "1fb052bbb7a5c7935c53670a7db35038e1acf8a904146654638500535552858f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/funding-rate/FundingRate.sol:FundingRate": {
        "src": "contracts/funding-rate/FundingRate.sol:17",
        "version": {
          "withMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "withoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d",
          "linkedWithoutMetadata": "08bf6dad0e3db4fc6b92877aea084db680d5820d5cee92ffd316ecc67db71e7d"
        },
        "inherit": [
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/BlockContext.sol:BlockContext": {
        "src": "contracts/helpers/BlockContext.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/MarketRegistry.sol:MarketRegistry": {
        "src": "contracts/helpers/MarketRegistry.sol:15",
        "version": {
          "withMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "withoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99",
          "linkedWithoutMetadata": "fa56e440b12c3488b1e0553b233bcba05d75bc0169fb677c648336deffc6fb99"
        },
        "inherit": [
          "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "setMaxOrdersPerMarket(uint8)",
          "addBaseToken(address)",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "checkBaseToken(address)",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/OwnerPausable.sol:OwnerPausable": {
        "src": "contracts/helpers/OwnerPausable.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/helpers/PositioningCallee.sol:PositioningCallee": {
        "src": "contracts/helpers/PositioningCallee.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setPositioning(address)",
          "getPositioning()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAccountBalance.sol:IAccountBalance": {
        "src": "contracts/interfaces/IAccountBalance.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "settleOwedRealizedPnl(address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "getLiquidatablePositionSize(address,address,int256)",
          "registerBaseToken(address,address)",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getMarginRequirementForLiquidation(address)",
          "getPnlAndPendingFee(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "getNLiquidate(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IAssetMatcher.sol:IAssetMatcher": {
        "src": "contracts/interfaces/IAssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_matchAssets(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/IERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Metadata.sol:IERC20Metadata": {
        "src": "contracts/interfaces/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20Modified.sol:IERC20Modified": {
        "src": "contracts/interfaces/IERC20Modified.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "symbol()",
          "name()",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "grantRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy": {
        "src": "contracts/interfaces/IERC20TransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IFundingRate.sol:IFundingRate": {
        "src": "contracts/interfaces/IFundingRate.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "settleFunding(address,address)",
          "getPendingFundingPayment(address,address)",
          "getLastFundingRate(address)",
          "getNextFunding(address)",
          "getFundingPeriod()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IGnosisSafe.sol:IGnosisSafe": {
        "src": "contracts/interfaces/IGnosisSafe.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThreshold()",
          "getOwners()",
          "isOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund": {
        "src": "contracts/interfaces/IInsuranceFund.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMarketRegistry.sol:IMarketRegistry": {
        "src": "contracts/interfaces/IMarketRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address[2])",
          "setMaxOrdersPerMarket(uint8)",
          "setMakerFeeRatio(uint24)",
          "setTakerFeeRatio(uint24)",
          "addBaseToken(address)",
          "checkBaseToken(address)",
          "getMakerFeeRatio()",
          "getTakerFeeRatio()",
          "getQuoteToken()",
          "getMaxOrdersPerMarket()",
          "getBaseTokens()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine": {
        "src": "contracts/interfaces/IMatchingEngine.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "grantMatchOrders(address)",
          "fills(bytes32)",
          "makerMinSalt(address)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle": {
        "src": "contracts/interfaces/IPerpetualOracle.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestMarkPrice(uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "latestIndexSMA(uint256,uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)",
          "indexByBaseToken(address)",
          "initialTimestamps(uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioning.sol:IPositioning": {
        "src": "contracts/interfaces/IPositioning.sol:7",
        "inherit": [
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "toggleLiquidatorWhitelist()",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "getLiquidatablePosition(address,address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getAllPendingFundingPayment(address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "isStaleIndexOracle(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig": {
        "src": "contracts/interfaces/IPositioningConfig.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()",
          "getPartialLiquidationRatio()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ISlashing.sol:ISlashing": {
        "src": "contracts/interfaces/ISlashing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "slash(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferExecutor.sol:ITransferExecutor": {
        "src": "contracts/interfaces/ITransferExecutor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferManager.sol:ITransferManager": {
        "src": "contracts/interfaces/ITransferManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ITransferProxy.sol:ITransferProxy": {
        "src": "contracts/interfaces/ITransferProxy.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer((address,uint256),address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVaultController.sol:IVaultController": {
        "src": "contracts/interfaces/IVaultController.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "registerVault(address,address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getVault(address)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "setPositioning(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVirtualToken.sol:IVirtualToken": {
        "src": "contracts/interfaces/IVirtualToken.sol:6",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "isBase()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken": {
        "src": "contracts/interfaces/IVolmexBaseToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery": {
        "src": "contracts/interfaces/IVolmexPerpPeriphery.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "transferToVault(address,address,uint256)",
          "whitelistTrader(address,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView": {
        "src": "contracts/interfaces/IVolmexPerpView.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "perpIndexCount()",
          "vaultIndexCount()",
          "baseTokenIndexCount()",
          "quoteTokenIndexCount()",
          "positionings(uint256)",
          "vaultControllers(uint256)",
          "baseTokens(uint256)",
          "quoteTokens(uint256)",
          "accounts(uint256)",
          "marketRegistries(uint256)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexProtocol.sol:IVolmexProtocol": {
        "src": "contracts/interfaces/IVolmexProtocol.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "minimumCollateralQty()",
          "active()",
          "isSettled()",
          "volatilityToken()",
          "inverseVolatilityToken()",
          "collateral()",
          "issuanceFees()",
          "redeemFees()",
          "accumulatedFees()",
          "volatilityCapRatio()",
          "settlementPrice()",
          "precisionRatio()",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updatePositionToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken": {
        "src": "contracts/interfaces/IVolmexQuoteToken.sol:6",
        "inherit": [
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAccountMarket.sol:LibAccountMarket": {
        "src": "contracts/libs/LibAccountMarket.sol:4",
        "version": {
          "withMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "withoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3",
          "linkedWithoutMetadata": "0b16f5d3ba469748d2ff1cabdbe557491703756664b396388ecfac20ec5cc4b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibAsset.sol:LibAsset": {
        "src": "contracts/libs/LibAsset.sol:4",
        "version": {
          "withMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "withoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f",
          "linkedWithoutMetadata": "a31f88173ded43f8871481a407d78f1483e3035b23768b1323f7317c6fda444f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibDeal.sol:LibDeal": {
        "src": "contracts/libs/LibDeal.sol:6",
        "version": {
          "withMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "withoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517",
          "linkedWithoutMetadata": "7c3fdab2748a83e224112bf56e33d87fb6b375b720475a35208a7dfefcfa2517"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFill.sol:LibFill": {
        "src": "contracts/libs/LibFill.sol:7",
        "version": {
          "withMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "withoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438",
          "linkedWithoutMetadata": "dd2028b4e8054164b039fee2a3fef0f6efe8639142dca4c80bb4f0ab2b6e2438"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibFullMath.sol:LibFullMath": {
        "src": "contracts/libs/LibFullMath.sol:7",
        "version": {
          "withMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "withoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce",
          "linkedWithoutMetadata": "9d84cc9547b8cb227eb08f579a87fc8779beafb5f1933ec6498824aada40bfce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibMath.sol:LibMath": {
        "src": "contracts/libs/LibMath.sol:5",
        "version": {
          "withMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "withoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791",
          "linkedWithoutMetadata": "9b4b0a3101772c3cda99a84329321d542809aa7e4a654eae23f15fa8b10cc791"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibOrder.sol:LibOrder": {
        "src": "contracts/libs/LibOrder.sol:9",
        "version": {
          "withMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "withoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9",
          "linkedWithoutMetadata": "196433293087d3de03ddc9d176a34e9c7c624fa9527a3eec11c412457aae96d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibPerpMath.sol:LibPerpMath": {
        "src": "contracts/libs/LibPerpMath.sol:8",
        "version": {
          "withMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "withoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d",
          "linkedWithoutMetadata": "02597fb0bba6e97095fc4e28caee6feced4dc8519c7feaa9346421a45a1f296d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastInt.sol:LibSafeCastInt": {
        "src": "contracts/libs/LibSafeCastInt.sol:8",
        "version": {
          "withMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "withoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c",
          "linkedWithoutMetadata": "0d1c00a9a591c42a1eb4bd62300457cb5b27cefe6eacc82dfbc48d736a7cb02c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSafeCastUint.sol:LibSafeCastUint": {
        "src": "contracts/libs/LibSafeCastUint.sol:8",
        "version": {
          "withMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "withoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6",
          "linkedWithoutMetadata": "f7c5af40eeeba434b25d1a1da18a6fbb52c21af0161b6097b7e7c5c466197fa6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSettlementTokenMath.sol:LibSettlementTokenMath": {
        "src": "contracts/libs/LibSettlementTokenMath.sol:5",
        "version": {
          "withMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "withoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953",
          "linkedWithoutMetadata": "509d37fd5c2d923ebcdbe9bb2a28e4f8264d8d9fbc521f4ecb172858d4da4953"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libs/LibSignature.sol:LibSignature": {
        "src": "contracts/libs/LibSignature.sol:5",
        "version": {
          "withMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "withoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2",
          "linkedWithoutMetadata": "7370d5ed2eac4bbaf51aad9b3205bfa95f4ef26d9ebe7def714330e8d97f96b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/AssetMatcher.sol:AssetMatcher": {
        "src": "contracts/matching-engine/AssetMatcher.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngine.sol:MatchingEngine": {
        "src": "contracts/matching-engine/MatchingEngine.sol:7",
        "version": {
          "withMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "withoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d",
          "linkedWithoutMetadata": "981e5e570c87eddc7cb32d0ede3d84a27f6d74901eedcaa6388fed8b6aae246d"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore": {
        "src": "contracts/matching-engine/MatchingEngineCore.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "grantMatchOrders(address)",
          "cancelOrdersInBatch(struct LibOrder.Order[])",
          "cancelAllOrders(uint256)",
          "matchOrderInBatch(struct LibOrder.Order[],struct LibOrder.Order[])",
          "cancelOrder((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "matchOrders((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "updateOrderSizeInterval(uint256)",
          "getMaxOrderSizeOverTime(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferExecutor.sol:TransferExecutor": {
        "src": "contracts/matching-engine/TransferExecutor.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTransferProxy(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/matching-engine/TransferManager.sol:TransferManager": {
        "src": "contracts/matching-engine/TransferManager.sol:11",
        "inherit": [
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/AccountBalanceMock.sol:AccountBalanceMock": {
        "src": "contracts/mocks/AccountBalanceMock.sol:12",
        "version": {
          "withMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "withoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a",
          "linkedWithoutMetadata": "8b3d4f73f97e21430810a4b8fecf69a7039ea5a1c6b1b7db49ac2147ccc6613a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "mock_setOwedRealisedPnlX10_18(int256)",
          "mock_setUnrealizedPnlX10_18(int256)",
          "mock_setPendingFeeX10_18(uint256)",
          "registerBaseToken(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mocks/PositioningMock.sol:PositioningMock": {
        "src": "contracts/mocks/PositioningMock.sol:8",
        "version": {
          "withMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "withoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e",
          "linkedWithoutMetadata": "9694d50d0fed5c876c5ced6aa555ccba5705af0d3748cdf5f1a549c3ba97d30e"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "mock_setFundingPaymentX10_18(int256)",
          "getAllPendingFundingPayment(address)",
          "settleAllFunding(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/oracles/PerpetualOracle.sol:PerpetualOracle": {
        "src": "contracts/oracles/PerpetualOracle.sol:11",
        "version": {
          "withMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "withoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e",
          "linkedWithoutMetadata": "4895d1b5b4be92c4bbc5cdb5550a9cab03c454e92d4ecb0110b6d3b73e48f21e"
        },
        "inherit": [
          "contracts/interfaces/IPerpetualOracle.sol:IPerpetualOracle",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PerpetualOracle_init(address[2],uint256[2],uint256[2],bytes32[2],address)",
          "setPositioning(address)",
          "setMarkObservationAdder(address)",
          "setIndexObservationAdder(address)",
          "grantFundingPeriodRole(address)",
          "grantSmaIntervalRole(address)",
          "setFundingPeriod(uint256)",
          "setMarkSmInterval(uint256)",
          "addMarkObservation(uint256,uint256)",
          "addIndexObservations(uint256[],uint256[],bytes32[])",
          "latestIndexPrice(uint256)",
          "latestIndexSMA(uint256,uint256)",
          "latestMarkPrice(uint256)",
          "lastestTimestamp(uint256,bool)",
          "lastestLastPriceSMA(uint256,uint256)",
          "latestLastPrice(uint256)",
          "getIndexEpochSMA(uint256,uint256,uint256)",
          "getMarkEpochSMA(uint256,uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/AccountBalance.sol:AccountBalance": {
        "src": "contracts/orderbook/AccountBalance.sol:23",
        "version": {
          "withMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "withoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22",
          "linkedWithoutMetadata": "a450d1eab81c4f3b75a3980e5409256c248d8fe815ba0342726d7e8f2d82dd22"
        },
        "inherit": [
          "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "contracts/interfaces/IAccountBalance.sol:IAccountBalance"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address[2],address,address)",
          "grantSettleRealizedPnlRole(address)",
          "setUnderlyingPriceIndex(address,uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setMinTimeBound(uint256)",
          "modifyOwedRealizedPnl(address,int256,address)",
          "updateTwPremiumGrowthGlobal(address,address,int256)",
          "settleOwedRealizedPnl(address)",
          "registerBaseToken(address,address)",
          "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)",
          "updateSigmaVolmexIvs(uint256[],uint256[])",
          "getPositioningConfig()",
          "getBaseTokens(address)",
          "getAccountInfo(address,address)",
          "getLiquidatablePositionSize(address,address,int256)",
          "getOpenNotional(address,address)",
          "getTotalDebtValue(address)",
          "getPnlAndPendingFee(address)",
          "getIndexPrice(address,uint256)",
          "isAccountLiquidatable(address,address,uint256,int256,int256)",
          "getMarginRequirementForLiquidation(address)",
          "getPositionSize(address,address)",
          "getTotalPositionValue(address,address,uint256)",
          "getTotalAbsPositionValue(address)",
          "getTraderBaseTokens(address)",
          "getNLiquidate(uint256,uint256,uint256)",
          "getLiquidationTimeToWait(address,address,int256,uint256,int256)",
          "checkAndUpdateLiquidationTimeToWait(address,address,int256,uint256,int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/OrderValidator.sol:OrderValidator": {
        "src": "contracts/orderbook/OrderValidator.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Positioning.sol:Positioning": {
        "src": "contracts/orderbook/Positioning.sol:30",
        "version": {
          "withMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "withoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f",
          "linkedWithoutMetadata": "df73d0d3f48e9cbe2a67db7bd4a8735c8e189d30404424f70fd553c43ae46c5f"
        },
        "inherit": [
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,address,address[2],address[2],uint256[2])",
          "setMarketRegistry(address)",
          "settleAllFunding(address)",
          "setDefaultFeeReceiver(address)",
          "setPerpetualOracle(address)",
          "setMinPositionSize(uint256,address)",
          "whitelistLiquidator(address,bool)",
          "setFundingPeriod(uint256)",
          "setSmInterval(uint256)",
          "setSmIntervalLiquidation(uint256)",
          "setIndexOracleInterval(uint256)",
          "toggleLiquidatorWhitelist()",
          "pause()",
          "unpause()",
          "liquidate(address,address,int256)",
          "liquidateFullPosition(address,address)",
          "openPosition((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "getLiquidatablePosition(address,address)",
          "getOrderValidate((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "getAllPendingFundingPayment(address)",
          "isStaleIndexOracle(address)",
          "getPnlToBeRealized((address,address,int256,int256))",
          "getIndexPrice(address,uint256)",
          "getAccountValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/PositioningConfig.sol:PositioningConfig": {
        "src": "contracts/orderbook/PositioningConfig.sol:12",
        "version": {
          "withMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "withoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f",
          "linkedWithoutMetadata": "7eb8e0d57f3e82b4cf1817d1dd530b18276c696c7f7f59723ccd95adb63d6c1f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1",
          "contracts/interfaces/IPositioningConfig.sol:IPositioningConfig"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setLiquidationPenaltyRatio(uint24)",
          "setLiquidatorFeeRatio(uint24)",
          "setPartialCloseRatio(uint24)",
          "setTwapInterval(uint32)",
          "setTwapIntervalLiquidation(uint32)",
          "setMaxMarketsPerAccount(uint8)",
          "setSettlementTokenBalanceCap(uint256)",
          "setMaxFundingRate(uint24)",
          "setImRatio(uint24)",
          "setMmRatio(uint24)",
          "setPartialLiquidationRatio(uint24)",
          "setPerpetualOracle(address)",
          "setPositioning(address)",
          "setAccountBalance(address)",
          "getMaxMarketsPerAccount()",
          "getImRatio()",
          "getMmRatio()",
          "getLiquidationPenaltyRatio()",
          "getLiquidatorFeeRatio()",
          "getPartialLiquidationRatio()",
          "getPartialCloseRatio()",
          "getTwapInterval()",
          "getTwapIntervalLiquidation()",
          "getSettlementTokenBalanceCap()",
          "getMaxFundingRate()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/Vault.sol:Vault": {
        "src": "contracts/orderbook/Vault.sol:24",
        "version": {
          "withMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "withoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa",
          "linkedWithoutMetadata": "fb365c50e9644037766c2ed69f30d58c0e66ef81a6d3c4ac076ae972bd57feaa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/storage/VaultStorage.sol:VaultStorageV1",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVault.sol:IVault"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)",
          "transferFundToVault(address,uint256)",
          "repayDebtToOwner(address,uint256)",
          "setSettlementToken(address)",
          "getSettlementToken()",
          "decimals()",
          "getTotalDebt()",
          "getPositioningConfig()",
          "getAccountBalance()",
          "getPositioning()",
          "getVaultController()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/orderbook/VaultController.sol:VaultController": {
        "src": "contracts/orderbook/VaultController.sol:23",
        "version": {
          "withMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "withoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68",
          "linkedWithoutMetadata": "d72ffb00f1662d44c68268ed904b359d692f108c601e2600d8e81c70bf285d68"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/interfaces/IVaultController.sol:IVaultController",
          "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage",
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "registerVault(address,address)",
          "deposit(address,address,address,uint256)",
          "withdraw(address,address,uint256)",
          "setPositioning(address)",
          "getAccountValue(address)",
          "getFreeCollateralByRatio(address,uint24)",
          "getBalance(address)",
          "getBalanceByToken(address,address)",
          "getVault(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/periphery/VolmexPerpPeriphery.sol:VolmexPerpPeriphery": {
        "src": "contracts/periphery/VolmexPerpPeriphery.sol:15",
        "version": {
          "withMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "withoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e",
          "linkedWithoutMetadata": "9008d49904d72834ac728eeba37ea596fb3805749bd03a459189ee85b30a047e"
        },
        "inherit": [
          "contracts/interfaces/IVolmexPerpPeriphery.sol:IVolmexPerpPeriphery",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address[2],address,address)",
          "setPerpetualOracle(address)",
          "setRelayer(address)",
          "toggleTraderWhitelistEnabled()",
          "whitelistVault(address,bool)",
          "whitelistTrader(address,bool)",
          "depositToVault(uint256,address,uint256)",
          "withdrawFromVault(uint256,address,address,uint256)",
          "openPosition(uint256,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),bytes,bytes)",
          "batchOpenPosition(uint256,struct LibOrder.Order[],bytes[],struct LibOrder.Order[],bytes[],bytes)",
          "transferToVault(address,address,uint256)",
          "batchOrderValidate(struct LibOrder.Order[],uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Slashing.sol:Slashing": {
        "src": "contracts/relayer-staking/Slashing.sol:10",
        "version": {
          "withMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "withoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811",
          "linkedWithoutMetadata": "191f5640ff81f90d9e877c824bc7a644f542736b4bb123cf8764b301f79f7811"
        },
        "inherit": [
          "contracts/relayer-staking/Staking.sol:Staking",
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "Slashing_init(address,address,address,address,uint256,address)",
          "slash(address)",
          "updateSlashPenalty(uint256)",
          "setSlashingReceiver(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/relayer-staking/Staking.sol:Staking": {
        "src": "contracts/relayer-staking/Staking.sol:12",
        "version": {
          "withMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "withoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79",
          "linkedWithoutMetadata": "1d8153f838c75ff3906ab56f52e7cbd0bbc73b902115575893bdf0c77b125d79"
        },
        "inherit": [
          "contracts/helpers/BlockContext.sol:BlockContext",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "unstake(address)",
          "cooldown(uint256)",
          "toggleStaking()",
          "updateMinStakeRequired(uint256)",
          "updateRelayerMultisig(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/AccountBalanceStorage.sol:AccountBalanceStorageV1": {
        "src": "contracts/storage/AccountBalanceStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1": {
        "src": "contracts/storage/BaseTokenStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/FundingRateStorage.sol:FundingRateStorage": {
        "src": "contracts/storage/FundingRateStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/MarketRegistryStorage.sol:MarketRegistryStorageV1": {
        "src": "contracts/storage/MarketRegistryStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningConfigStorage.sol:PositioningConfigStorageV1": {
        "src": "contracts/storage/PositioningConfigStorage.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/PositioningStorage.sol:PositioningStorageV1": {
        "src": "contracts/storage/PositioningStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultControllerStorage.sol:VaultControllerStorage": {
        "src": "contracts/storage/VaultControllerStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/storage/VaultStorage.sol:VaultStorageV1": {
        "src": "contracts/storage/VaultStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/AssetMatcherTest.sol:AssetMatcherTest": {
        "src": "contracts/tests/AssetMatcherTest.sol:10",
        "version": {
          "withMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "withoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d",
          "linkedWithoutMetadata": "857ceed361be6db48769bed863ea3e9713940e6ee3a782ec80394e6542e0441d"
        },
        "inherit": [
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AssetMatcherTest_init()",
          "matchAssetsTest(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/DevilERC20.sol:DevilTestERC20": {
        "src": "contracts/tests/DevilERC20.sol:9",
        "version": {
          "withMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "withoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5",
          "linkedWithoutMetadata": "ef081b92430158e1c3a8649a5d41e46e9b5efca45161310cdeeae4850324e8b5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271.sol:ERC1271": {
        "src": "contracts/tests/ERC1271.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC1271Test.sol:ERC1271Test": {
        "src": "contracts/tests/ERC1271Test.sol:8",
        "version": {
          "withMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "withoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947",
          "linkedWithoutMetadata": "36a16792eb535ed295f7c65bbc5beea020351eed1391275bc8bcaaa83b02c947"
        },
        "inherit": [
          "contracts/tests/ERC1271.sol:ERC1271"
        ],
        "libraries": [],
        "methods": [
          "setReturnSuccessfulValidSignature(bool)",
          "isValidSignature(bytes32,bytes)",
          "getAllowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ERC20TransferProxyTest.sol:ERC20TransferProxyTest": {
        "src": "contracts/tests/ERC20TransferProxyTest.sol:7",
        "version": {
          "withMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "withoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c",
          "linkedWithoutMetadata": "f589d3440e11fe83c47b3392b3a1ef1ebe3c87f9fe244162e079feef6891cb3c"
        },
        "inherit": [
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/ExchangeTest.sol:ExchangeTest": {
        "src": "contracts/tests/ExchangeTest.sol:6",
        "version": {
          "withMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "withoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4",
          "linkedWithoutMetadata": "fbe9e752b8735c7dfdb0f0c4900f0d23d0c3e2df15f70c2a329f422239e66ae4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPerpetualOracle(address)",
          "addObservation(uint256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MatchingEngineTest.sol:MatchingEngineTest": {
        "src": "contracts/tests/MatchingEngineTest.sol:7",
        "version": {
          "withMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "withoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc",
          "linkedWithoutMetadata": "3ad69cbe6a1be60558aac0c9f1c56028a270eeeff8bdd761271202da9c00a6dc"
        },
        "inherit": [
          "contracts/matching-engine/MatchingEngine.sol:MatchingEngine",
          "contracts/matching-engine/MatchingEngineCore.sol:MatchingEngineCore",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "contracts/matching-engine/AssetMatcher.sol:AssetMatcher",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IMatchingEngine.sol:IMatchingEngine"
        ],
        "libraries": [],
        "methods": [
          "__MatchingEngineTest_init(address,address)",
          "matchOrdersTest((bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool),(bytes4,uint64,address,(address,uint256),(address,uint256),uint256,uint128,bool))",
          "setMakerMinSalt(uint256)",
          "addObservation(uint256,uint256)",
          "pause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/MockERC20.sol:SlashERC20": {
        "src": "contracts/tests/MockERC20.sol:8",
        "version": {
          "withMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "withoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df",
          "linkedWithoutMetadata": "87bd5ef9ecfb2a7920cd3cef831b5040813bd9a8f29c067346bcd0176dad08df"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/PositioningTest.sol:PositioningTest": {
        "src": "contracts/tests/PositioningTest.sol:9",
        "version": {
          "withMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "withoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241",
          "linkedWithoutMetadata": "24653cc450eae3fd27043c6d2cce92ddb41885af60e477c63a374373328c2241"
        },
        "inherit": [
          "contracts/orderbook/Positioning.sol:Positioning",
          "contracts/orderbook/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/funding-rate/FundingRate.sol:FundingRate",
          "contracts/storage/PositioningStorage.sol:PositioningStorageV1",
          "contracts/storage/FundingRateStorage.sol:FundingRateStorage",
          "contracts/helpers/PositioningCallee.sol:PositioningCallee",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IPositioning.sol:IPositioning",
          "contracts/interfaces/IFundingRate.sol:IFundingRate"
        ],
        "libraries": [],
        "methods": [
          "registerBaseToken(address,address)",
          "getTotalAbsPositionValue(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/Safe.sol:Safe": {
        "src": "contracts/tests/Safe.sol:4",
        "version": {
          "withMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "withoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309",
          "linkedWithoutMetadata": "62741bf970dd05092df51cc5569b463edfc55b0645a837b60a2f146f97b36309"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOwner(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/SlashERC20.sol:UnStakeERC20": {
        "src": "contracts/tests/SlashERC20.sol:8",
        "version": {
          "withMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "withoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc",
          "linkedWithoutMetadata": "c3b372ffa41c3bf95b7f2cfc6a4b2b15e2d4467786a6a44611b07f9b720e15dc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20.sol:TestERC20": {
        "src": "contracts/tests/TestERC20.sol:7",
        "version": {
          "withMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "withoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87",
          "linkedWithoutMetadata": "1c29c9ae14fe8258ad97c65c3813855aa7e29878407e13d00c4e2d5dc6b03e87"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transferFrom(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TestERC20Relayer.sol:StakeERC20": {
        "src": "contracts/tests/TestERC20Relayer.sol:8",
        "version": {
          "withMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "withoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d",
          "linkedWithoutMetadata": "77fe4990e0c6362119cceaf45aa9b9041b9803379a340dacb54bfd497590ed0d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/TransferManagerTest.sol:TransferManagerTest": {
        "src": "contracts/tests/TransferManagerTest.sol:11",
        "version": {
          "withMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "withoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f",
          "linkedWithoutMetadata": "36dee6305be0a4499795c2e38de0e2ffe29fc126462d1ac72e6584a2858e623f"
        },
        "inherit": [
          "contracts/matching-engine/TransferManager.sol:TransferManager",
          "contracts/matching-engine/TransferExecutor.sol:TransferExecutor",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "checkDoTransfers(((address,uint256),address,address),((address,uint256),address,address))",
          "__TransferManager_init(address,address)",
          "transferManager_init(address,address)",
          "transferPayouts(address,uint256,address,address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultControllerTest.sol:VaultControllerTest": {
        "src": "contracts/tests/VaultControllerTest.sol:7",
        "version": {
          "withMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "withoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70",
          "linkedWithoutMetadata": "1e6c463b90546aaeb209afa98496fd621fc78b98265aa11705e516b4018edc70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256,address,address)",
          "deposit(address,address,uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultERC20.sol:VaultTestERC20": {
        "src": "contracts/tests/VaultERC20.sol:9",
        "version": {
          "withMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "withoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38",
          "linkedWithoutMetadata": "92188bef651ed0f02ec90c35b60139741c36377ae2c19aacb5c01fc079790e38"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol:ERC20PresetMinterPauserUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:IAccessControlEnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__TestERC20_init(string,string,uint8)",
          "decimals()",
          "setMinter(address)",
          "burnWithoutApproval(address,uint256)",
          "setTransferFeeRatio(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VaultTest.sol:VaultMock": {
        "src": "contracts/tests/VaultTest.sol:8",
        "version": {
          "withMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "withoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f",
          "linkedWithoutMetadata": "6622ebab160b2414e1b750dd9eebc47853e6ab9012c10317d1b2d281e6d1229f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address)",
          "withdraw(uint256,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/VirtualTokenTest.sol:VirtualTokenTest": {
        "src": "contracts/tests/VirtualTokenTest.sol:6",
        "version": {
          "withMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "withoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9",
          "linkedWithoutMetadata": "644eeaf414039156909e450d84d1fc8e43950cc133452992a301a789cf9327c9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)",
          "beforeTokenTransfer(address,address,uint256)",
          "approveTest(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/insurance/InsuranceFund.sol:InsuranceFund": {
        "src": "contracts/tests/insurance/InsuranceFund.sol:12",
        "version": {
          "withMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "withoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25",
          "linkedWithoutMetadata": "9e559c9df7303c66813ac18c23053d7a1bf153b5338e77c7aea06a435cc65a25"
        },
        "inherit": [
          "contracts/helpers/OwnerPausable.sol:OwnerPausable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IInsuranceFund.sol:IInsuranceFund"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setBorrower(address)",
          "borrow(uint256)",
          "getToken()",
          "getBorrower()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibPerpMathTest.sol:TestPerpMath": {
        "src": "contracts/tests/libs/LibPerpMathTest.sol:6",
        "version": {
          "withMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "withoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61",
          "linkedWithoutMetadata": "86d674908f53a4e7895548a6fd948a75dab5868108f037481e53bce4e1e56b61"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testMax(int256,int256)",
          "testMin(int256,int256)",
          "testAbs(int256)",
          "neg128(int128)",
          "uintNeg128(uint128)",
          "testMulRatio(uint256,uint24)",
          "testMulDiv(int256,int256,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSafeCastTest.sol:TestPerpSafeCast": {
        "src": "contracts/tests/libs/LibSafeCastTest.sol:8",
        "version": {
          "withMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "withoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8",
          "linkedWithoutMetadata": "24cc96b755f0181036c2b1a66cd41f3a233caebf6dfe6964a124e09e4f3b32a8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testToUint128(uint256)",
          "testToUint64(uint256)",
          "testToUint32(uint256)",
          "testToUint16(uint256)",
          "testToUint8(uint256)",
          "testToInt128(int256)",
          "testToInt64(int256)",
          "testToInt32(int256)",
          "testToInt24(int256)",
          "testToInt16(int256)",
          "testToInt8(int256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSettlementTokenMathTest.sol:TestSettlementTokenMath": {
        "src": "contracts/tests/libs/LibSettlementTokenMathTest.sol:6",
        "version": {
          "withMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "withoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd",
          "linkedWithoutMetadata": "481a608d32e362e2126700c4b6d5f466bb9c8a38bf606a2955029ba53a34bdcd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testParseSettlementToken(uint256,uint8)",
          "testParseSettlementToken(int256,uint8)",
          "testFormatSettlementToken(uint256,uint8)",
          "testFormatSettlementToken(int256,uint8)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/libs/LibSignatureTest.sol:LibSignatureTest": {
        "src": "contracts/tests/libs/LibSignatureTest.sol:8",
        "version": {
          "withMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "withoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec",
          "linkedWithoutMetadata": "8e888ea9c38e73e69c541ced33f788699b4292d383b658a1d51a0a24407ae4ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "recoverFromSigTest(bytes32,bytes)",
          "recoverFromParamsTest(bytes32,uint8,bytes32,bytes32)",
          "getKeccak(string)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexPositionToken.sol:VolmexPositionToken": {
        "src": "contracts/tests/protocol/VolmexPositionToken.sol:13",
        "version": {
          "withMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "withoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113",
          "linkedWithoutMetadata": "f487fe389bcdcd850963c59134a3007858b72c31cf63b117b1309cbbef172113"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:ERC20PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "updateTokenMetadata(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()",
          "name()",
          "symbol()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tests/protocol/VolmexProtocol.sol:VolmexProtocol": {
        "src": "contracts/tests/protocol/VolmexProtocol.sol:15",
        "version": {
          "withMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "withoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb",
          "linkedWithoutMetadata": "15a8bd6c5e8dc2111fbb446f878ad6613c490374201f1d196b19a55c87f485eb"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "toggleActive()",
          "updateMinimumCollQty(uint256)",
          "updateVolatilityToken(address,bool)",
          "collateralize(uint256)",
          "redeem(uint256)",
          "redeemSettled(uint256,uint256)",
          "settle(uint256)",
          "recoverTokens(address,address,uint256)",
          "updateFees(uint256,uint256)",
          "claimAccumulatedFees()",
          "togglePause(bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VirtualToken.sol:VirtualToken": {
        "src": "contracts/tokens/VirtualToken.sol:9",
        "version": {
          "withMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "withoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9",
          "linkedWithoutMetadata": "19d637e2951ebcda7be17fd659650dee16ccaa24f9a5c88a8f2dbc0cbf31e4e9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setMintBurnRole(address)",
          "toggleTransferEnable()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "mintMaximumTo(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexBaseToken.sol:VolmexBaseToken": {
        "src": "contracts/tokens/VolmexBaseToken.sol:9",
        "version": {
          "withMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "withoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c",
          "linkedWithoutMetadata": "90be24053bf938e69a72cf8b7b8cab935ce72b3030d91e09536738577890d86c"
        },
        "inherit": [
          "contracts/storage/BaseTokenStorage.sol:BaseTokenStorageV1",
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexBaseToken.sol:IVolmexBaseToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,bool)",
          "setPriceFeed(address)",
          "getIndexPrice(uint256,uint256)",
          "getPriceFeed()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/tokens/VolmexQuoteToken.sol:VolmexQuoteToken": {
        "src": "contracts/tokens/VolmexQuoteToken.sol:7",
        "version": {
          "withMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "withoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9",
          "linkedWithoutMetadata": "65941ea9dcc5f1823b4d5f3dd748eb5570751c2a1616368a378755f9ac1f67e9"
        },
        "inherit": [
          "contracts/tokens/VirtualToken.sol:VirtualToken",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "contracts/interfaces/IVolmexQuoteToken.sol:IVolmexQuoteToken",
          "contracts/interfaces/IVirtualToken.sol:IVirtualToken",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,bool)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/transfer-proxies/ERC20TransferProxy.sol:ERC20TransferProxy": {
        "src": "contracts/transfer-proxies/ERC20TransferProxy.sol:8",
        "version": {
          "withMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "withoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f",
          "linkedWithoutMetadata": "f9cd1f19dc57cde2d296a45bed002ca873f76b15512f70df0c6dcac0b226528f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IERC20TransferProxy.sol:IERC20TransferProxy"
        ],
        "libraries": [],
        "methods": [
          "erc20TransferProxyInit()",
          "addTransferProxyRole(address)",
          "erc20SafeTransferFrom(address,address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "contracts/view/VolmexPerpView.sol:VolmexPerpView": {
        "src": "contracts/view/VolmexPerpView.sol:9",
        "version": {
          "withMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "withoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7",
          "linkedWithoutMetadata": "af40aadb79c6ca55182043f4939f29fcd3d24b342f647e225624b8315886bab7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IVolmexPerpView.sol:IVolmexPerpView"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "grantViewStatesRole(address)",
          "setBaseToken(address)",
          "setQuoteToken(address)",
          "setPositioning(address)",
          "setVaultController(address)",
          "setAccount(address)",
          "setMarketRegistry(address)",
          "incrementPerpIndex()",
          "incrementVaultIndex()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "withoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f",
          "linkedWithoutMetadata": "31f21c1aa4b1777b2ac506353f20b28b4201dfbbe66e7de5bcd38e96d0df6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    },
    {
      "contracts/tests/TetherToken.sol:BasicToken": {
        "src": "contracts/tests/TetherToken.sol:104",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:BlackList": {
        "src": "contracts/tests/TetherToken.sol:268",
        "inherit": [
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20": {
        "src": "contracts/tests/TetherToken.sol:93",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:ERC20Basic": {
        "src": "contracts/tests/TetherToken.sol:81",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Ownable": {
        "src": "contracts/tests/TetherToken.sol:45",
        "version": {
          "withMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "withoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2",
          "linkedWithoutMetadata": "922ae4bf9a255276a8dbc0ff1646066254bf3cc914dcbe5998acfa6f83e7bde2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tests/TetherToken.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:Pausable": {
        "src": "contracts/tests/TetherToken.sol:228",
        "version": {
          "withMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "withoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2",
          "linkedWithoutMetadata": "cd267100fffae3e0d6687406f6285f2425cbd364996eb70f8b63e6287e8f48c2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:SafeMath": {
        "src": "contracts/tests/TetherToken.sol:11",
        "version": {
          "withMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "withoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70",
          "linkedWithoutMetadata": "723fc71863a1a0fc65919d799ca5878312a291ca87bfd123733e2b2aaa992d70"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:StandardToken": {
        "src": "contracts/tests/TetherToken.sol:159",
        "inherit": [
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:TetherToken": {
        "src": "contracts/tests/TetherToken.sol:315",
        "version": {
          "withMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "withoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2",
          "linkedWithoutMetadata": "45b44d6d9e343a8b3e0429a2ea690675e6fb6fe280bdb16691c27e62f5e796e2"
        },
        "inherit": [
          "contracts/tests/TetherToken.sol:BlackList",
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Pausable",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,string,string,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "deprecate(address)",
          "totalSupply()",
          "issue(uint256)",
          "redeem(uint256)",
          "setParams(uint256,uint256)"
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetherToken",
            "src": "contracts/tests/TetherToken.sol:330"
          }
        ],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      },
      "contracts/tests/TetherToken.sol:UpgradedStandardToken": {
        "src": "contracts/tests/TetherToken.sol:307",
        "inherit": [
          "contracts/tests/TetherToken.sol:StandardToken",
          "contracts/tests/TetherToken.sol:ERC20",
          "contracts/tests/TetherToken.sol:BasicToken",
          "contracts/tests/TetherToken.sol:ERC20Basic",
          "contracts/tests/TetherToken.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "transferByLegacy(address,address,uint256)",
          "transferFromByLegacy(address,address,address,uint256)",
          "approveByLegacy(address,address,uint256)"
        ],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {}
        },
        "solcVersion": "0.5.1"
      }
    }
  ]
}